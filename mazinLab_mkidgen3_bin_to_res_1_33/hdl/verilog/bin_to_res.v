// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bin_to_res_bin_to_res,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.237000,HLS_SYN_LAT=5,HLS_SYN_TPT=1,HLS_SYN_MEM=128,HLS_SYN_DSP=0,HLS_SYN_FF=5428,HLS_SYN_LUT=991,HLS_VERSION=2021_1}" *)

module bin_to_res (
// synthesis translate_off
    kernel_block,
// synthesis translate_on
        ap_clk,
        ap_rst_n,
        iq_stream_TDATA,
        iq_stream_TVALID,
        iq_stream_TREADY,
        iq_stream_TKEEP,
        iq_stream_TSTRB,
        iq_stream_TLAST,
        res_stream_TDATA,
        res_stream_TVALID,
        res_stream_TREADY,
        res_stream_TKEEP,
        res_stream_TSTRB,
        res_stream_TUSER,
        res_stream_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 13;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

// synthesis translate_off
output kernel_block;
// synthesis translate_on
input   ap_clk;
input   ap_rst_n;
input  [511:0] iq_stream_TDATA;
input   iq_stream_TVALID;
output   iq_stream_TREADY;
input  [63:0] iq_stream_TKEEP;
input  [63:0] iq_stream_TSTRB;
input  [0:0] iq_stream_TLAST;
output  [255:0] res_stream_TDATA;
output   res_stream_TVALID;
input   res_stream_TREADY;
output  [31:0] res_stream_TKEEP;
output  [31:0] res_stream_TSTRB;
output  [7:0] res_stream_TUSER;
output  [0:0] res_stream_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [7:0] rid_to_bin_address0;
reg    rid_to_bin_ce0;
wire   [127:0] rid_to_bin_q0;
reg   [7:0] cache_group_V;
wire   [7:0] cache_V_0_address0;
reg    cache_V_0_ce0;
reg    cache_V_0_we0;
wire   [7:0] cache_V_0_address1;
reg    cache_V_0_ce1;
wire   [511:0] cache_V_0_q1;
wire   [7:0] cache_V_1_address0;
reg    cache_V_1_ce0;
reg    cache_V_1_we0;
wire   [7:0] cache_V_1_address1;
reg    cache_V_1_ce1;
wire   [511:0] cache_V_1_q1;
wire   [7:0] cache_V_2_address0;
reg    cache_V_2_ce0;
reg    cache_V_2_we0;
wire   [7:0] cache_V_2_address1;
reg    cache_V_2_ce1;
wire   [511:0] cache_V_2_q1;
wire   [7:0] cache_V_3_address0;
reg    cache_V_3_ce0;
reg    cache_V_3_we0;
wire   [7:0] cache_V_3_address1;
reg    cache_V_3_ce1;
wire   [511:0] cache_V_3_q1;
wire   [7:0] cache_V_4_address0;
reg    cache_V_4_ce0;
reg    cache_V_4_we0;
wire   [7:0] cache_V_4_address1;
reg    cache_V_4_ce1;
wire   [511:0] cache_V_4_q1;
wire   [7:0] cache_V_5_address0;
reg    cache_V_5_ce0;
reg    cache_V_5_we0;
wire   [7:0] cache_V_5_address1;
reg    cache_V_5_ce1;
wire   [511:0] cache_V_5_q1;
wire   [7:0] cache_V_6_address0;
reg    cache_V_6_ce0;
reg    cache_V_6_we0;
wire   [7:0] cache_V_6_address1;
reg    cache_V_6_ce1;
wire   [511:0] cache_V_6_q1;
wire   [7:0] cache_V_7_address0;
reg    cache_V_7_ce0;
reg    cache_V_7_we0;
wire   [7:0] cache_V_7_address1;
reg    cache_V_7_ce1;
wire   [511:0] cache_V_7_q1;
reg   [7:0] replay_group_V;
reg    iq_stream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    res_stream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [511:0] tmp_11_reg_2139;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state5_pp0_stage0_iter4;
wire    regslice_both_res_stream_V_data_V_U_apdone_blk;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] cache_group_V_load_reg_2151;
reg   [7:0] output_tmp_user_V_reg_2156;
reg   [7:0] output_tmp_user_V_reg_2156_pp0_iter1_reg;
reg   [7:0] output_tmp_user_V_reg_2156_pp0_iter2_reg;
reg   [7:0] output_tmp_user_V_reg_2156_pp0_iter3_reg;
reg   [7:0] lshr_ln_reg_2167;
wire   [3:0] trunc_ln9_fu_536_p1;
reg   [3:0] trunc_ln9_reg_2172;
reg   [3:0] trunc_ln9_reg_2172_pp0_iter2_reg;
reg   [3:0] trunc_ln9_reg_2172_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_1_reg_2177;
reg   [3:0] trunc_ln9_1_reg_2182;
reg   [3:0] trunc_ln9_1_reg_2182_pp0_iter2_reg;
reg   [3:0] trunc_ln9_1_reg_2182_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_2_reg_2187;
reg   [3:0] trunc_ln9_2_reg_2192;
reg   [3:0] trunc_ln9_2_reg_2192_pp0_iter2_reg;
reg   [3:0] trunc_ln9_2_reg_2192_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_3_reg_2197;
reg   [3:0] trunc_ln9_3_reg_2202;
reg   [3:0] trunc_ln9_3_reg_2202_pp0_iter2_reg;
reg   [3:0] trunc_ln9_3_reg_2202_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_4_reg_2207;
reg   [3:0] trunc_ln9_4_reg_2212;
reg   [3:0] trunc_ln9_4_reg_2212_pp0_iter2_reg;
reg   [3:0] trunc_ln9_4_reg_2212_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_5_reg_2217;
reg   [3:0] trunc_ln9_5_reg_2222;
reg   [3:0] trunc_ln9_5_reg_2222_pp0_iter2_reg;
reg   [3:0] trunc_ln9_5_reg_2222_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_6_reg_2227;
reg   [3:0] trunc_ln9_6_reg_2232;
reg   [3:0] trunc_ln9_6_reg_2232_pp0_iter2_reg;
reg   [3:0] trunc_ln9_6_reg_2232_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_7_reg_2237;
reg   [3:0] trunc_ln9_7_reg_2242;
reg   [3:0] trunc_ln9_7_reg_2242_pp0_iter2_reg;
reg   [3:0] trunc_ln9_7_reg_2242_pp0_iter3_reg;
wire   [31:0] iqtmp_0_fu_712_p1;
reg   [31:0] iqtmp_0_reg_2287;
reg   [31:0] iqtmp_1_reg_2292;
reg   [31:0] iqtmp_2_reg_2297;
reg   [31:0] iqtmp_3_reg_2302;
reg   [31:0] iqtmp_4_reg_2307;
reg   [31:0] iqtmp_5_reg_2312;
reg   [31:0] iqtmp_6_reg_2317;
reg   [31:0] iqtmp_7_reg_2322;
reg   [31:0] iqtmp_8_reg_2327;
reg   [31:0] iqtmp_9_reg_2332;
reg   [31:0] iqtmp_10_reg_2337;
reg   [31:0] iqtmp_11_reg_2342;
reg   [31:0] iqtmp_12_reg_2347;
reg   [31:0] iqtmp_13_reg_2352;
reg   [31:0] iqtmp_14_reg_2357;
reg   [31:0] iqtmp_15_reg_2362;
wire   [31:0] iqtmp_0_1_fu_866_p1;
reg   [31:0] iqtmp_0_1_reg_2367;
reg   [31:0] iqtmp_1_1_reg_2372;
reg   [31:0] iqtmp_2_1_reg_2377;
reg   [31:0] iqtmp_3_1_reg_2382;
reg   [31:0] iqtmp_4_1_reg_2387;
reg   [31:0] iqtmp_5_1_reg_2392;
reg   [31:0] iqtmp_6_1_reg_2397;
reg   [31:0] iqtmp_7_1_reg_2402;
reg   [31:0] iqtmp_8_1_reg_2407;
reg   [31:0] iqtmp_9_1_reg_2412;
reg   [31:0] iqtmp_10_1_reg_2417;
reg   [31:0] iqtmp_11_1_reg_2422;
reg   [31:0] iqtmp_12_1_reg_2427;
reg   [31:0] iqtmp_13_1_reg_2432;
reg   [31:0] iqtmp_14_1_reg_2437;
reg   [31:0] iqtmp_15_1_reg_2442;
wire   [31:0] iqtmp_0_2_fu_1020_p1;
reg   [31:0] iqtmp_0_2_reg_2447;
reg   [31:0] iqtmp_1_2_reg_2452;
reg   [31:0] iqtmp_2_2_reg_2457;
reg   [31:0] iqtmp_3_2_reg_2462;
reg   [31:0] iqtmp_4_2_reg_2467;
reg   [31:0] iqtmp_5_2_reg_2472;
reg   [31:0] iqtmp_6_2_reg_2477;
reg   [31:0] iqtmp_7_2_reg_2482;
reg   [31:0] iqtmp_8_2_reg_2487;
reg   [31:0] iqtmp_9_2_reg_2492;
reg   [31:0] iqtmp_10_2_reg_2497;
reg   [31:0] iqtmp_11_2_reg_2502;
reg   [31:0] iqtmp_12_2_reg_2507;
reg   [31:0] iqtmp_13_2_reg_2512;
reg   [31:0] iqtmp_14_2_reg_2517;
reg   [31:0] iqtmp_15_2_reg_2522;
wire   [31:0] iqtmp_0_3_fu_1174_p1;
reg   [31:0] iqtmp_0_3_reg_2527;
reg   [31:0] iqtmp_1_3_reg_2532;
reg   [31:0] iqtmp_2_3_reg_2537;
reg   [31:0] iqtmp_3_3_reg_2542;
reg   [31:0] iqtmp_4_3_reg_2547;
reg   [31:0] iqtmp_5_3_reg_2552;
reg   [31:0] iqtmp_6_3_reg_2557;
reg   [31:0] iqtmp_7_3_reg_2562;
reg   [31:0] iqtmp_8_3_reg_2567;
reg   [31:0] iqtmp_9_3_reg_2572;
reg   [31:0] iqtmp_10_3_reg_2577;
reg   [31:0] iqtmp_11_3_reg_2582;
reg   [31:0] iqtmp_12_3_reg_2587;
reg   [31:0] iqtmp_13_3_reg_2592;
reg   [31:0] iqtmp_14_3_reg_2597;
reg   [31:0] iqtmp_15_3_reg_2602;
wire   [31:0] iqtmp_0_4_fu_1328_p1;
reg   [31:0] iqtmp_0_4_reg_2607;
reg   [31:0] iqtmp_1_4_reg_2612;
reg   [31:0] iqtmp_2_4_reg_2617;
reg   [31:0] iqtmp_3_4_reg_2622;
reg   [31:0] iqtmp_4_4_reg_2627;
reg   [31:0] iqtmp_5_4_reg_2632;
reg   [31:0] iqtmp_6_4_reg_2637;
reg   [31:0] iqtmp_7_4_reg_2642;
reg   [31:0] iqtmp_8_4_reg_2647;
reg   [31:0] iqtmp_9_4_reg_2652;
reg   [31:0] iqtmp_10_4_reg_2657;
reg   [31:0] iqtmp_11_4_reg_2662;
reg   [31:0] iqtmp_12_4_reg_2667;
reg   [31:0] iqtmp_13_4_reg_2672;
reg   [31:0] iqtmp_14_4_reg_2677;
reg   [31:0] iqtmp_15_4_reg_2682;
wire   [31:0] iqtmp_0_5_fu_1482_p1;
reg   [31:0] iqtmp_0_5_reg_2687;
reg   [31:0] iqtmp_1_5_reg_2692;
reg   [31:0] iqtmp_2_5_reg_2697;
reg   [31:0] iqtmp_3_5_reg_2702;
reg   [31:0] iqtmp_4_5_reg_2707;
reg   [31:0] iqtmp_5_5_reg_2712;
reg   [31:0] iqtmp_6_5_reg_2717;
reg   [31:0] iqtmp_7_5_reg_2722;
reg   [31:0] iqtmp_8_5_reg_2727;
reg   [31:0] iqtmp_9_5_reg_2732;
reg   [31:0] iqtmp_10_5_reg_2737;
reg   [31:0] iqtmp_11_5_reg_2742;
reg   [31:0] iqtmp_12_5_reg_2747;
reg   [31:0] iqtmp_13_5_reg_2752;
reg   [31:0] iqtmp_14_5_reg_2757;
reg   [31:0] iqtmp_15_5_reg_2762;
wire   [31:0] iqtmp_0_6_fu_1636_p1;
reg   [31:0] iqtmp_0_6_reg_2767;
reg   [31:0] iqtmp_1_6_reg_2772;
reg   [31:0] iqtmp_2_6_reg_2777;
reg   [31:0] iqtmp_3_6_reg_2782;
reg   [31:0] iqtmp_4_6_reg_2787;
reg   [31:0] iqtmp_5_6_reg_2792;
reg   [31:0] iqtmp_6_6_reg_2797;
reg   [31:0] iqtmp_7_6_reg_2802;
reg   [31:0] iqtmp_8_6_reg_2807;
reg   [31:0] iqtmp_9_6_reg_2812;
reg   [31:0] iqtmp_10_6_reg_2817;
reg   [31:0] iqtmp_11_6_reg_2822;
reg   [31:0] iqtmp_12_6_reg_2827;
reg   [31:0] iqtmp_13_6_reg_2832;
reg   [31:0] iqtmp_14_6_reg_2837;
reg   [31:0] iqtmp_15_6_reg_2842;
wire   [31:0] iqtmp_0_7_fu_1790_p1;
reg   [31:0] iqtmp_0_7_reg_2847;
reg   [31:0] iqtmp_1_7_reg_2852;
reg   [31:0] iqtmp_2_7_reg_2857;
reg   [31:0] iqtmp_3_7_reg_2862;
reg   [31:0] iqtmp_4_7_reg_2867;
reg   [31:0] iqtmp_5_7_reg_2872;
reg   [31:0] iqtmp_6_7_reg_2877;
reg   [31:0] iqtmp_7_7_reg_2882;
reg   [31:0] iqtmp_8_7_reg_2887;
reg   [31:0] iqtmp_9_7_reg_2892;
reg   [31:0] iqtmp_10_7_reg_2897;
reg   [31:0] iqtmp_11_7_reg_2902;
reg   [31:0] iqtmp_12_7_reg_2907;
reg   [31:0] iqtmp_13_7_reg_2912;
reg   [31:0] iqtmp_14_7_reg_2917;
reg   [31:0] iqtmp_15_7_reg_2922;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [63:0] zext_ln573_fu_478_p1;
wire   [63:0] conv_i65_fu_515_p1;
wire   [63:0] zext_ln52_fu_680_p1;
wire   [63:0] zext_ln52_1_fu_684_p1;
wire   [63:0] zext_ln52_2_fu_688_p1;
wire   [63:0] zext_ln52_3_fu_692_p1;
wire   [63:0] zext_ln52_4_fu_696_p1;
wire   [63:0] zext_ln52_5_fu_700_p1;
wire   [63:0] zext_ln52_6_fu_704_p1;
wire   [63:0] zext_ln52_7_fu_708_p1;
wire   [7:0] select_ln63_fu_501_p3;
wire   [7:0] add_ln870_fu_483_p2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln223_fu_495_p2;
wire   [31:0] tmp_s_fu_2091_p18;
wire   [31:0] tmp_9_fu_2070_p18;
wire   [31:0] tmp_8_fu_2049_p18;
wire   [31:0] tmp_7_fu_2028_p18;
wire   [31:0] tmp_6_fu_2007_p18;
wire   [31:0] tmp_5_fu_1986_p18;
wire   [31:0] tmp_4_fu_1965_p18;
wire   [31:0] tmp_fu_1944_p18;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_iq_stream_V_data_V_U_apdone_blk;
wire   [511:0] iq_stream_TDATA_int_regslice;
wire    iq_stream_TVALID_int_regslice;
reg    iq_stream_TREADY_int_regslice;
wire    regslice_both_iq_stream_V_data_V_U_ack_in;
wire    regslice_both_iq_stream_V_keep_V_U_apdone_blk;
wire   [63:0] iq_stream_TKEEP_int_regslice;
wire    regslice_both_iq_stream_V_keep_V_U_vld_out;
wire    regslice_both_iq_stream_V_keep_V_U_ack_in;
wire    regslice_both_iq_stream_V_strb_V_U_apdone_blk;
wire   [63:0] iq_stream_TSTRB_int_regslice;
wire    regslice_both_iq_stream_V_strb_V_U_vld_out;
wire    regslice_both_iq_stream_V_strb_V_U_ack_in;
wire    regslice_both_iq_stream_V_last_V_U_apdone_blk;
wire   [0:0] iq_stream_TLAST_int_regslice;
wire    regslice_both_iq_stream_V_last_V_U_vld_out;
wire    regslice_both_iq_stream_V_last_V_U_ack_in;
wire   [255:0] res_stream_TDATA_int_regslice;
reg    res_stream_TVALID_int_regslice;
wire    res_stream_TREADY_int_regslice;
wire    regslice_both_res_stream_V_data_V_U_vld_out;
wire    regslice_both_res_stream_V_keep_V_U_apdone_blk;
wire    regslice_both_res_stream_V_keep_V_U_ack_in_dummy;
wire    regslice_both_res_stream_V_keep_V_U_vld_out;
wire    regslice_both_res_stream_V_strb_V_U_apdone_blk;
wire    regslice_both_res_stream_V_strb_V_U_ack_in_dummy;
wire    regslice_both_res_stream_V_strb_V_U_vld_out;
wire    regslice_both_res_stream_V_user_V_U_apdone_blk;
wire    regslice_both_res_stream_V_user_V_U_ack_in_dummy;
wire    regslice_both_res_stream_V_user_V_U_vld_out;
wire    regslice_both_res_stream_V_last_V_U_apdone_blk;
wire   [0:0] res_stream_TLAST_int_regslice;
wire    regslice_both_res_stream_V_last_V_U_ack_in_dummy;
wire    regslice_both_res_stream_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 cache_group_V = 8'd0;
#0 replay_group_V = 8'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_0_address0),
    .ce0(cache_V_0_ce0),
    .we0(cache_V_0_we0),
    .d0(tmp_11_reg_2139),
    .address1(cache_V_0_address1),
    .ce1(cache_V_0_ce1),
    .q1(cache_V_0_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_1_address0),
    .ce0(cache_V_1_ce0),
    .we0(cache_V_1_we0),
    .d0(tmp_11_reg_2139),
    .address1(cache_V_1_address1),
    .ce1(cache_V_1_ce1),
    .q1(cache_V_1_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_2_address0),
    .ce0(cache_V_2_ce0),
    .we0(cache_V_2_we0),
    .d0(tmp_11_reg_2139),
    .address1(cache_V_2_address1),
    .ce1(cache_V_2_ce1),
    .q1(cache_V_2_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_3_address0),
    .ce0(cache_V_3_ce0),
    .we0(cache_V_3_we0),
    .d0(tmp_11_reg_2139),
    .address1(cache_V_3_address1),
    .ce1(cache_V_3_ce1),
    .q1(cache_V_3_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_4_address0),
    .ce0(cache_V_4_ce0),
    .we0(cache_V_4_we0),
    .d0(tmp_11_reg_2139),
    .address1(cache_V_4_address1),
    .ce1(cache_V_4_ce1),
    .q1(cache_V_4_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_5_address0),
    .ce0(cache_V_5_ce0),
    .we0(cache_V_5_we0),
    .d0(tmp_11_reg_2139),
    .address1(cache_V_5_address1),
    .ce1(cache_V_5_ce1),
    .q1(cache_V_5_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_6_address0),
    .ce0(cache_V_6_ce0),
    .we0(cache_V_6_we0),
    .d0(tmp_11_reg_2139),
    .address1(cache_V_6_address1),
    .ce1(cache_V_6_ce1),
    .q1(cache_V_6_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_7_address0),
    .ce0(cache_V_7_ce0),
    .we0(cache_V_7_we0),
    .d0(tmp_11_reg_2139),
    .address1(cache_V_7_address1),
    .ce1(cache_V_7_ce1),
    .q1(cache_V_7_q1)
);

bin_to_res_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .rid_to_bin_address0(rid_to_bin_address0),
    .rid_to_bin_ce0(rid_to_bin_ce0),
    .rid_to_bin_q0(rid_to_bin_q0)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U1(
    .din0(iqtmp_0_reg_2287),
    .din1(iqtmp_1_reg_2292),
    .din2(iqtmp_2_reg_2297),
    .din3(iqtmp_3_reg_2302),
    .din4(iqtmp_4_reg_2307),
    .din5(iqtmp_5_reg_2312),
    .din6(iqtmp_6_reg_2317),
    .din7(iqtmp_7_reg_2322),
    .din8(iqtmp_8_reg_2327),
    .din9(iqtmp_9_reg_2332),
    .din10(iqtmp_10_reg_2337),
    .din11(iqtmp_11_reg_2342),
    .din12(iqtmp_12_reg_2347),
    .din13(iqtmp_13_reg_2352),
    .din14(iqtmp_14_reg_2357),
    .din15(iqtmp_15_reg_2362),
    .din16(trunc_ln9_reg_2172_pp0_iter3_reg),
    .dout(tmp_fu_1944_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U2(
    .din0(iqtmp_0_1_reg_2367),
    .din1(iqtmp_1_1_reg_2372),
    .din2(iqtmp_2_1_reg_2377),
    .din3(iqtmp_3_1_reg_2382),
    .din4(iqtmp_4_1_reg_2387),
    .din5(iqtmp_5_1_reg_2392),
    .din6(iqtmp_6_1_reg_2397),
    .din7(iqtmp_7_1_reg_2402),
    .din8(iqtmp_8_1_reg_2407),
    .din9(iqtmp_9_1_reg_2412),
    .din10(iqtmp_10_1_reg_2417),
    .din11(iqtmp_11_1_reg_2422),
    .din12(iqtmp_12_1_reg_2427),
    .din13(iqtmp_13_1_reg_2432),
    .din14(iqtmp_14_1_reg_2437),
    .din15(iqtmp_15_1_reg_2442),
    .din16(trunc_ln9_1_reg_2182_pp0_iter3_reg),
    .dout(tmp_4_fu_1965_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U3(
    .din0(iqtmp_0_2_reg_2447),
    .din1(iqtmp_1_2_reg_2452),
    .din2(iqtmp_2_2_reg_2457),
    .din3(iqtmp_3_2_reg_2462),
    .din4(iqtmp_4_2_reg_2467),
    .din5(iqtmp_5_2_reg_2472),
    .din6(iqtmp_6_2_reg_2477),
    .din7(iqtmp_7_2_reg_2482),
    .din8(iqtmp_8_2_reg_2487),
    .din9(iqtmp_9_2_reg_2492),
    .din10(iqtmp_10_2_reg_2497),
    .din11(iqtmp_11_2_reg_2502),
    .din12(iqtmp_12_2_reg_2507),
    .din13(iqtmp_13_2_reg_2512),
    .din14(iqtmp_14_2_reg_2517),
    .din15(iqtmp_15_2_reg_2522),
    .din16(trunc_ln9_2_reg_2192_pp0_iter3_reg),
    .dout(tmp_5_fu_1986_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U4(
    .din0(iqtmp_0_3_reg_2527),
    .din1(iqtmp_1_3_reg_2532),
    .din2(iqtmp_2_3_reg_2537),
    .din3(iqtmp_3_3_reg_2542),
    .din4(iqtmp_4_3_reg_2547),
    .din5(iqtmp_5_3_reg_2552),
    .din6(iqtmp_6_3_reg_2557),
    .din7(iqtmp_7_3_reg_2562),
    .din8(iqtmp_8_3_reg_2567),
    .din9(iqtmp_9_3_reg_2572),
    .din10(iqtmp_10_3_reg_2577),
    .din11(iqtmp_11_3_reg_2582),
    .din12(iqtmp_12_3_reg_2587),
    .din13(iqtmp_13_3_reg_2592),
    .din14(iqtmp_14_3_reg_2597),
    .din15(iqtmp_15_3_reg_2602),
    .din16(trunc_ln9_3_reg_2202_pp0_iter3_reg),
    .dout(tmp_6_fu_2007_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U5(
    .din0(iqtmp_0_4_reg_2607),
    .din1(iqtmp_1_4_reg_2612),
    .din2(iqtmp_2_4_reg_2617),
    .din3(iqtmp_3_4_reg_2622),
    .din4(iqtmp_4_4_reg_2627),
    .din5(iqtmp_5_4_reg_2632),
    .din6(iqtmp_6_4_reg_2637),
    .din7(iqtmp_7_4_reg_2642),
    .din8(iqtmp_8_4_reg_2647),
    .din9(iqtmp_9_4_reg_2652),
    .din10(iqtmp_10_4_reg_2657),
    .din11(iqtmp_11_4_reg_2662),
    .din12(iqtmp_12_4_reg_2667),
    .din13(iqtmp_13_4_reg_2672),
    .din14(iqtmp_14_4_reg_2677),
    .din15(iqtmp_15_4_reg_2682),
    .din16(trunc_ln9_4_reg_2212_pp0_iter3_reg),
    .dout(tmp_7_fu_2028_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U6(
    .din0(iqtmp_0_5_reg_2687),
    .din1(iqtmp_1_5_reg_2692),
    .din2(iqtmp_2_5_reg_2697),
    .din3(iqtmp_3_5_reg_2702),
    .din4(iqtmp_4_5_reg_2707),
    .din5(iqtmp_5_5_reg_2712),
    .din6(iqtmp_6_5_reg_2717),
    .din7(iqtmp_7_5_reg_2722),
    .din8(iqtmp_8_5_reg_2727),
    .din9(iqtmp_9_5_reg_2732),
    .din10(iqtmp_10_5_reg_2737),
    .din11(iqtmp_11_5_reg_2742),
    .din12(iqtmp_12_5_reg_2747),
    .din13(iqtmp_13_5_reg_2752),
    .din14(iqtmp_14_5_reg_2757),
    .din15(iqtmp_15_5_reg_2762),
    .din16(trunc_ln9_5_reg_2222_pp0_iter3_reg),
    .dout(tmp_8_fu_2049_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U7(
    .din0(iqtmp_0_6_reg_2767),
    .din1(iqtmp_1_6_reg_2772),
    .din2(iqtmp_2_6_reg_2777),
    .din3(iqtmp_3_6_reg_2782),
    .din4(iqtmp_4_6_reg_2787),
    .din5(iqtmp_5_6_reg_2792),
    .din6(iqtmp_6_6_reg_2797),
    .din7(iqtmp_7_6_reg_2802),
    .din8(iqtmp_8_6_reg_2807),
    .din9(iqtmp_9_6_reg_2812),
    .din10(iqtmp_10_6_reg_2817),
    .din11(iqtmp_11_6_reg_2822),
    .din12(iqtmp_12_6_reg_2827),
    .din13(iqtmp_13_6_reg_2832),
    .din14(iqtmp_14_6_reg_2837),
    .din15(iqtmp_15_6_reg_2842),
    .din16(trunc_ln9_6_reg_2232_pp0_iter3_reg),
    .dout(tmp_9_fu_2070_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U8(
    .din0(iqtmp_0_7_reg_2847),
    .din1(iqtmp_1_7_reg_2852),
    .din2(iqtmp_2_7_reg_2857),
    .din3(iqtmp_3_7_reg_2862),
    .din4(iqtmp_4_7_reg_2867),
    .din5(iqtmp_5_7_reg_2872),
    .din6(iqtmp_6_7_reg_2877),
    .din7(iqtmp_7_7_reg_2882),
    .din8(iqtmp_8_7_reg_2887),
    .din9(iqtmp_9_7_reg_2892),
    .din10(iqtmp_10_7_reg_2897),
    .din11(iqtmp_11_7_reg_2902),
    .din12(iqtmp_12_7_reg_2907),
    .din13(iqtmp_13_7_reg_2912),
    .din14(iqtmp_14_7_reg_2917),
    .din15(iqtmp_15_7_reg_2922),
    .din16(trunc_ln9_7_reg_2242_pp0_iter3_reg),
    .dout(tmp_s_fu_2091_p18)
);

bin_to_res_regslice_both #(
    .DataWidth( 512 ))
regslice_both_iq_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iq_stream_TDATA),
    .vld_in(iq_stream_TVALID),
    .ack_in(regslice_both_iq_stream_V_data_V_U_ack_in),
    .data_out(iq_stream_TDATA_int_regslice),
    .vld_out(iq_stream_TVALID_int_regslice),
    .ack_out(iq_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_iq_stream_V_data_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 64 ))
regslice_both_iq_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iq_stream_TKEEP),
    .vld_in(iq_stream_TVALID),
    .ack_in(regslice_both_iq_stream_V_keep_V_U_ack_in),
    .data_out(iq_stream_TKEEP_int_regslice),
    .vld_out(regslice_both_iq_stream_V_keep_V_U_vld_out),
    .ack_out(iq_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_iq_stream_V_keep_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 64 ))
regslice_both_iq_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iq_stream_TSTRB),
    .vld_in(iq_stream_TVALID),
    .ack_in(regslice_both_iq_stream_V_strb_V_U_ack_in),
    .data_out(iq_stream_TSTRB_int_regslice),
    .vld_out(regslice_both_iq_stream_V_strb_V_U_vld_out),
    .ack_out(iq_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_iq_stream_V_strb_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 1 ))
regslice_both_iq_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iq_stream_TLAST),
    .vld_in(iq_stream_TVALID),
    .ack_in(regslice_both_iq_stream_V_last_V_U_ack_in),
    .data_out(iq_stream_TLAST_int_regslice),
    .vld_out(regslice_both_iq_stream_V_last_V_U_vld_out),
    .ack_out(iq_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_iq_stream_V_last_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 256 ))
regslice_both_res_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(res_stream_TDATA_int_regslice),
    .vld_in(res_stream_TVALID_int_regslice),
    .ack_in(res_stream_TREADY_int_regslice),
    .data_out(res_stream_TDATA),
    .vld_out(regslice_both_res_stream_V_data_V_U_vld_out),
    .ack_out(res_stream_TREADY),
    .apdone_blk(regslice_both_res_stream_V_data_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(32'd0),
    .vld_in(res_stream_TVALID_int_regslice),
    .ack_in(regslice_both_res_stream_V_keep_V_U_ack_in_dummy),
    .data_out(res_stream_TKEEP),
    .vld_out(regslice_both_res_stream_V_keep_V_U_vld_out),
    .ack_out(res_stream_TREADY),
    .apdone_blk(regslice_both_res_stream_V_keep_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(32'd0),
    .vld_in(res_stream_TVALID_int_regslice),
    .ack_in(regslice_both_res_stream_V_strb_V_U_ack_in_dummy),
    .data_out(res_stream_TSTRB),
    .vld_out(regslice_both_res_stream_V_strb_V_U_vld_out),
    .ack_out(res_stream_TREADY),
    .apdone_blk(regslice_both_res_stream_V_strb_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 8 ))
regslice_both_res_stream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_tmp_user_V_reg_2156_pp0_iter3_reg),
    .vld_in(res_stream_TVALID_int_regslice),
    .ack_in(regslice_both_res_stream_V_user_V_U_ack_in_dummy),
    .data_out(res_stream_TUSER),
    .vld_out(regslice_both_res_stream_V_user_V_U_vld_out),
    .ack_out(res_stream_TREADY),
    .apdone_blk(regslice_both_res_stream_V_user_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 1 ))
regslice_both_res_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(res_stream_TLAST_int_regslice),
    .vld_in(res_stream_TVALID_int_regslice),
    .ack_in(regslice_both_res_stream_V_last_V_U_ack_in_dummy),
    .data_out(res_stream_TLAST),
    .vld_out(regslice_both_res_stream_V_last_V_U_vld_out),
    .ack_out(res_stream_TREADY),
    .apdone_blk(regslice_both_res_stream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        cache_group_V <= select_ln63_fu_501_p3;
        replay_group_V <= add_ln870_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_group_V_load_reg_2151 <= cache_group_V;
        lshr_ln1543_1_reg_2177 <= {{rid_to_bin_q0[23:16]}};
        lshr_ln1543_2_reg_2187 <= {{rid_to_bin_q0[35:28]}};
        lshr_ln1543_3_reg_2197 <= {{rid_to_bin_q0[47:40]}};
        lshr_ln1543_4_reg_2207 <= {{rid_to_bin_q0[59:52]}};
        lshr_ln1543_5_reg_2217 <= {{rid_to_bin_q0[71:64]}};
        lshr_ln1543_6_reg_2227 <= {{rid_to_bin_q0[83:76]}};
        lshr_ln1543_7_reg_2237 <= {{rid_to_bin_q0[95:88]}};
        lshr_ln_reg_2167 <= {{rid_to_bin_q0[11:4]}};
        output_tmp_user_V_reg_2156 <= replay_group_V;
        output_tmp_user_V_reg_2156_pp0_iter1_reg <= output_tmp_user_V_reg_2156;
        tmp_11_reg_2139 <= iq_stream_TDATA_int_regslice;
        trunc_ln9_1_reg_2182 <= {{rid_to_bin_q0[15:12]}};
        trunc_ln9_2_reg_2192 <= {{rid_to_bin_q0[27:24]}};
        trunc_ln9_3_reg_2202 <= {{rid_to_bin_q0[39:36]}};
        trunc_ln9_4_reg_2212 <= {{rid_to_bin_q0[51:48]}};
        trunc_ln9_5_reg_2222 <= {{rid_to_bin_q0[63:60]}};
        trunc_ln9_6_reg_2232 <= {{rid_to_bin_q0[75:72]}};
        trunc_ln9_7_reg_2242 <= {{rid_to_bin_q0[87:84]}};
        trunc_ln9_reg_2172 <= trunc_ln9_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        iqtmp_0_1_reg_2367 <= iqtmp_0_1_fu_866_p1;
        iqtmp_0_2_reg_2447 <= iqtmp_0_2_fu_1020_p1;
        iqtmp_0_3_reg_2527 <= iqtmp_0_3_fu_1174_p1;
        iqtmp_0_4_reg_2607 <= iqtmp_0_4_fu_1328_p1;
        iqtmp_0_5_reg_2687 <= iqtmp_0_5_fu_1482_p1;
        iqtmp_0_6_reg_2767 <= iqtmp_0_6_fu_1636_p1;
        iqtmp_0_7_reg_2847 <= iqtmp_0_7_fu_1790_p1;
        iqtmp_0_reg_2287 <= iqtmp_0_fu_712_p1;
        iqtmp_10_1_reg_2417 <= {{cache_V_1_q1[351:320]}};
        iqtmp_10_2_reg_2497 <= {{cache_V_2_q1[351:320]}};
        iqtmp_10_3_reg_2577 <= {{cache_V_3_q1[351:320]}};
        iqtmp_10_4_reg_2657 <= {{cache_V_4_q1[351:320]}};
        iqtmp_10_5_reg_2737 <= {{cache_V_5_q1[351:320]}};
        iqtmp_10_6_reg_2817 <= {{cache_V_6_q1[351:320]}};
        iqtmp_10_7_reg_2897 <= {{cache_V_7_q1[351:320]}};
        iqtmp_10_reg_2337 <= {{cache_V_0_q1[351:320]}};
        iqtmp_11_1_reg_2422 <= {{cache_V_1_q1[383:352]}};
        iqtmp_11_2_reg_2502 <= {{cache_V_2_q1[383:352]}};
        iqtmp_11_3_reg_2582 <= {{cache_V_3_q1[383:352]}};
        iqtmp_11_4_reg_2662 <= {{cache_V_4_q1[383:352]}};
        iqtmp_11_5_reg_2742 <= {{cache_V_5_q1[383:352]}};
        iqtmp_11_6_reg_2822 <= {{cache_V_6_q1[383:352]}};
        iqtmp_11_7_reg_2902 <= {{cache_V_7_q1[383:352]}};
        iqtmp_11_reg_2342 <= {{cache_V_0_q1[383:352]}};
        iqtmp_12_1_reg_2427 <= {{cache_V_1_q1[415:384]}};
        iqtmp_12_2_reg_2507 <= {{cache_V_2_q1[415:384]}};
        iqtmp_12_3_reg_2587 <= {{cache_V_3_q1[415:384]}};
        iqtmp_12_4_reg_2667 <= {{cache_V_4_q1[415:384]}};
        iqtmp_12_5_reg_2747 <= {{cache_V_5_q1[415:384]}};
        iqtmp_12_6_reg_2827 <= {{cache_V_6_q1[415:384]}};
        iqtmp_12_7_reg_2907 <= {{cache_V_7_q1[415:384]}};
        iqtmp_12_reg_2347 <= {{cache_V_0_q1[415:384]}};
        iqtmp_13_1_reg_2432 <= {{cache_V_1_q1[447:416]}};
        iqtmp_13_2_reg_2512 <= {{cache_V_2_q1[447:416]}};
        iqtmp_13_3_reg_2592 <= {{cache_V_3_q1[447:416]}};
        iqtmp_13_4_reg_2672 <= {{cache_V_4_q1[447:416]}};
        iqtmp_13_5_reg_2752 <= {{cache_V_5_q1[447:416]}};
        iqtmp_13_6_reg_2832 <= {{cache_V_6_q1[447:416]}};
        iqtmp_13_7_reg_2912 <= {{cache_V_7_q1[447:416]}};
        iqtmp_13_reg_2352 <= {{cache_V_0_q1[447:416]}};
        iqtmp_14_1_reg_2437 <= {{cache_V_1_q1[479:448]}};
        iqtmp_14_2_reg_2517 <= {{cache_V_2_q1[479:448]}};
        iqtmp_14_3_reg_2597 <= {{cache_V_3_q1[479:448]}};
        iqtmp_14_4_reg_2677 <= {{cache_V_4_q1[479:448]}};
        iqtmp_14_5_reg_2757 <= {{cache_V_5_q1[479:448]}};
        iqtmp_14_6_reg_2837 <= {{cache_V_6_q1[479:448]}};
        iqtmp_14_7_reg_2917 <= {{cache_V_7_q1[479:448]}};
        iqtmp_14_reg_2357 <= {{cache_V_0_q1[479:448]}};
        iqtmp_15_1_reg_2442 <= {{cache_V_1_q1[511:480]}};
        iqtmp_15_2_reg_2522 <= {{cache_V_2_q1[511:480]}};
        iqtmp_15_3_reg_2602 <= {{cache_V_3_q1[511:480]}};
        iqtmp_15_4_reg_2682 <= {{cache_V_4_q1[511:480]}};
        iqtmp_15_5_reg_2762 <= {{cache_V_5_q1[511:480]}};
        iqtmp_15_6_reg_2842 <= {{cache_V_6_q1[511:480]}};
        iqtmp_15_7_reg_2922 <= {{cache_V_7_q1[511:480]}};
        iqtmp_15_reg_2362 <= {{cache_V_0_q1[511:480]}};
        iqtmp_1_1_reg_2372 <= {{cache_V_1_q1[63:32]}};
        iqtmp_1_2_reg_2452 <= {{cache_V_2_q1[63:32]}};
        iqtmp_1_3_reg_2532 <= {{cache_V_3_q1[63:32]}};
        iqtmp_1_4_reg_2612 <= {{cache_V_4_q1[63:32]}};
        iqtmp_1_5_reg_2692 <= {{cache_V_5_q1[63:32]}};
        iqtmp_1_6_reg_2772 <= {{cache_V_6_q1[63:32]}};
        iqtmp_1_7_reg_2852 <= {{cache_V_7_q1[63:32]}};
        iqtmp_1_reg_2292 <= {{cache_V_0_q1[63:32]}};
        iqtmp_2_1_reg_2377 <= {{cache_V_1_q1[95:64]}};
        iqtmp_2_2_reg_2457 <= {{cache_V_2_q1[95:64]}};
        iqtmp_2_3_reg_2537 <= {{cache_V_3_q1[95:64]}};
        iqtmp_2_4_reg_2617 <= {{cache_V_4_q1[95:64]}};
        iqtmp_2_5_reg_2697 <= {{cache_V_5_q1[95:64]}};
        iqtmp_2_6_reg_2777 <= {{cache_V_6_q1[95:64]}};
        iqtmp_2_7_reg_2857 <= {{cache_V_7_q1[95:64]}};
        iqtmp_2_reg_2297 <= {{cache_V_0_q1[95:64]}};
        iqtmp_3_1_reg_2382 <= {{cache_V_1_q1[127:96]}};
        iqtmp_3_2_reg_2462 <= {{cache_V_2_q1[127:96]}};
        iqtmp_3_3_reg_2542 <= {{cache_V_3_q1[127:96]}};
        iqtmp_3_4_reg_2622 <= {{cache_V_4_q1[127:96]}};
        iqtmp_3_5_reg_2702 <= {{cache_V_5_q1[127:96]}};
        iqtmp_3_6_reg_2782 <= {{cache_V_6_q1[127:96]}};
        iqtmp_3_7_reg_2862 <= {{cache_V_7_q1[127:96]}};
        iqtmp_3_reg_2302 <= {{cache_V_0_q1[127:96]}};
        iqtmp_4_1_reg_2387 <= {{cache_V_1_q1[159:128]}};
        iqtmp_4_2_reg_2467 <= {{cache_V_2_q1[159:128]}};
        iqtmp_4_3_reg_2547 <= {{cache_V_3_q1[159:128]}};
        iqtmp_4_4_reg_2627 <= {{cache_V_4_q1[159:128]}};
        iqtmp_4_5_reg_2707 <= {{cache_V_5_q1[159:128]}};
        iqtmp_4_6_reg_2787 <= {{cache_V_6_q1[159:128]}};
        iqtmp_4_7_reg_2867 <= {{cache_V_7_q1[159:128]}};
        iqtmp_4_reg_2307 <= {{cache_V_0_q1[159:128]}};
        iqtmp_5_1_reg_2392 <= {{cache_V_1_q1[191:160]}};
        iqtmp_5_2_reg_2472 <= {{cache_V_2_q1[191:160]}};
        iqtmp_5_3_reg_2552 <= {{cache_V_3_q1[191:160]}};
        iqtmp_5_4_reg_2632 <= {{cache_V_4_q1[191:160]}};
        iqtmp_5_5_reg_2712 <= {{cache_V_5_q1[191:160]}};
        iqtmp_5_6_reg_2792 <= {{cache_V_6_q1[191:160]}};
        iqtmp_5_7_reg_2872 <= {{cache_V_7_q1[191:160]}};
        iqtmp_5_reg_2312 <= {{cache_V_0_q1[191:160]}};
        iqtmp_6_1_reg_2397 <= {{cache_V_1_q1[223:192]}};
        iqtmp_6_2_reg_2477 <= {{cache_V_2_q1[223:192]}};
        iqtmp_6_3_reg_2557 <= {{cache_V_3_q1[223:192]}};
        iqtmp_6_4_reg_2637 <= {{cache_V_4_q1[223:192]}};
        iqtmp_6_5_reg_2717 <= {{cache_V_5_q1[223:192]}};
        iqtmp_6_6_reg_2797 <= {{cache_V_6_q1[223:192]}};
        iqtmp_6_7_reg_2877 <= {{cache_V_7_q1[223:192]}};
        iqtmp_6_reg_2317 <= {{cache_V_0_q1[223:192]}};
        iqtmp_7_1_reg_2402 <= {{cache_V_1_q1[255:224]}};
        iqtmp_7_2_reg_2482 <= {{cache_V_2_q1[255:224]}};
        iqtmp_7_3_reg_2562 <= {{cache_V_3_q1[255:224]}};
        iqtmp_7_4_reg_2642 <= {{cache_V_4_q1[255:224]}};
        iqtmp_7_5_reg_2722 <= {{cache_V_5_q1[255:224]}};
        iqtmp_7_6_reg_2802 <= {{cache_V_6_q1[255:224]}};
        iqtmp_7_7_reg_2882 <= {{cache_V_7_q1[255:224]}};
        iqtmp_7_reg_2322 <= {{cache_V_0_q1[255:224]}};
        iqtmp_8_1_reg_2407 <= {{cache_V_1_q1[287:256]}};
        iqtmp_8_2_reg_2487 <= {{cache_V_2_q1[287:256]}};
        iqtmp_8_3_reg_2567 <= {{cache_V_3_q1[287:256]}};
        iqtmp_8_4_reg_2647 <= {{cache_V_4_q1[287:256]}};
        iqtmp_8_5_reg_2727 <= {{cache_V_5_q1[287:256]}};
        iqtmp_8_6_reg_2807 <= {{cache_V_6_q1[287:256]}};
        iqtmp_8_7_reg_2887 <= {{cache_V_7_q1[287:256]}};
        iqtmp_8_reg_2327 <= {{cache_V_0_q1[287:256]}};
        iqtmp_9_1_reg_2412 <= {{cache_V_1_q1[319:288]}};
        iqtmp_9_2_reg_2492 <= {{cache_V_2_q1[319:288]}};
        iqtmp_9_3_reg_2572 <= {{cache_V_3_q1[319:288]}};
        iqtmp_9_4_reg_2652 <= {{cache_V_4_q1[319:288]}};
        iqtmp_9_5_reg_2732 <= {{cache_V_5_q1[319:288]}};
        iqtmp_9_6_reg_2812 <= {{cache_V_6_q1[319:288]}};
        iqtmp_9_7_reg_2892 <= {{cache_V_7_q1[319:288]}};
        iqtmp_9_reg_2332 <= {{cache_V_0_q1[319:288]}};
        output_tmp_user_V_reg_2156_pp0_iter2_reg <= output_tmp_user_V_reg_2156_pp0_iter1_reg;
        output_tmp_user_V_reg_2156_pp0_iter3_reg <= output_tmp_user_V_reg_2156_pp0_iter2_reg;
        trunc_ln9_1_reg_2182_pp0_iter2_reg <= trunc_ln9_1_reg_2182;
        trunc_ln9_1_reg_2182_pp0_iter3_reg <= trunc_ln9_1_reg_2182_pp0_iter2_reg;
        trunc_ln9_2_reg_2192_pp0_iter2_reg <= trunc_ln9_2_reg_2192;
        trunc_ln9_2_reg_2192_pp0_iter3_reg <= trunc_ln9_2_reg_2192_pp0_iter2_reg;
        trunc_ln9_3_reg_2202_pp0_iter2_reg <= trunc_ln9_3_reg_2202;
        trunc_ln9_3_reg_2202_pp0_iter3_reg <= trunc_ln9_3_reg_2202_pp0_iter2_reg;
        trunc_ln9_4_reg_2212_pp0_iter2_reg <= trunc_ln9_4_reg_2212;
        trunc_ln9_4_reg_2212_pp0_iter3_reg <= trunc_ln9_4_reg_2212_pp0_iter2_reg;
        trunc_ln9_5_reg_2222_pp0_iter2_reg <= trunc_ln9_5_reg_2222;
        trunc_ln9_5_reg_2222_pp0_iter3_reg <= trunc_ln9_5_reg_2222_pp0_iter2_reg;
        trunc_ln9_6_reg_2232_pp0_iter2_reg <= trunc_ln9_6_reg_2232;
        trunc_ln9_6_reg_2232_pp0_iter3_reg <= trunc_ln9_6_reg_2232_pp0_iter2_reg;
        trunc_ln9_7_reg_2242_pp0_iter2_reg <= trunc_ln9_7_reg_2242;
        trunc_ln9_7_reg_2242_pp0_iter3_reg <= trunc_ln9_7_reg_2242_pp0_iter2_reg;
        trunc_ln9_reg_2172_pp0_iter2_reg <= trunc_ln9_reg_2172;
        trunc_ln9_reg_2172_pp0_iter3_reg <= trunc_ln9_reg_2172_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_0_ce0 = 1'b1;
    end else begin
        cache_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_0_ce1 = 1'b1;
    end else begin
        cache_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_0_we0 = 1'b1;
    end else begin
        cache_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_1_ce0 = 1'b1;
    end else begin
        cache_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_1_ce1 = 1'b1;
    end else begin
        cache_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_1_we0 = 1'b1;
    end else begin
        cache_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_2_ce0 = 1'b1;
    end else begin
        cache_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_2_ce1 = 1'b1;
    end else begin
        cache_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_2_we0 = 1'b1;
    end else begin
        cache_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_3_ce0 = 1'b1;
    end else begin
        cache_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_3_ce1 = 1'b1;
    end else begin
        cache_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_3_we0 = 1'b1;
    end else begin
        cache_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_4_ce0 = 1'b1;
    end else begin
        cache_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_4_ce1 = 1'b1;
    end else begin
        cache_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_4_we0 = 1'b1;
    end else begin
        cache_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_5_ce0 = 1'b1;
    end else begin
        cache_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_5_ce1 = 1'b1;
    end else begin
        cache_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_5_we0 = 1'b1;
    end else begin
        cache_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_6_ce0 = 1'b1;
    end else begin
        cache_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_6_ce1 = 1'b1;
    end else begin
        cache_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_6_we0 = 1'b1;
    end else begin
        cache_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_7_ce0 = 1'b1;
    end else begin
        cache_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_7_ce1 = 1'b1;
    end else begin
        cache_V_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_7_we0 = 1'b1;
    end else begin
        cache_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1))) begin
        iq_stream_TDATA_blk_n = iq_stream_TVALID_int_regslice;
    end else begin
        iq_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        iq_stream_TREADY_int_regslice = 1'b1;
    end else begin
        iq_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        res_stream_TDATA_blk_n = res_stream_TREADY_int_regslice;
    end else begin
        res_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_stream_TVALID_int_regslice = 1'b1;
    end else begin
        res_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        rid_to_bin_ce0 = 1'b1;
    end else begin
        rid_to_bin_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln223_fu_495_p2 = (cache_group_V + 8'd1);

assign add_ln870_fu_483_p2 = (replay_group_V + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((res_stream_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((iq_stream_TVALID_int_regslice == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((regslice_both_res_stream_V_data_V_U_apdone_blk == 1'b1) | (res_stream_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((res_stream_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((iq_stream_TVALID_int_regslice == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((regslice_both_res_stream_V_data_V_U_apdone_blk == 1'b1) | (res_stream_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((res_stream_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((iq_stream_TVALID_int_regslice == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((regslice_both_res_stream_V_data_V_U_apdone_blk == 1'b1) | (res_stream_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (iq_stream_TVALID_int_regslice == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (res_stream_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((regslice_both_res_stream_V_data_V_U_apdone_blk == 1'b1) | (res_stream_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cache_V_0_address0 = conv_i65_fu_515_p1;

assign cache_V_0_address1 = zext_ln52_fu_680_p1;

assign cache_V_1_address0 = conv_i65_fu_515_p1;

assign cache_V_1_address1 = zext_ln52_1_fu_684_p1;

assign cache_V_2_address0 = conv_i65_fu_515_p1;

assign cache_V_2_address1 = zext_ln52_2_fu_688_p1;

assign cache_V_3_address0 = conv_i65_fu_515_p1;

assign cache_V_3_address1 = zext_ln52_3_fu_692_p1;

assign cache_V_4_address0 = conv_i65_fu_515_p1;

assign cache_V_4_address1 = zext_ln52_4_fu_696_p1;

assign cache_V_5_address0 = conv_i65_fu_515_p1;

assign cache_V_5_address1 = zext_ln52_5_fu_700_p1;

assign cache_V_6_address0 = conv_i65_fu_515_p1;

assign cache_V_6_address1 = zext_ln52_6_fu_704_p1;

assign cache_V_7_address0 = conv_i65_fu_515_p1;

assign cache_V_7_address1 = zext_ln52_7_fu_708_p1;

assign conv_i65_fu_515_p1 = cache_group_V_load_reg_2151;

assign iq_stream_TREADY = regslice_both_iq_stream_V_data_V_U_ack_in;

assign iqtmp_0_1_fu_866_p1 = cache_V_1_q1[31:0];

assign iqtmp_0_2_fu_1020_p1 = cache_V_2_q1[31:0];

assign iqtmp_0_3_fu_1174_p1 = cache_V_3_q1[31:0];

assign iqtmp_0_4_fu_1328_p1 = cache_V_4_q1[31:0];

assign iqtmp_0_5_fu_1482_p1 = cache_V_5_q1[31:0];

assign iqtmp_0_6_fu_1636_p1 = cache_V_6_q1[31:0];

assign iqtmp_0_7_fu_1790_p1 = cache_V_7_q1[31:0];

assign iqtmp_0_fu_712_p1 = cache_V_0_q1[31:0];

assign res_stream_TDATA_int_regslice = {{{{{{{{tmp_s_fu_2091_p18}, {tmp_9_fu_2070_p18}}, {tmp_8_fu_2049_p18}}, {tmp_7_fu_2028_p18}}, {tmp_6_fu_2007_p18}}, {tmp_5_fu_1986_p18}}, {tmp_4_fu_1965_p18}}, {tmp_fu_1944_p18}};

assign res_stream_TLAST_int_regslice = ((output_tmp_user_V_reg_2156_pp0_iter3_reg == 8'd255) ? 1'b1 : 1'b0);

assign res_stream_TVALID = regslice_both_res_stream_V_data_V_U_vld_out;

assign rid_to_bin_address0 = zext_ln573_fu_478_p1;

assign select_ln63_fu_501_p3 = ((iq_stream_TLAST_int_regslice[0:0] == 1'b1) ? 8'd0 : add_ln223_fu_495_p2);

assign trunc_ln9_fu_536_p1 = rid_to_bin_q0[3:0];

assign zext_ln52_1_fu_684_p1 = lshr_ln1543_1_reg_2177;

assign zext_ln52_2_fu_688_p1 = lshr_ln1543_2_reg_2187;

assign zext_ln52_3_fu_692_p1 = lshr_ln1543_3_reg_2197;

assign zext_ln52_4_fu_696_p1 = lshr_ln1543_4_reg_2207;

assign zext_ln52_5_fu_700_p1 = lshr_ln1543_5_reg_2217;

assign zext_ln52_6_fu_704_p1 = lshr_ln1543_6_reg_2227;

assign zext_ln52_7_fu_708_p1 = lshr_ln1543_7_reg_2237;

assign zext_ln52_fu_680_p1 = lshr_ln_reg_2167;

assign zext_ln573_fu_478_p1 = replay_group_V;


// synthesis translate_off
`include "bin_to_res_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //bin_to_res

