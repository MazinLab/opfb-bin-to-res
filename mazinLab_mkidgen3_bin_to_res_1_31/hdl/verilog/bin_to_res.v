// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bin_to_res_bin_to_res,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.237000,HLS_SYN_LAT=5,HLS_SYN_TPT=1,HLS_SYN_MEM=128,HLS_SYN_DSP=0,HLS_SYN_FF=5428,HLS_SYN_LUT=991,HLS_VERSION=2021_1}" *)

module bin_to_res (
// synthesis translate_off
    kernel_block,
// synthesis translate_on
        ap_clk,
        ap_rst_n,
        iq_stream_TDATA,
        iq_stream_TVALID,
        iq_stream_TREADY,
        iq_stream_TKEEP,
        iq_stream_TSTRB,
        iq_stream_TLAST,
        res_stream_TDATA,
        res_stream_TVALID,
        res_stream_TREADY,
        res_stream_TKEEP,
        res_stream_TSTRB,
        res_stream_TUSER,
        res_stream_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        axi_clk,
        ap_rst_n_axi_clk
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 13;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

// synthesis translate_off
output kernel_block;
// synthesis translate_on
input   ap_clk;
input   ap_rst_n;
input  [511:0] iq_stream_TDATA;
input   iq_stream_TVALID;
output   iq_stream_TREADY;
input  [63:0] iq_stream_TKEEP;
input  [63:0] iq_stream_TSTRB;
input  [0:0] iq_stream_TLAST;
output  [255:0] res_stream_TDATA;
output   res_stream_TVALID;
input   res_stream_TREADY;
output  [31:0] res_stream_TKEEP;
output  [31:0] res_stream_TSTRB;
output  [7:0] res_stream_TUSER;
output  [0:0] res_stream_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   axi_clk;
input   ap_rst_n_axi_clk;

 reg    ap_rst_n_inv;
wire   [7:0] rid_to_bin_address0;
reg    rid_to_bin_ce0;
wire   [127:0] rid_to_bin_q0;
reg   [7:0] cache_group_V;
wire   [7:0] cache_V_0_address0;
reg    cache_V_0_ce0;
reg    cache_V_0_we0;
wire   [7:0] cache_V_0_address1;
reg    cache_V_0_ce1;
wire   [511:0] cache_V_0_q1;
wire   [7:0] cache_V_1_address0;
reg    cache_V_1_ce0;
reg    cache_V_1_we0;
wire   [7:0] cache_V_1_address1;
reg    cache_V_1_ce1;
wire   [511:0] cache_V_1_q1;
wire   [7:0] cache_V_2_address0;
reg    cache_V_2_ce0;
reg    cache_V_2_we0;
wire   [7:0] cache_V_2_address1;
reg    cache_V_2_ce1;
wire   [511:0] cache_V_2_q1;
wire   [7:0] cache_V_3_address0;
reg    cache_V_3_ce0;
reg    cache_V_3_we0;
wire   [7:0] cache_V_3_address1;
reg    cache_V_3_ce1;
wire   [511:0] cache_V_3_q1;
wire   [7:0] cache_V_4_address0;
reg    cache_V_4_ce0;
reg    cache_V_4_we0;
wire   [7:0] cache_V_4_address1;
reg    cache_V_4_ce1;
wire   [511:0] cache_V_4_q1;
wire   [7:0] cache_V_5_address0;
reg    cache_V_5_ce0;
reg    cache_V_5_we0;
wire   [7:0] cache_V_5_address1;
reg    cache_V_5_ce1;
wire   [511:0] cache_V_5_q1;
wire   [7:0] cache_V_6_address0;
reg    cache_V_6_ce0;
reg    cache_V_6_we0;
wire   [7:0] cache_V_6_address1;
reg    cache_V_6_ce1;
wire   [511:0] cache_V_6_q1;
wire   [7:0] cache_V_7_address0;
reg    cache_V_7_ce0;
reg    cache_V_7_we0;
wire   [7:0] cache_V_7_address1;
reg    cache_V_7_ce1;
wire   [511:0] cache_V_7_q1;
reg   [7:0] replay_group_V;
reg    iq_stream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    res_stream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [511:0] tmp_11_reg_2141;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state5_pp0_stage0_iter4;
wire    regslice_both_res_stream_V_data_V_U_apdone_blk;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] cache_group_V_load_reg_2153;
reg   [7:0] output_tmp_user_V_reg_2158;
reg   [7:0] output_tmp_user_V_reg_2158_pp0_iter1_reg;
reg   [7:0] output_tmp_user_V_reg_2158_pp0_iter2_reg;
reg   [7:0] output_tmp_user_V_reg_2158_pp0_iter3_reg;
reg   [7:0] lshr_ln_reg_2169;
wire   [3:0] trunc_ln9_fu_538_p1;
reg   [3:0] trunc_ln9_reg_2174;
reg   [3:0] trunc_ln9_reg_2174_pp0_iter2_reg;
reg   [3:0] trunc_ln9_reg_2174_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_1_reg_2179;
reg   [3:0] trunc_ln9_1_reg_2184;
reg   [3:0] trunc_ln9_1_reg_2184_pp0_iter2_reg;
reg   [3:0] trunc_ln9_1_reg_2184_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_2_reg_2189;
reg   [3:0] trunc_ln9_2_reg_2194;
reg   [3:0] trunc_ln9_2_reg_2194_pp0_iter2_reg;
reg   [3:0] trunc_ln9_2_reg_2194_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_3_reg_2199;
reg   [3:0] trunc_ln9_3_reg_2204;
reg   [3:0] trunc_ln9_3_reg_2204_pp0_iter2_reg;
reg   [3:0] trunc_ln9_3_reg_2204_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_4_reg_2209;
reg   [3:0] trunc_ln9_4_reg_2214;
reg   [3:0] trunc_ln9_4_reg_2214_pp0_iter2_reg;
reg   [3:0] trunc_ln9_4_reg_2214_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_5_reg_2219;
reg   [3:0] trunc_ln9_5_reg_2224;
reg   [3:0] trunc_ln9_5_reg_2224_pp0_iter2_reg;
reg   [3:0] trunc_ln9_5_reg_2224_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_6_reg_2229;
reg   [3:0] trunc_ln9_6_reg_2234;
reg   [3:0] trunc_ln9_6_reg_2234_pp0_iter2_reg;
reg   [3:0] trunc_ln9_6_reg_2234_pp0_iter3_reg;
reg   [7:0] lshr_ln1543_7_reg_2239;
reg   [3:0] trunc_ln9_7_reg_2244;
reg   [3:0] trunc_ln9_7_reg_2244_pp0_iter2_reg;
reg   [3:0] trunc_ln9_7_reg_2244_pp0_iter3_reg;
wire   [31:0] iqtmp_0_fu_714_p1;
reg   [31:0] iqtmp_0_reg_2289;
reg   [31:0] iqtmp_1_reg_2294;
reg   [31:0] iqtmp_2_reg_2299;
reg   [31:0] iqtmp_3_reg_2304;
reg   [31:0] iqtmp_4_reg_2309;
reg   [31:0] iqtmp_5_reg_2314;
reg   [31:0] iqtmp_6_reg_2319;
reg   [31:0] iqtmp_7_reg_2324;
reg   [31:0] iqtmp_8_reg_2329;
reg   [31:0] iqtmp_9_reg_2334;
reg   [31:0] iqtmp_10_reg_2339;
reg   [31:0] iqtmp_11_reg_2344;
reg   [31:0] iqtmp_12_reg_2349;
reg   [31:0] iqtmp_13_reg_2354;
reg   [31:0] iqtmp_14_reg_2359;
reg   [31:0] iqtmp_15_reg_2364;
wire   [31:0] iqtmp_0_1_fu_868_p1;
reg   [31:0] iqtmp_0_1_reg_2369;
reg   [31:0] iqtmp_1_1_reg_2374;
reg   [31:0] iqtmp_2_1_reg_2379;
reg   [31:0] iqtmp_3_1_reg_2384;
reg   [31:0] iqtmp_4_1_reg_2389;
reg   [31:0] iqtmp_5_1_reg_2394;
reg   [31:0] iqtmp_6_1_reg_2399;
reg   [31:0] iqtmp_7_1_reg_2404;
reg   [31:0] iqtmp_8_1_reg_2409;
reg   [31:0] iqtmp_9_1_reg_2414;
reg   [31:0] iqtmp_10_1_reg_2419;
reg   [31:0] iqtmp_11_1_reg_2424;
reg   [31:0] iqtmp_12_1_reg_2429;
reg   [31:0] iqtmp_13_1_reg_2434;
reg   [31:0] iqtmp_14_1_reg_2439;
reg   [31:0] iqtmp_15_1_reg_2444;
wire   [31:0] iqtmp_0_2_fu_1022_p1;
reg   [31:0] iqtmp_0_2_reg_2449;
reg   [31:0] iqtmp_1_2_reg_2454;
reg   [31:0] iqtmp_2_2_reg_2459;
reg   [31:0] iqtmp_3_2_reg_2464;
reg   [31:0] iqtmp_4_2_reg_2469;
reg   [31:0] iqtmp_5_2_reg_2474;
reg   [31:0] iqtmp_6_2_reg_2479;
reg   [31:0] iqtmp_7_2_reg_2484;
reg   [31:0] iqtmp_8_2_reg_2489;
reg   [31:0] iqtmp_9_2_reg_2494;
reg   [31:0] iqtmp_10_2_reg_2499;
reg   [31:0] iqtmp_11_2_reg_2504;
reg   [31:0] iqtmp_12_2_reg_2509;
reg   [31:0] iqtmp_13_2_reg_2514;
reg   [31:0] iqtmp_14_2_reg_2519;
reg   [31:0] iqtmp_15_2_reg_2524;
wire   [31:0] iqtmp_0_3_fu_1176_p1;
reg   [31:0] iqtmp_0_3_reg_2529;
reg   [31:0] iqtmp_1_3_reg_2534;
reg   [31:0] iqtmp_2_3_reg_2539;
reg   [31:0] iqtmp_3_3_reg_2544;
reg   [31:0] iqtmp_4_3_reg_2549;
reg   [31:0] iqtmp_5_3_reg_2554;
reg   [31:0] iqtmp_6_3_reg_2559;
reg   [31:0] iqtmp_7_3_reg_2564;
reg   [31:0] iqtmp_8_3_reg_2569;
reg   [31:0] iqtmp_9_3_reg_2574;
reg   [31:0] iqtmp_10_3_reg_2579;
reg   [31:0] iqtmp_11_3_reg_2584;
reg   [31:0] iqtmp_12_3_reg_2589;
reg   [31:0] iqtmp_13_3_reg_2594;
reg   [31:0] iqtmp_14_3_reg_2599;
reg   [31:0] iqtmp_15_3_reg_2604;
wire   [31:0] iqtmp_0_4_fu_1330_p1;
reg   [31:0] iqtmp_0_4_reg_2609;
reg   [31:0] iqtmp_1_4_reg_2614;
reg   [31:0] iqtmp_2_4_reg_2619;
reg   [31:0] iqtmp_3_4_reg_2624;
reg   [31:0] iqtmp_4_4_reg_2629;
reg   [31:0] iqtmp_5_4_reg_2634;
reg   [31:0] iqtmp_6_4_reg_2639;
reg   [31:0] iqtmp_7_4_reg_2644;
reg   [31:0] iqtmp_8_4_reg_2649;
reg   [31:0] iqtmp_9_4_reg_2654;
reg   [31:0] iqtmp_10_4_reg_2659;
reg   [31:0] iqtmp_11_4_reg_2664;
reg   [31:0] iqtmp_12_4_reg_2669;
reg   [31:0] iqtmp_13_4_reg_2674;
reg   [31:0] iqtmp_14_4_reg_2679;
reg   [31:0] iqtmp_15_4_reg_2684;
wire   [31:0] iqtmp_0_5_fu_1484_p1;
reg   [31:0] iqtmp_0_5_reg_2689;
reg   [31:0] iqtmp_1_5_reg_2694;
reg   [31:0] iqtmp_2_5_reg_2699;
reg   [31:0] iqtmp_3_5_reg_2704;
reg   [31:0] iqtmp_4_5_reg_2709;
reg   [31:0] iqtmp_5_5_reg_2714;
reg   [31:0] iqtmp_6_5_reg_2719;
reg   [31:0] iqtmp_7_5_reg_2724;
reg   [31:0] iqtmp_8_5_reg_2729;
reg   [31:0] iqtmp_9_5_reg_2734;
reg   [31:0] iqtmp_10_5_reg_2739;
reg   [31:0] iqtmp_11_5_reg_2744;
reg   [31:0] iqtmp_12_5_reg_2749;
reg   [31:0] iqtmp_13_5_reg_2754;
reg   [31:0] iqtmp_14_5_reg_2759;
reg   [31:0] iqtmp_15_5_reg_2764;
wire   [31:0] iqtmp_0_6_fu_1638_p1;
reg   [31:0] iqtmp_0_6_reg_2769;
reg   [31:0] iqtmp_1_6_reg_2774;
reg   [31:0] iqtmp_2_6_reg_2779;
reg   [31:0] iqtmp_3_6_reg_2784;
reg   [31:0] iqtmp_4_6_reg_2789;
reg   [31:0] iqtmp_5_6_reg_2794;
reg   [31:0] iqtmp_6_6_reg_2799;
reg   [31:0] iqtmp_7_6_reg_2804;
reg   [31:0] iqtmp_8_6_reg_2809;
reg   [31:0] iqtmp_9_6_reg_2814;
reg   [31:0] iqtmp_10_6_reg_2819;
reg   [31:0] iqtmp_11_6_reg_2824;
reg   [31:0] iqtmp_12_6_reg_2829;
reg   [31:0] iqtmp_13_6_reg_2834;
reg   [31:0] iqtmp_14_6_reg_2839;
reg   [31:0] iqtmp_15_6_reg_2844;
wire   [31:0] iqtmp_0_7_fu_1792_p1;
reg   [31:0] iqtmp_0_7_reg_2849;
reg   [31:0] iqtmp_1_7_reg_2854;
reg   [31:0] iqtmp_2_7_reg_2859;
reg   [31:0] iqtmp_3_7_reg_2864;
reg   [31:0] iqtmp_4_7_reg_2869;
reg   [31:0] iqtmp_5_7_reg_2874;
reg   [31:0] iqtmp_6_7_reg_2879;
reg   [31:0] iqtmp_7_7_reg_2884;
reg   [31:0] iqtmp_8_7_reg_2889;
reg   [31:0] iqtmp_9_7_reg_2894;
reg   [31:0] iqtmp_10_7_reg_2899;
reg   [31:0] iqtmp_11_7_reg_2904;
reg   [31:0] iqtmp_12_7_reg_2909;
reg   [31:0] iqtmp_13_7_reg_2914;
reg   [31:0] iqtmp_14_7_reg_2919;
reg   [31:0] iqtmp_15_7_reg_2924;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_rst_n_axi_clk_inv;
wire   [63:0] zext_ln573_fu_480_p1;
wire   [63:0] conv_i65_fu_517_p1;
wire   [63:0] zext_ln52_fu_682_p1;
wire   [63:0] zext_ln52_1_fu_686_p1;
wire   [63:0] zext_ln52_2_fu_690_p1;
wire   [63:0] zext_ln52_3_fu_694_p1;
wire   [63:0] zext_ln52_4_fu_698_p1;
wire   [63:0] zext_ln52_5_fu_702_p1;
wire   [63:0] zext_ln52_6_fu_706_p1;
wire   [63:0] zext_ln52_7_fu_710_p1;
wire   [7:0] select_ln63_fu_503_p3;
wire   [7:0] add_ln870_fu_485_p2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] add_ln223_fu_497_p2;
wire   [31:0] tmp_s_fu_2093_p18;
wire   [31:0] tmp_9_fu_2072_p18;
wire   [31:0] tmp_8_fu_2051_p18;
wire   [31:0] tmp_7_fu_2030_p18;
wire   [31:0] tmp_6_fu_2009_p18;
wire   [31:0] tmp_5_fu_1988_p18;
wire   [31:0] tmp_4_fu_1967_p18;
wire   [31:0] tmp_fu_1946_p18;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_iq_stream_V_data_V_U_apdone_blk;
wire   [511:0] iq_stream_TDATA_int_regslice;
wire    iq_stream_TVALID_int_regslice;
reg    iq_stream_TREADY_int_regslice;
wire    regslice_both_iq_stream_V_data_V_U_ack_in;
wire    regslice_both_iq_stream_V_keep_V_U_apdone_blk;
wire   [63:0] iq_stream_TKEEP_int_regslice;
wire    regslice_both_iq_stream_V_keep_V_U_vld_out;
wire    regslice_both_iq_stream_V_keep_V_U_ack_in;
wire    regslice_both_iq_stream_V_strb_V_U_apdone_blk;
wire   [63:0] iq_stream_TSTRB_int_regslice;
wire    regslice_both_iq_stream_V_strb_V_U_vld_out;
wire    regslice_both_iq_stream_V_strb_V_U_ack_in;
wire    regslice_both_iq_stream_V_last_V_U_apdone_blk;
wire   [0:0] iq_stream_TLAST_int_regslice;
wire    regslice_both_iq_stream_V_last_V_U_vld_out;
wire    regslice_both_iq_stream_V_last_V_U_ack_in;
wire   [255:0] res_stream_TDATA_int_regslice;
reg    res_stream_TVALID_int_regslice;
wire    res_stream_TREADY_int_regslice;
wire    regslice_both_res_stream_V_data_V_U_vld_out;
wire    regslice_both_res_stream_V_keep_V_U_apdone_blk;
wire    regslice_both_res_stream_V_keep_V_U_ack_in_dummy;
wire    regslice_both_res_stream_V_keep_V_U_vld_out;
wire    regslice_both_res_stream_V_strb_V_U_apdone_blk;
wire    regslice_both_res_stream_V_strb_V_U_ack_in_dummy;
wire    regslice_both_res_stream_V_strb_V_U_vld_out;
wire    regslice_both_res_stream_V_user_V_U_apdone_blk;
wire    regslice_both_res_stream_V_user_V_U_ack_in_dummy;
wire    regslice_both_res_stream_V_user_V_U_vld_out;
wire    regslice_both_res_stream_V_last_V_U_apdone_blk;
wire   [0:0] res_stream_TLAST_int_regslice;
wire    regslice_both_res_stream_V_last_V_U_ack_in_dummy;
wire    regslice_both_res_stream_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 cache_group_V = 8'd0;
#0 replay_group_V = 8'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_0_address0),
    .ce0(cache_V_0_ce0),
    .we0(cache_V_0_we0),
    .d0(tmp_11_reg_2141),
    .address1(cache_V_0_address1),
    .ce1(cache_V_0_ce1),
    .q1(cache_V_0_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_1_address0),
    .ce0(cache_V_1_ce0),
    .we0(cache_V_1_we0),
    .d0(tmp_11_reg_2141),
    .address1(cache_V_1_address1),
    .ce1(cache_V_1_ce1),
    .q1(cache_V_1_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_2_address0),
    .ce0(cache_V_2_ce0),
    .we0(cache_V_2_we0),
    .d0(tmp_11_reg_2141),
    .address1(cache_V_2_address1),
    .ce1(cache_V_2_ce1),
    .q1(cache_V_2_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_3_address0),
    .ce0(cache_V_3_ce0),
    .we0(cache_V_3_we0),
    .d0(tmp_11_reg_2141),
    .address1(cache_V_3_address1),
    .ce1(cache_V_3_ce1),
    .q1(cache_V_3_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_4_address0),
    .ce0(cache_V_4_ce0),
    .we0(cache_V_4_we0),
    .d0(tmp_11_reg_2141),
    .address1(cache_V_4_address1),
    .ce1(cache_V_4_ce1),
    .q1(cache_V_4_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_5_address0),
    .ce0(cache_V_5_ce0),
    .we0(cache_V_5_we0),
    .d0(tmp_11_reg_2141),
    .address1(cache_V_5_address1),
    .ce1(cache_V_5_ce1),
    .q1(cache_V_5_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_6_address0),
    .ce0(cache_V_6_ce0),
    .we0(cache_V_6_we0),
    .d0(tmp_11_reg_2141),
    .address1(cache_V_6_address1),
    .ce1(cache_V_6_ce1),
    .q1(cache_V_6_q1)
);

bin_to_res_cache_V_0 #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
cache_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cache_V_7_address0),
    .ce0(cache_V_7_ce0),
    .we0(cache_V_7_we0),
    .d0(tmp_11_reg_2141),
    .address1(cache_V_7_address1),
    .ce1(cache_V_7_ce1),
    .q1(cache_V_7_q1)
);

bin_to_res_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(axi_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .rid_to_bin_address0(rid_to_bin_address0),
    .rid_to_bin_ce0(rid_to_bin_ce0),
    .rid_to_bin_q0(rid_to_bin_q0),
    .clk(ap_clk),
    .rst(ap_rst_n_axi_clk_inv)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U1(
    .din0(iqtmp_0_reg_2289),
    .din1(iqtmp_1_reg_2294),
    .din2(iqtmp_2_reg_2299),
    .din3(iqtmp_3_reg_2304),
    .din4(iqtmp_4_reg_2309),
    .din5(iqtmp_5_reg_2314),
    .din6(iqtmp_6_reg_2319),
    .din7(iqtmp_7_reg_2324),
    .din8(iqtmp_8_reg_2329),
    .din9(iqtmp_9_reg_2334),
    .din10(iqtmp_10_reg_2339),
    .din11(iqtmp_11_reg_2344),
    .din12(iqtmp_12_reg_2349),
    .din13(iqtmp_13_reg_2354),
    .din14(iqtmp_14_reg_2359),
    .din15(iqtmp_15_reg_2364),
    .din16(trunc_ln9_reg_2174_pp0_iter3_reg),
    .dout(tmp_fu_1946_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U2(
    .din0(iqtmp_0_1_reg_2369),
    .din1(iqtmp_1_1_reg_2374),
    .din2(iqtmp_2_1_reg_2379),
    .din3(iqtmp_3_1_reg_2384),
    .din4(iqtmp_4_1_reg_2389),
    .din5(iqtmp_5_1_reg_2394),
    .din6(iqtmp_6_1_reg_2399),
    .din7(iqtmp_7_1_reg_2404),
    .din8(iqtmp_8_1_reg_2409),
    .din9(iqtmp_9_1_reg_2414),
    .din10(iqtmp_10_1_reg_2419),
    .din11(iqtmp_11_1_reg_2424),
    .din12(iqtmp_12_1_reg_2429),
    .din13(iqtmp_13_1_reg_2434),
    .din14(iqtmp_14_1_reg_2439),
    .din15(iqtmp_15_1_reg_2444),
    .din16(trunc_ln9_1_reg_2184_pp0_iter3_reg),
    .dout(tmp_4_fu_1967_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U3(
    .din0(iqtmp_0_2_reg_2449),
    .din1(iqtmp_1_2_reg_2454),
    .din2(iqtmp_2_2_reg_2459),
    .din3(iqtmp_3_2_reg_2464),
    .din4(iqtmp_4_2_reg_2469),
    .din5(iqtmp_5_2_reg_2474),
    .din6(iqtmp_6_2_reg_2479),
    .din7(iqtmp_7_2_reg_2484),
    .din8(iqtmp_8_2_reg_2489),
    .din9(iqtmp_9_2_reg_2494),
    .din10(iqtmp_10_2_reg_2499),
    .din11(iqtmp_11_2_reg_2504),
    .din12(iqtmp_12_2_reg_2509),
    .din13(iqtmp_13_2_reg_2514),
    .din14(iqtmp_14_2_reg_2519),
    .din15(iqtmp_15_2_reg_2524),
    .din16(trunc_ln9_2_reg_2194_pp0_iter3_reg),
    .dout(tmp_5_fu_1988_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U4(
    .din0(iqtmp_0_3_reg_2529),
    .din1(iqtmp_1_3_reg_2534),
    .din2(iqtmp_2_3_reg_2539),
    .din3(iqtmp_3_3_reg_2544),
    .din4(iqtmp_4_3_reg_2549),
    .din5(iqtmp_5_3_reg_2554),
    .din6(iqtmp_6_3_reg_2559),
    .din7(iqtmp_7_3_reg_2564),
    .din8(iqtmp_8_3_reg_2569),
    .din9(iqtmp_9_3_reg_2574),
    .din10(iqtmp_10_3_reg_2579),
    .din11(iqtmp_11_3_reg_2584),
    .din12(iqtmp_12_3_reg_2589),
    .din13(iqtmp_13_3_reg_2594),
    .din14(iqtmp_14_3_reg_2599),
    .din15(iqtmp_15_3_reg_2604),
    .din16(trunc_ln9_3_reg_2204_pp0_iter3_reg),
    .dout(tmp_6_fu_2009_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U5(
    .din0(iqtmp_0_4_reg_2609),
    .din1(iqtmp_1_4_reg_2614),
    .din2(iqtmp_2_4_reg_2619),
    .din3(iqtmp_3_4_reg_2624),
    .din4(iqtmp_4_4_reg_2629),
    .din5(iqtmp_5_4_reg_2634),
    .din6(iqtmp_6_4_reg_2639),
    .din7(iqtmp_7_4_reg_2644),
    .din8(iqtmp_8_4_reg_2649),
    .din9(iqtmp_9_4_reg_2654),
    .din10(iqtmp_10_4_reg_2659),
    .din11(iqtmp_11_4_reg_2664),
    .din12(iqtmp_12_4_reg_2669),
    .din13(iqtmp_13_4_reg_2674),
    .din14(iqtmp_14_4_reg_2679),
    .din15(iqtmp_15_4_reg_2684),
    .din16(trunc_ln9_4_reg_2214_pp0_iter3_reg),
    .dout(tmp_7_fu_2030_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U6(
    .din0(iqtmp_0_5_reg_2689),
    .din1(iqtmp_1_5_reg_2694),
    .din2(iqtmp_2_5_reg_2699),
    .din3(iqtmp_3_5_reg_2704),
    .din4(iqtmp_4_5_reg_2709),
    .din5(iqtmp_5_5_reg_2714),
    .din6(iqtmp_6_5_reg_2719),
    .din7(iqtmp_7_5_reg_2724),
    .din8(iqtmp_8_5_reg_2729),
    .din9(iqtmp_9_5_reg_2734),
    .din10(iqtmp_10_5_reg_2739),
    .din11(iqtmp_11_5_reg_2744),
    .din12(iqtmp_12_5_reg_2749),
    .din13(iqtmp_13_5_reg_2754),
    .din14(iqtmp_14_5_reg_2759),
    .din15(iqtmp_15_5_reg_2764),
    .din16(trunc_ln9_5_reg_2224_pp0_iter3_reg),
    .dout(tmp_8_fu_2051_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U7(
    .din0(iqtmp_0_6_reg_2769),
    .din1(iqtmp_1_6_reg_2774),
    .din2(iqtmp_2_6_reg_2779),
    .din3(iqtmp_3_6_reg_2784),
    .din4(iqtmp_4_6_reg_2789),
    .din5(iqtmp_5_6_reg_2794),
    .din6(iqtmp_6_6_reg_2799),
    .din7(iqtmp_7_6_reg_2804),
    .din8(iqtmp_8_6_reg_2809),
    .din9(iqtmp_9_6_reg_2814),
    .din10(iqtmp_10_6_reg_2819),
    .din11(iqtmp_11_6_reg_2824),
    .din12(iqtmp_12_6_reg_2829),
    .din13(iqtmp_13_6_reg_2834),
    .din14(iqtmp_14_6_reg_2839),
    .din15(iqtmp_15_6_reg_2844),
    .din16(trunc_ln9_6_reg_2234_pp0_iter3_reg),
    .dout(tmp_9_fu_2072_p18)
);

bin_to_res_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U8(
    .din0(iqtmp_0_7_reg_2849),
    .din1(iqtmp_1_7_reg_2854),
    .din2(iqtmp_2_7_reg_2859),
    .din3(iqtmp_3_7_reg_2864),
    .din4(iqtmp_4_7_reg_2869),
    .din5(iqtmp_5_7_reg_2874),
    .din6(iqtmp_6_7_reg_2879),
    .din7(iqtmp_7_7_reg_2884),
    .din8(iqtmp_8_7_reg_2889),
    .din9(iqtmp_9_7_reg_2894),
    .din10(iqtmp_10_7_reg_2899),
    .din11(iqtmp_11_7_reg_2904),
    .din12(iqtmp_12_7_reg_2909),
    .din13(iqtmp_13_7_reg_2914),
    .din14(iqtmp_14_7_reg_2919),
    .din15(iqtmp_15_7_reg_2924),
    .din16(trunc_ln9_7_reg_2244_pp0_iter3_reg),
    .dout(tmp_s_fu_2093_p18)
);

bin_to_res_regslice_both #(
    .DataWidth( 512 ))
regslice_both_iq_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iq_stream_TDATA),
    .vld_in(iq_stream_TVALID),
    .ack_in(regslice_both_iq_stream_V_data_V_U_ack_in),
    .data_out(iq_stream_TDATA_int_regslice),
    .vld_out(iq_stream_TVALID_int_regslice),
    .ack_out(iq_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_iq_stream_V_data_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 64 ))
regslice_both_iq_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iq_stream_TKEEP),
    .vld_in(iq_stream_TVALID),
    .ack_in(regslice_both_iq_stream_V_keep_V_U_ack_in),
    .data_out(iq_stream_TKEEP_int_regslice),
    .vld_out(regslice_both_iq_stream_V_keep_V_U_vld_out),
    .ack_out(iq_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_iq_stream_V_keep_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 64 ))
regslice_both_iq_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iq_stream_TSTRB),
    .vld_in(iq_stream_TVALID),
    .ack_in(regslice_both_iq_stream_V_strb_V_U_ack_in),
    .data_out(iq_stream_TSTRB_int_regslice),
    .vld_out(regslice_both_iq_stream_V_strb_V_U_vld_out),
    .ack_out(iq_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_iq_stream_V_strb_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 1 ))
regslice_both_iq_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(iq_stream_TLAST),
    .vld_in(iq_stream_TVALID),
    .ack_in(regslice_both_iq_stream_V_last_V_U_ack_in),
    .data_out(iq_stream_TLAST_int_regslice),
    .vld_out(regslice_both_iq_stream_V_last_V_U_vld_out),
    .ack_out(iq_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_iq_stream_V_last_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 256 ))
regslice_both_res_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(res_stream_TDATA_int_regslice),
    .vld_in(res_stream_TVALID_int_regslice),
    .ack_in(res_stream_TREADY_int_regslice),
    .data_out(res_stream_TDATA),
    .vld_out(regslice_both_res_stream_V_data_V_U_vld_out),
    .ack_out(res_stream_TREADY),
    .apdone_blk(regslice_both_res_stream_V_data_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(32'd0),
    .vld_in(res_stream_TVALID_int_regslice),
    .ack_in(regslice_both_res_stream_V_keep_V_U_ack_in_dummy),
    .data_out(res_stream_TKEEP),
    .vld_out(regslice_both_res_stream_V_keep_V_U_vld_out),
    .ack_out(res_stream_TREADY),
    .apdone_blk(regslice_both_res_stream_V_keep_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(32'd0),
    .vld_in(res_stream_TVALID_int_regslice),
    .ack_in(regslice_both_res_stream_V_strb_V_U_ack_in_dummy),
    .data_out(res_stream_TSTRB),
    .vld_out(regslice_both_res_stream_V_strb_V_U_vld_out),
    .ack_out(res_stream_TREADY),
    .apdone_blk(regslice_both_res_stream_V_strb_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 8 ))
regslice_both_res_stream_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_tmp_user_V_reg_2158_pp0_iter3_reg),
    .vld_in(res_stream_TVALID_int_regslice),
    .ack_in(regslice_both_res_stream_V_user_V_U_ack_in_dummy),
    .data_out(res_stream_TUSER),
    .vld_out(regslice_both_res_stream_V_user_V_U_vld_out),
    .ack_out(res_stream_TREADY),
    .apdone_blk(regslice_both_res_stream_V_user_V_U_apdone_blk)
);

bin_to_res_regslice_both #(
    .DataWidth( 1 ))
regslice_both_res_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(res_stream_TLAST_int_regslice),
    .vld_in(res_stream_TVALID_int_regslice),
    .ack_in(regslice_both_res_stream_V_last_V_U_ack_in_dummy),
    .data_out(res_stream_TLAST),
    .vld_out(regslice_both_res_stream_V_last_V_U_vld_out),
    .ack_out(res_stream_TREADY),
    .apdone_blk(regslice_both_res_stream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        cache_group_V <= select_ln63_fu_503_p3;
        replay_group_V <= add_ln870_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_group_V_load_reg_2153 <= cache_group_V;
        lshr_ln1543_1_reg_2179 <= {{rid_to_bin_q0[23:16]}};
        lshr_ln1543_2_reg_2189 <= {{rid_to_bin_q0[35:28]}};
        lshr_ln1543_3_reg_2199 <= {{rid_to_bin_q0[47:40]}};
        lshr_ln1543_4_reg_2209 <= {{rid_to_bin_q0[59:52]}};
        lshr_ln1543_5_reg_2219 <= {{rid_to_bin_q0[71:64]}};
        lshr_ln1543_6_reg_2229 <= {{rid_to_bin_q0[83:76]}};
        lshr_ln1543_7_reg_2239 <= {{rid_to_bin_q0[95:88]}};
        lshr_ln_reg_2169 <= {{rid_to_bin_q0[11:4]}};
        output_tmp_user_V_reg_2158 <= replay_group_V;
        output_tmp_user_V_reg_2158_pp0_iter1_reg <= output_tmp_user_V_reg_2158;
        tmp_11_reg_2141 <= iq_stream_TDATA_int_regslice;
        trunc_ln9_1_reg_2184 <= {{rid_to_bin_q0[15:12]}};
        trunc_ln9_2_reg_2194 <= {{rid_to_bin_q0[27:24]}};
        trunc_ln9_3_reg_2204 <= {{rid_to_bin_q0[39:36]}};
        trunc_ln9_4_reg_2214 <= {{rid_to_bin_q0[51:48]}};
        trunc_ln9_5_reg_2224 <= {{rid_to_bin_q0[63:60]}};
        trunc_ln9_6_reg_2234 <= {{rid_to_bin_q0[75:72]}};
        trunc_ln9_7_reg_2244 <= {{rid_to_bin_q0[87:84]}};
        trunc_ln9_reg_2174 <= trunc_ln9_fu_538_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        iqtmp_0_1_reg_2369 <= iqtmp_0_1_fu_868_p1;
        iqtmp_0_2_reg_2449 <= iqtmp_0_2_fu_1022_p1;
        iqtmp_0_3_reg_2529 <= iqtmp_0_3_fu_1176_p1;
        iqtmp_0_4_reg_2609 <= iqtmp_0_4_fu_1330_p1;
        iqtmp_0_5_reg_2689 <= iqtmp_0_5_fu_1484_p1;
        iqtmp_0_6_reg_2769 <= iqtmp_0_6_fu_1638_p1;
        iqtmp_0_7_reg_2849 <= iqtmp_0_7_fu_1792_p1;
        iqtmp_0_reg_2289 <= iqtmp_0_fu_714_p1;
        iqtmp_10_1_reg_2419 <= {{cache_V_1_q1[351:320]}};
        iqtmp_10_2_reg_2499 <= {{cache_V_2_q1[351:320]}};
        iqtmp_10_3_reg_2579 <= {{cache_V_3_q1[351:320]}};
        iqtmp_10_4_reg_2659 <= {{cache_V_4_q1[351:320]}};
        iqtmp_10_5_reg_2739 <= {{cache_V_5_q1[351:320]}};
        iqtmp_10_6_reg_2819 <= {{cache_V_6_q1[351:320]}};
        iqtmp_10_7_reg_2899 <= {{cache_V_7_q1[351:320]}};
        iqtmp_10_reg_2339 <= {{cache_V_0_q1[351:320]}};
        iqtmp_11_1_reg_2424 <= {{cache_V_1_q1[383:352]}};
        iqtmp_11_2_reg_2504 <= {{cache_V_2_q1[383:352]}};
        iqtmp_11_3_reg_2584 <= {{cache_V_3_q1[383:352]}};
        iqtmp_11_4_reg_2664 <= {{cache_V_4_q1[383:352]}};
        iqtmp_11_5_reg_2744 <= {{cache_V_5_q1[383:352]}};
        iqtmp_11_6_reg_2824 <= {{cache_V_6_q1[383:352]}};
        iqtmp_11_7_reg_2904 <= {{cache_V_7_q1[383:352]}};
        iqtmp_11_reg_2344 <= {{cache_V_0_q1[383:352]}};
        iqtmp_12_1_reg_2429 <= {{cache_V_1_q1[415:384]}};
        iqtmp_12_2_reg_2509 <= {{cache_V_2_q1[415:384]}};
        iqtmp_12_3_reg_2589 <= {{cache_V_3_q1[415:384]}};
        iqtmp_12_4_reg_2669 <= {{cache_V_4_q1[415:384]}};
        iqtmp_12_5_reg_2749 <= {{cache_V_5_q1[415:384]}};
        iqtmp_12_6_reg_2829 <= {{cache_V_6_q1[415:384]}};
        iqtmp_12_7_reg_2909 <= {{cache_V_7_q1[415:384]}};
        iqtmp_12_reg_2349 <= {{cache_V_0_q1[415:384]}};
        iqtmp_13_1_reg_2434 <= {{cache_V_1_q1[447:416]}};
        iqtmp_13_2_reg_2514 <= {{cache_V_2_q1[447:416]}};
        iqtmp_13_3_reg_2594 <= {{cache_V_3_q1[447:416]}};
        iqtmp_13_4_reg_2674 <= {{cache_V_4_q1[447:416]}};
        iqtmp_13_5_reg_2754 <= {{cache_V_5_q1[447:416]}};
        iqtmp_13_6_reg_2834 <= {{cache_V_6_q1[447:416]}};
        iqtmp_13_7_reg_2914 <= {{cache_V_7_q1[447:416]}};
        iqtmp_13_reg_2354 <= {{cache_V_0_q1[447:416]}};
        iqtmp_14_1_reg_2439 <= {{cache_V_1_q1[479:448]}};
        iqtmp_14_2_reg_2519 <= {{cache_V_2_q1[479:448]}};
        iqtmp_14_3_reg_2599 <= {{cache_V_3_q1[479:448]}};
        iqtmp_14_4_reg_2679 <= {{cache_V_4_q1[479:448]}};
        iqtmp_14_5_reg_2759 <= {{cache_V_5_q1[479:448]}};
        iqtmp_14_6_reg_2839 <= {{cache_V_6_q1[479:448]}};
        iqtmp_14_7_reg_2919 <= {{cache_V_7_q1[479:448]}};
        iqtmp_14_reg_2359 <= {{cache_V_0_q1[479:448]}};
        iqtmp_15_1_reg_2444 <= {{cache_V_1_q1[511:480]}};
        iqtmp_15_2_reg_2524 <= {{cache_V_2_q1[511:480]}};
        iqtmp_15_3_reg_2604 <= {{cache_V_3_q1[511:480]}};
        iqtmp_15_4_reg_2684 <= {{cache_V_4_q1[511:480]}};
        iqtmp_15_5_reg_2764 <= {{cache_V_5_q1[511:480]}};
        iqtmp_15_6_reg_2844 <= {{cache_V_6_q1[511:480]}};
        iqtmp_15_7_reg_2924 <= {{cache_V_7_q1[511:480]}};
        iqtmp_15_reg_2364 <= {{cache_V_0_q1[511:480]}};
        iqtmp_1_1_reg_2374 <= {{cache_V_1_q1[63:32]}};
        iqtmp_1_2_reg_2454 <= {{cache_V_2_q1[63:32]}};
        iqtmp_1_3_reg_2534 <= {{cache_V_3_q1[63:32]}};
        iqtmp_1_4_reg_2614 <= {{cache_V_4_q1[63:32]}};
        iqtmp_1_5_reg_2694 <= {{cache_V_5_q1[63:32]}};
        iqtmp_1_6_reg_2774 <= {{cache_V_6_q1[63:32]}};
        iqtmp_1_7_reg_2854 <= {{cache_V_7_q1[63:32]}};
        iqtmp_1_reg_2294 <= {{cache_V_0_q1[63:32]}};
        iqtmp_2_1_reg_2379 <= {{cache_V_1_q1[95:64]}};
        iqtmp_2_2_reg_2459 <= {{cache_V_2_q1[95:64]}};
        iqtmp_2_3_reg_2539 <= {{cache_V_3_q1[95:64]}};
        iqtmp_2_4_reg_2619 <= {{cache_V_4_q1[95:64]}};
        iqtmp_2_5_reg_2699 <= {{cache_V_5_q1[95:64]}};
        iqtmp_2_6_reg_2779 <= {{cache_V_6_q1[95:64]}};
        iqtmp_2_7_reg_2859 <= {{cache_V_7_q1[95:64]}};
        iqtmp_2_reg_2299 <= {{cache_V_0_q1[95:64]}};
        iqtmp_3_1_reg_2384 <= {{cache_V_1_q1[127:96]}};
        iqtmp_3_2_reg_2464 <= {{cache_V_2_q1[127:96]}};
        iqtmp_3_3_reg_2544 <= {{cache_V_3_q1[127:96]}};
        iqtmp_3_4_reg_2624 <= {{cache_V_4_q1[127:96]}};
        iqtmp_3_5_reg_2704 <= {{cache_V_5_q1[127:96]}};
        iqtmp_3_6_reg_2784 <= {{cache_V_6_q1[127:96]}};
        iqtmp_3_7_reg_2864 <= {{cache_V_7_q1[127:96]}};
        iqtmp_3_reg_2304 <= {{cache_V_0_q1[127:96]}};
        iqtmp_4_1_reg_2389 <= {{cache_V_1_q1[159:128]}};
        iqtmp_4_2_reg_2469 <= {{cache_V_2_q1[159:128]}};
        iqtmp_4_3_reg_2549 <= {{cache_V_3_q1[159:128]}};
        iqtmp_4_4_reg_2629 <= {{cache_V_4_q1[159:128]}};
        iqtmp_4_5_reg_2709 <= {{cache_V_5_q1[159:128]}};
        iqtmp_4_6_reg_2789 <= {{cache_V_6_q1[159:128]}};
        iqtmp_4_7_reg_2869 <= {{cache_V_7_q1[159:128]}};
        iqtmp_4_reg_2309 <= {{cache_V_0_q1[159:128]}};
        iqtmp_5_1_reg_2394 <= {{cache_V_1_q1[191:160]}};
        iqtmp_5_2_reg_2474 <= {{cache_V_2_q1[191:160]}};
        iqtmp_5_3_reg_2554 <= {{cache_V_3_q1[191:160]}};
        iqtmp_5_4_reg_2634 <= {{cache_V_4_q1[191:160]}};
        iqtmp_5_5_reg_2714 <= {{cache_V_5_q1[191:160]}};
        iqtmp_5_6_reg_2794 <= {{cache_V_6_q1[191:160]}};
        iqtmp_5_7_reg_2874 <= {{cache_V_7_q1[191:160]}};
        iqtmp_5_reg_2314 <= {{cache_V_0_q1[191:160]}};
        iqtmp_6_1_reg_2399 <= {{cache_V_1_q1[223:192]}};
        iqtmp_6_2_reg_2479 <= {{cache_V_2_q1[223:192]}};
        iqtmp_6_3_reg_2559 <= {{cache_V_3_q1[223:192]}};
        iqtmp_6_4_reg_2639 <= {{cache_V_4_q1[223:192]}};
        iqtmp_6_5_reg_2719 <= {{cache_V_5_q1[223:192]}};
        iqtmp_6_6_reg_2799 <= {{cache_V_6_q1[223:192]}};
        iqtmp_6_7_reg_2879 <= {{cache_V_7_q1[223:192]}};
        iqtmp_6_reg_2319 <= {{cache_V_0_q1[223:192]}};
        iqtmp_7_1_reg_2404 <= {{cache_V_1_q1[255:224]}};
        iqtmp_7_2_reg_2484 <= {{cache_V_2_q1[255:224]}};
        iqtmp_7_3_reg_2564 <= {{cache_V_3_q1[255:224]}};
        iqtmp_7_4_reg_2644 <= {{cache_V_4_q1[255:224]}};
        iqtmp_7_5_reg_2724 <= {{cache_V_5_q1[255:224]}};
        iqtmp_7_6_reg_2804 <= {{cache_V_6_q1[255:224]}};
        iqtmp_7_7_reg_2884 <= {{cache_V_7_q1[255:224]}};
        iqtmp_7_reg_2324 <= {{cache_V_0_q1[255:224]}};
        iqtmp_8_1_reg_2409 <= {{cache_V_1_q1[287:256]}};
        iqtmp_8_2_reg_2489 <= {{cache_V_2_q1[287:256]}};
        iqtmp_8_3_reg_2569 <= {{cache_V_3_q1[287:256]}};
        iqtmp_8_4_reg_2649 <= {{cache_V_4_q1[287:256]}};
        iqtmp_8_5_reg_2729 <= {{cache_V_5_q1[287:256]}};
        iqtmp_8_6_reg_2809 <= {{cache_V_6_q1[287:256]}};
        iqtmp_8_7_reg_2889 <= {{cache_V_7_q1[287:256]}};
        iqtmp_8_reg_2329 <= {{cache_V_0_q1[287:256]}};
        iqtmp_9_1_reg_2414 <= {{cache_V_1_q1[319:288]}};
        iqtmp_9_2_reg_2494 <= {{cache_V_2_q1[319:288]}};
        iqtmp_9_3_reg_2574 <= {{cache_V_3_q1[319:288]}};
        iqtmp_9_4_reg_2654 <= {{cache_V_4_q1[319:288]}};
        iqtmp_9_5_reg_2734 <= {{cache_V_5_q1[319:288]}};
        iqtmp_9_6_reg_2814 <= {{cache_V_6_q1[319:288]}};
        iqtmp_9_7_reg_2894 <= {{cache_V_7_q1[319:288]}};
        iqtmp_9_reg_2334 <= {{cache_V_0_q1[319:288]}};
        output_tmp_user_V_reg_2158_pp0_iter2_reg <= output_tmp_user_V_reg_2158_pp0_iter1_reg;
        output_tmp_user_V_reg_2158_pp0_iter3_reg <= output_tmp_user_V_reg_2158_pp0_iter2_reg;
        trunc_ln9_1_reg_2184_pp0_iter2_reg <= trunc_ln9_1_reg_2184;
        trunc_ln9_1_reg_2184_pp0_iter3_reg <= trunc_ln9_1_reg_2184_pp0_iter2_reg;
        trunc_ln9_2_reg_2194_pp0_iter2_reg <= trunc_ln9_2_reg_2194;
        trunc_ln9_2_reg_2194_pp0_iter3_reg <= trunc_ln9_2_reg_2194_pp0_iter2_reg;
        trunc_ln9_3_reg_2204_pp0_iter2_reg <= trunc_ln9_3_reg_2204;
        trunc_ln9_3_reg_2204_pp0_iter3_reg <= trunc_ln9_3_reg_2204_pp0_iter2_reg;
        trunc_ln9_4_reg_2214_pp0_iter2_reg <= trunc_ln9_4_reg_2214;
        trunc_ln9_4_reg_2214_pp0_iter3_reg <= trunc_ln9_4_reg_2214_pp0_iter2_reg;
        trunc_ln9_5_reg_2224_pp0_iter2_reg <= trunc_ln9_5_reg_2224;
        trunc_ln9_5_reg_2224_pp0_iter3_reg <= trunc_ln9_5_reg_2224_pp0_iter2_reg;
        trunc_ln9_6_reg_2234_pp0_iter2_reg <= trunc_ln9_6_reg_2234;
        trunc_ln9_6_reg_2234_pp0_iter3_reg <= trunc_ln9_6_reg_2234_pp0_iter2_reg;
        trunc_ln9_7_reg_2244_pp0_iter2_reg <= trunc_ln9_7_reg_2244;
        trunc_ln9_7_reg_2244_pp0_iter3_reg <= trunc_ln9_7_reg_2244_pp0_iter2_reg;
        trunc_ln9_reg_2174_pp0_iter2_reg <= trunc_ln9_reg_2174;
        trunc_ln9_reg_2174_pp0_iter3_reg <= trunc_ln9_reg_2174_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_0_ce0 = 1'b1;
    end else begin
        cache_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_0_ce1 = 1'b1;
    end else begin
        cache_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_0_we0 = 1'b1;
    end else begin
        cache_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_1_ce0 = 1'b1;
    end else begin
        cache_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_1_ce1 = 1'b1;
    end else begin
        cache_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_1_we0 = 1'b1;
    end else begin
        cache_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_2_ce0 = 1'b1;
    end else begin
        cache_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_2_ce1 = 1'b1;
    end else begin
        cache_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_2_we0 = 1'b1;
    end else begin
        cache_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_3_ce0 = 1'b1;
    end else begin
        cache_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_3_ce1 = 1'b1;
    end else begin
        cache_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_3_we0 = 1'b1;
    end else begin
        cache_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_4_ce0 = 1'b1;
    end else begin
        cache_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_4_ce1 = 1'b1;
    end else begin
        cache_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_4_we0 = 1'b1;
    end else begin
        cache_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_5_ce0 = 1'b1;
    end else begin
        cache_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_5_ce1 = 1'b1;
    end else begin
        cache_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_5_we0 = 1'b1;
    end else begin
        cache_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_6_ce0 = 1'b1;
    end else begin
        cache_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_6_ce1 = 1'b1;
    end else begin
        cache_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_6_we0 = 1'b1;
    end else begin
        cache_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_7_ce0 = 1'b1;
    end else begin
        cache_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_7_ce1 = 1'b1;
    end else begin
        cache_V_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cache_V_7_we0 = 1'b1;
    end else begin
        cache_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1))) begin
        iq_stream_TDATA_blk_n = iq_stream_TVALID_int_regslice;
    end else begin
        iq_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        iq_stream_TREADY_int_regslice = 1'b1;
    end else begin
        iq_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        res_stream_TDATA_blk_n = res_stream_TREADY_int_regslice;
    end else begin
        res_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_stream_TVALID_int_regslice = 1'b1;
    end else begin
        res_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        rid_to_bin_ce0 = 1'b1;
    end else begin
        rid_to_bin_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln223_fu_497_p2 = (cache_group_V + 8'd1);

assign add_ln870_fu_485_p2 = (replay_group_V + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((res_stream_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((iq_stream_TVALID_int_regslice == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((regslice_both_res_stream_V_data_V_U_apdone_blk == 1'b1) | (res_stream_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((res_stream_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((iq_stream_TVALID_int_regslice == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((regslice_both_res_stream_V_data_V_U_apdone_blk == 1'b1) | (res_stream_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((res_stream_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((iq_stream_TVALID_int_regslice == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & ((regslice_both_res_stream_V_data_V_U_apdone_blk == 1'b1) | (res_stream_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (iq_stream_TVALID_int_regslice == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (res_stream_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((regslice_both_res_stream_V_data_V_U_apdone_blk == 1'b1) | (res_stream_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_axi_clk_inv = ~ap_rst_n_axi_clk;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cache_V_0_address0 = conv_i65_fu_517_p1;

assign cache_V_0_address1 = zext_ln52_fu_682_p1;

assign cache_V_1_address0 = conv_i65_fu_517_p1;

assign cache_V_1_address1 = zext_ln52_1_fu_686_p1;

assign cache_V_2_address0 = conv_i65_fu_517_p1;

assign cache_V_2_address1 = zext_ln52_2_fu_690_p1;

assign cache_V_3_address0 = conv_i65_fu_517_p1;

assign cache_V_3_address1 = zext_ln52_3_fu_694_p1;

assign cache_V_4_address0 = conv_i65_fu_517_p1;

assign cache_V_4_address1 = zext_ln52_4_fu_698_p1;

assign cache_V_5_address0 = conv_i65_fu_517_p1;

assign cache_V_5_address1 = zext_ln52_5_fu_702_p1;

assign cache_V_6_address0 = conv_i65_fu_517_p1;

assign cache_V_6_address1 = zext_ln52_6_fu_706_p1;

assign cache_V_7_address0 = conv_i65_fu_517_p1;

assign cache_V_7_address1 = zext_ln52_7_fu_710_p1;

assign conv_i65_fu_517_p1 = cache_group_V_load_reg_2153;

assign iq_stream_TREADY = regslice_both_iq_stream_V_data_V_U_ack_in;

assign iqtmp_0_1_fu_868_p1 = cache_V_1_q1[31:0];

assign iqtmp_0_2_fu_1022_p1 = cache_V_2_q1[31:0];

assign iqtmp_0_3_fu_1176_p1 = cache_V_3_q1[31:0];

assign iqtmp_0_4_fu_1330_p1 = cache_V_4_q1[31:0];

assign iqtmp_0_5_fu_1484_p1 = cache_V_5_q1[31:0];

assign iqtmp_0_6_fu_1638_p1 = cache_V_6_q1[31:0];

assign iqtmp_0_7_fu_1792_p1 = cache_V_7_q1[31:0];

assign iqtmp_0_fu_714_p1 = cache_V_0_q1[31:0];

assign res_stream_TDATA_int_regslice = {{{{{{{{tmp_s_fu_2093_p18}, {tmp_9_fu_2072_p18}}, {tmp_8_fu_2051_p18}}, {tmp_7_fu_2030_p18}}, {tmp_6_fu_2009_p18}}, {tmp_5_fu_1988_p18}}, {tmp_4_fu_1967_p18}}, {tmp_fu_1946_p18}};

assign res_stream_TLAST_int_regslice = ((output_tmp_user_V_reg_2158_pp0_iter3_reg == 8'd255) ? 1'b1 : 1'b0);

assign res_stream_TVALID = regslice_both_res_stream_V_data_V_U_vld_out;

assign rid_to_bin_address0 = zext_ln573_fu_480_p1;

assign select_ln63_fu_503_p3 = ((iq_stream_TLAST_int_regslice[0:0] == 1'b1) ? 8'd0 : add_ln223_fu_497_p2);

assign trunc_ln9_fu_538_p1 = rid_to_bin_q0[3:0];

assign zext_ln52_1_fu_686_p1 = lshr_ln1543_1_reg_2179;

assign zext_ln52_2_fu_690_p1 = lshr_ln1543_2_reg_2189;

assign zext_ln52_3_fu_694_p1 = lshr_ln1543_3_reg_2199;

assign zext_ln52_4_fu_698_p1 = lshr_ln1543_4_reg_2209;

assign zext_ln52_5_fu_702_p1 = lshr_ln1543_5_reg_2219;

assign zext_ln52_6_fu_706_p1 = lshr_ln1543_6_reg_2229;

assign zext_ln52_7_fu_710_p1 = lshr_ln1543_7_reg_2239;

assign zext_ln52_fu_682_p1 = lshr_ln_reg_2169;

assign zext_ln573_fu_480_p1 = replay_group_V;


// synthesis translate_off
`include "bin_to_res_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //bin_to_res

