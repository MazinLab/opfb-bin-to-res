-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bin_to_res is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    iq_stream_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    iq_stream_TVALID : IN STD_LOGIC;
    iq_stream_TREADY : OUT STD_LOGIC;
    iq_stream_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    iq_stream_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    iq_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    res_stream_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    res_stream_TVALID : OUT STD_LOGIC;
    res_stream_TREADY : IN STD_LOGIC;
    res_stream_TKEEP : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_stream_TSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_stream_TUSER : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    axi_clk : IN STD_LOGIC;
    ap_rst_n_axi_clk : IN STD_LOGIC );
end;


architecture behav of bin_to_res is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bin_to_res_bin_to_res,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.237000,HLS_SYN_LAT=5,HLS_SYN_TPT=1,HLS_SYN_MEM=128,HLS_SYN_DSP=0,HLS_SYN_FF=5428,HLS_SYN_LUT=991,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal rid_to_bin_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rid_to_bin_ce0 : STD_LOGIC;
    signal rid_to_bin_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal cache_group_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal cache_V_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_0_ce0 : STD_LOGIC;
    signal cache_V_0_we0 : STD_LOGIC;
    signal cache_V_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_0_ce1 : STD_LOGIC;
    signal cache_V_0_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_1_ce0 : STD_LOGIC;
    signal cache_V_1_we0 : STD_LOGIC;
    signal cache_V_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_1_ce1 : STD_LOGIC;
    signal cache_V_1_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_2_ce0 : STD_LOGIC;
    signal cache_V_2_we0 : STD_LOGIC;
    signal cache_V_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_2_ce1 : STD_LOGIC;
    signal cache_V_2_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_3_ce0 : STD_LOGIC;
    signal cache_V_3_we0 : STD_LOGIC;
    signal cache_V_3_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_3_ce1 : STD_LOGIC;
    signal cache_V_3_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_4_ce0 : STD_LOGIC;
    signal cache_V_4_we0 : STD_LOGIC;
    signal cache_V_4_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_4_ce1 : STD_LOGIC;
    signal cache_V_4_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_5_ce0 : STD_LOGIC;
    signal cache_V_5_we0 : STD_LOGIC;
    signal cache_V_5_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_5_ce1 : STD_LOGIC;
    signal cache_V_5_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_6_ce0 : STD_LOGIC;
    signal cache_V_6_we0 : STD_LOGIC;
    signal cache_V_6_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_6_ce1 : STD_LOGIC;
    signal cache_V_6_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_7_ce0 : STD_LOGIC;
    signal cache_V_7_we0 : STD_LOGIC;
    signal cache_V_7_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_7_ce1 : STD_LOGIC;
    signal cache_V_7_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal replay_group_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal iq_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal res_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal tmp_11_reg_2141 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal regslice_both_res_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal cache_group_V_load_reg_2153 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_tmp_user_V_reg_2158 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_tmp_user_V_reg_2158_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_tmp_user_V_reg_2158_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_tmp_user_V_reg_2158_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_reg_2169 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_fu_538_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_reg_2174 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_reg_2174_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_reg_2174_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1543_1_reg_2179 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_1_reg_2184 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_1_reg_2184_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_1_reg_2184_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1543_2_reg_2189 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_2_reg_2194 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_2_reg_2194_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_2_reg_2194_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1543_3_reg_2199 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_3_reg_2204 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_3_reg_2204_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_3_reg_2204_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1543_4_reg_2209 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_4_reg_2214 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_4_reg_2214_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_4_reg_2214_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1543_5_reg_2219 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_5_reg_2224 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_5_reg_2224_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_5_reg_2224_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1543_6_reg_2229 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_6_reg_2234 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_6_reg_2234_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_6_reg_2234_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1543_7_reg_2239 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_7_reg_2244 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_7_reg_2244_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_7_reg_2244_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal iqtmp_0_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_reg_2289 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_reg_2294 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_reg_2299 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_reg_2304 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_reg_2309 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_reg_2314 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_reg_2319 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_reg_2324 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_reg_2329 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_reg_2334 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_reg_2339 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_reg_2344 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_reg_2349 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_reg_2354 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_reg_2359 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_reg_2364 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_1_fu_868_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_1_reg_2369 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_1_reg_2374 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_1_reg_2379 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_1_reg_2384 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_1_reg_2389 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_1_reg_2394 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_1_reg_2399 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_1_reg_2404 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_1_reg_2409 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_1_reg_2414 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_1_reg_2419 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_1_reg_2424 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_1_reg_2429 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_1_reg_2434 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_1_reg_2439 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_1_reg_2444 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_2_fu_1022_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_2_reg_2449 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_2_reg_2454 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_2_reg_2459 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_2_reg_2464 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_2_reg_2469 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_2_reg_2474 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_2_reg_2479 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_2_reg_2484 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_2_reg_2489 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_2_reg_2494 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_2_reg_2499 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_2_reg_2504 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_2_reg_2509 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_2_reg_2514 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_2_reg_2519 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_2_reg_2524 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_3_fu_1176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_3_reg_2529 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_3_reg_2534 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_3_reg_2539 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_3_reg_2544 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_3_reg_2549 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_3_reg_2554 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_3_reg_2559 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_3_reg_2564 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_3_reg_2569 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_3_reg_2574 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_3_reg_2579 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_3_reg_2584 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_3_reg_2589 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_3_reg_2594 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_3_reg_2599 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_3_reg_2604 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_4_fu_1330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_4_reg_2609 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_4_reg_2614 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_4_reg_2619 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_4_reg_2624 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_4_reg_2629 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_4_reg_2634 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_4_reg_2639 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_4_reg_2644 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_4_reg_2649 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_4_reg_2654 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_4_reg_2659 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_4_reg_2664 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_4_reg_2669 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_4_reg_2674 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_4_reg_2679 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_4_reg_2684 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_5_fu_1484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_5_reg_2689 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_5_reg_2694 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_5_reg_2699 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_5_reg_2704 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_5_reg_2709 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_5_reg_2714 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_5_reg_2719 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_5_reg_2724 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_5_reg_2729 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_5_reg_2734 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_5_reg_2739 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_5_reg_2744 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_5_reg_2749 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_5_reg_2754 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_5_reg_2759 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_5_reg_2764 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_6_fu_1638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_6_reg_2769 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_6_reg_2774 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_6_reg_2779 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_6_reg_2784 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_6_reg_2789 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_6_reg_2794 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_6_reg_2799 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_6_reg_2804 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_6_reg_2809 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_6_reg_2814 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_6_reg_2819 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_6_reg_2824 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_6_reg_2829 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_6_reg_2834 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_6_reg_2839 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_6_reg_2844 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_7_fu_1792_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_7_reg_2849 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_7_reg_2854 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_7_reg_2859 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_7_reg_2864 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_7_reg_2869 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_7_reg_2874 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_7_reg_2879 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_7_reg_2884 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_7_reg_2889 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_7_reg_2894 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_7_reg_2899 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_7_reg_2904 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_7_reg_2909 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_7_reg_2914 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_7_reg_2919 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_7_reg_2924 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_rst_n_axi_clk_inv : STD_LOGIC;
    signal zext_ln573_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i65_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_1_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_2_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_3_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_4_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_5_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_6_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_7_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln63_fu_503_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln870_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln223_fu_497_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_2093_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_2072_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_2051_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_2030_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_2009_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1988_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1967_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1946_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_iq_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal iq_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal iq_stream_TVALID_int_regslice : STD_LOGIC;
    signal iq_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_iq_stream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_iq_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal iq_stream_TKEEP_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_iq_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_iq_stream_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_iq_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal iq_stream_TSTRB_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_iq_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_iq_stream_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_iq_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal iq_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_iq_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_iq_stream_V_last_V_U_ack_in : STD_LOGIC;
    signal res_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (255 downto 0);
    signal res_stream_TVALID_int_regslice : STD_LOGIC;
    signal res_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_res_stream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_stream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_res_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_stream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_res_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_stream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_stream_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_res_stream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal res_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_res_stream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_res_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bin_to_res_mux_164_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bin_to_res_cache_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component bin_to_res_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rid_to_bin_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rid_to_bin_ce0 : IN STD_LOGIC;
        rid_to_bin_q0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;


    component bin_to_res_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    cache_V_0_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_0_address0,
        ce0 => cache_V_0_ce0,
        we0 => cache_V_0_we0,
        d0 => tmp_11_reg_2141,
        address1 => cache_V_0_address1,
        ce1 => cache_V_0_ce1,
        q1 => cache_V_0_q1);

    cache_V_1_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_1_address0,
        ce0 => cache_V_1_ce0,
        we0 => cache_V_1_we0,
        d0 => tmp_11_reg_2141,
        address1 => cache_V_1_address1,
        ce1 => cache_V_1_ce1,
        q1 => cache_V_1_q1);

    cache_V_2_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_2_address0,
        ce0 => cache_V_2_ce0,
        we0 => cache_V_2_we0,
        d0 => tmp_11_reg_2141,
        address1 => cache_V_2_address1,
        ce1 => cache_V_2_ce1,
        q1 => cache_V_2_q1);

    cache_V_3_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_3_address0,
        ce0 => cache_V_3_ce0,
        we0 => cache_V_3_we0,
        d0 => tmp_11_reg_2141,
        address1 => cache_V_3_address1,
        ce1 => cache_V_3_ce1,
        q1 => cache_V_3_q1);

    cache_V_4_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_4_address0,
        ce0 => cache_V_4_ce0,
        we0 => cache_V_4_we0,
        d0 => tmp_11_reg_2141,
        address1 => cache_V_4_address1,
        ce1 => cache_V_4_ce1,
        q1 => cache_V_4_q1);

    cache_V_5_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_5_address0,
        ce0 => cache_V_5_ce0,
        we0 => cache_V_5_we0,
        d0 => tmp_11_reg_2141,
        address1 => cache_V_5_address1,
        ce1 => cache_V_5_ce1,
        q1 => cache_V_5_q1);

    cache_V_6_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_6_address0,
        ce0 => cache_V_6_ce0,
        we0 => cache_V_6_we0,
        d0 => tmp_11_reg_2141,
        address1 => cache_V_6_address1,
        ce1 => cache_V_6_ce1,
        q1 => cache_V_6_q1);

    cache_V_7_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_7_address0,
        ce0 => cache_V_7_ce0,
        we0 => cache_V_7_we0,
        d0 => tmp_11_reg_2141,
        address1 => cache_V_7_address1,
        ce1 => cache_V_7_ce1,
        q1 => cache_V_7_q1);

    control_s_axi_U : component bin_to_res_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => axi_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rid_to_bin_address0 => rid_to_bin_address0,
        rid_to_bin_ce0 => rid_to_bin_ce0,
        rid_to_bin_q0 => rid_to_bin_q0,
        clk => ap_clk,
        rst => ap_rst_n_axi_clk_inv);

    mux_164_32_1_1_U1 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_reg_2289,
        din1 => iqtmp_1_reg_2294,
        din2 => iqtmp_2_reg_2299,
        din3 => iqtmp_3_reg_2304,
        din4 => iqtmp_4_reg_2309,
        din5 => iqtmp_5_reg_2314,
        din6 => iqtmp_6_reg_2319,
        din7 => iqtmp_7_reg_2324,
        din8 => iqtmp_8_reg_2329,
        din9 => iqtmp_9_reg_2334,
        din10 => iqtmp_10_reg_2339,
        din11 => iqtmp_11_reg_2344,
        din12 => iqtmp_12_reg_2349,
        din13 => iqtmp_13_reg_2354,
        din14 => iqtmp_14_reg_2359,
        din15 => iqtmp_15_reg_2364,
        din16 => trunc_ln9_reg_2174_pp0_iter3_reg,
        dout => tmp_fu_1946_p18);

    mux_164_32_1_1_U2 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_1_reg_2369,
        din1 => iqtmp_1_1_reg_2374,
        din2 => iqtmp_2_1_reg_2379,
        din3 => iqtmp_3_1_reg_2384,
        din4 => iqtmp_4_1_reg_2389,
        din5 => iqtmp_5_1_reg_2394,
        din6 => iqtmp_6_1_reg_2399,
        din7 => iqtmp_7_1_reg_2404,
        din8 => iqtmp_8_1_reg_2409,
        din9 => iqtmp_9_1_reg_2414,
        din10 => iqtmp_10_1_reg_2419,
        din11 => iqtmp_11_1_reg_2424,
        din12 => iqtmp_12_1_reg_2429,
        din13 => iqtmp_13_1_reg_2434,
        din14 => iqtmp_14_1_reg_2439,
        din15 => iqtmp_15_1_reg_2444,
        din16 => trunc_ln9_1_reg_2184_pp0_iter3_reg,
        dout => tmp_4_fu_1967_p18);

    mux_164_32_1_1_U3 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_2_reg_2449,
        din1 => iqtmp_1_2_reg_2454,
        din2 => iqtmp_2_2_reg_2459,
        din3 => iqtmp_3_2_reg_2464,
        din4 => iqtmp_4_2_reg_2469,
        din5 => iqtmp_5_2_reg_2474,
        din6 => iqtmp_6_2_reg_2479,
        din7 => iqtmp_7_2_reg_2484,
        din8 => iqtmp_8_2_reg_2489,
        din9 => iqtmp_9_2_reg_2494,
        din10 => iqtmp_10_2_reg_2499,
        din11 => iqtmp_11_2_reg_2504,
        din12 => iqtmp_12_2_reg_2509,
        din13 => iqtmp_13_2_reg_2514,
        din14 => iqtmp_14_2_reg_2519,
        din15 => iqtmp_15_2_reg_2524,
        din16 => trunc_ln9_2_reg_2194_pp0_iter3_reg,
        dout => tmp_5_fu_1988_p18);

    mux_164_32_1_1_U4 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_3_reg_2529,
        din1 => iqtmp_1_3_reg_2534,
        din2 => iqtmp_2_3_reg_2539,
        din3 => iqtmp_3_3_reg_2544,
        din4 => iqtmp_4_3_reg_2549,
        din5 => iqtmp_5_3_reg_2554,
        din6 => iqtmp_6_3_reg_2559,
        din7 => iqtmp_7_3_reg_2564,
        din8 => iqtmp_8_3_reg_2569,
        din9 => iqtmp_9_3_reg_2574,
        din10 => iqtmp_10_3_reg_2579,
        din11 => iqtmp_11_3_reg_2584,
        din12 => iqtmp_12_3_reg_2589,
        din13 => iqtmp_13_3_reg_2594,
        din14 => iqtmp_14_3_reg_2599,
        din15 => iqtmp_15_3_reg_2604,
        din16 => trunc_ln9_3_reg_2204_pp0_iter3_reg,
        dout => tmp_6_fu_2009_p18);

    mux_164_32_1_1_U5 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_4_reg_2609,
        din1 => iqtmp_1_4_reg_2614,
        din2 => iqtmp_2_4_reg_2619,
        din3 => iqtmp_3_4_reg_2624,
        din4 => iqtmp_4_4_reg_2629,
        din5 => iqtmp_5_4_reg_2634,
        din6 => iqtmp_6_4_reg_2639,
        din7 => iqtmp_7_4_reg_2644,
        din8 => iqtmp_8_4_reg_2649,
        din9 => iqtmp_9_4_reg_2654,
        din10 => iqtmp_10_4_reg_2659,
        din11 => iqtmp_11_4_reg_2664,
        din12 => iqtmp_12_4_reg_2669,
        din13 => iqtmp_13_4_reg_2674,
        din14 => iqtmp_14_4_reg_2679,
        din15 => iqtmp_15_4_reg_2684,
        din16 => trunc_ln9_4_reg_2214_pp0_iter3_reg,
        dout => tmp_7_fu_2030_p18);

    mux_164_32_1_1_U6 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_5_reg_2689,
        din1 => iqtmp_1_5_reg_2694,
        din2 => iqtmp_2_5_reg_2699,
        din3 => iqtmp_3_5_reg_2704,
        din4 => iqtmp_4_5_reg_2709,
        din5 => iqtmp_5_5_reg_2714,
        din6 => iqtmp_6_5_reg_2719,
        din7 => iqtmp_7_5_reg_2724,
        din8 => iqtmp_8_5_reg_2729,
        din9 => iqtmp_9_5_reg_2734,
        din10 => iqtmp_10_5_reg_2739,
        din11 => iqtmp_11_5_reg_2744,
        din12 => iqtmp_12_5_reg_2749,
        din13 => iqtmp_13_5_reg_2754,
        din14 => iqtmp_14_5_reg_2759,
        din15 => iqtmp_15_5_reg_2764,
        din16 => trunc_ln9_5_reg_2224_pp0_iter3_reg,
        dout => tmp_8_fu_2051_p18);

    mux_164_32_1_1_U7 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_6_reg_2769,
        din1 => iqtmp_1_6_reg_2774,
        din2 => iqtmp_2_6_reg_2779,
        din3 => iqtmp_3_6_reg_2784,
        din4 => iqtmp_4_6_reg_2789,
        din5 => iqtmp_5_6_reg_2794,
        din6 => iqtmp_6_6_reg_2799,
        din7 => iqtmp_7_6_reg_2804,
        din8 => iqtmp_8_6_reg_2809,
        din9 => iqtmp_9_6_reg_2814,
        din10 => iqtmp_10_6_reg_2819,
        din11 => iqtmp_11_6_reg_2824,
        din12 => iqtmp_12_6_reg_2829,
        din13 => iqtmp_13_6_reg_2834,
        din14 => iqtmp_14_6_reg_2839,
        din15 => iqtmp_15_6_reg_2844,
        din16 => trunc_ln9_6_reg_2234_pp0_iter3_reg,
        dout => tmp_9_fu_2072_p18);

    mux_164_32_1_1_U8 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_7_reg_2849,
        din1 => iqtmp_1_7_reg_2854,
        din2 => iqtmp_2_7_reg_2859,
        din3 => iqtmp_3_7_reg_2864,
        din4 => iqtmp_4_7_reg_2869,
        din5 => iqtmp_5_7_reg_2874,
        din6 => iqtmp_6_7_reg_2879,
        din7 => iqtmp_7_7_reg_2884,
        din8 => iqtmp_8_7_reg_2889,
        din9 => iqtmp_9_7_reg_2894,
        din10 => iqtmp_10_7_reg_2899,
        din11 => iqtmp_11_7_reg_2904,
        din12 => iqtmp_12_7_reg_2909,
        din13 => iqtmp_13_7_reg_2914,
        din14 => iqtmp_14_7_reg_2919,
        din15 => iqtmp_15_7_reg_2924,
        din16 => trunc_ln9_7_reg_2244_pp0_iter3_reg,
        dout => tmp_s_fu_2093_p18);

    regslice_both_iq_stream_V_data_V_U : component bin_to_res_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iq_stream_TDATA,
        vld_in => iq_stream_TVALID,
        ack_in => regslice_both_iq_stream_V_data_V_U_ack_in,
        data_out => iq_stream_TDATA_int_regslice,
        vld_out => iq_stream_TVALID_int_regslice,
        ack_out => iq_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_iq_stream_V_data_V_U_apdone_blk);

    regslice_both_iq_stream_V_keep_V_U : component bin_to_res_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iq_stream_TKEEP,
        vld_in => iq_stream_TVALID,
        ack_in => regslice_both_iq_stream_V_keep_V_U_ack_in,
        data_out => iq_stream_TKEEP_int_regslice,
        vld_out => regslice_both_iq_stream_V_keep_V_U_vld_out,
        ack_out => iq_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_iq_stream_V_keep_V_U_apdone_blk);

    regslice_both_iq_stream_V_strb_V_U : component bin_to_res_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iq_stream_TSTRB,
        vld_in => iq_stream_TVALID,
        ack_in => regslice_both_iq_stream_V_strb_V_U_ack_in,
        data_out => iq_stream_TSTRB_int_regslice,
        vld_out => regslice_both_iq_stream_V_strb_V_U_vld_out,
        ack_out => iq_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_iq_stream_V_strb_V_U_apdone_blk);

    regslice_both_iq_stream_V_last_V_U : component bin_to_res_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iq_stream_TLAST,
        vld_in => iq_stream_TVALID,
        ack_in => regslice_both_iq_stream_V_last_V_U_ack_in,
        data_out => iq_stream_TLAST_int_regslice,
        vld_out => regslice_both_iq_stream_V_last_V_U_vld_out,
        ack_out => iq_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_iq_stream_V_last_V_U_apdone_blk);

    regslice_both_res_stream_V_data_V_U : component bin_to_res_regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => res_stream_TDATA_int_regslice,
        vld_in => res_stream_TVALID_int_regslice,
        ack_in => res_stream_TREADY_int_regslice,
        data_out => res_stream_TDATA,
        vld_out => regslice_both_res_stream_V_data_V_U_vld_out,
        ack_out => res_stream_TREADY,
        apdone_blk => regslice_both_res_stream_V_data_V_U_apdone_blk);

    regslice_both_res_stream_V_keep_V_U : component bin_to_res_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv32_0,
        vld_in => res_stream_TVALID_int_regslice,
        ack_in => regslice_both_res_stream_V_keep_V_U_ack_in_dummy,
        data_out => res_stream_TKEEP,
        vld_out => regslice_both_res_stream_V_keep_V_U_vld_out,
        ack_out => res_stream_TREADY,
        apdone_blk => regslice_both_res_stream_V_keep_V_U_apdone_blk);

    regslice_both_res_stream_V_strb_V_U : component bin_to_res_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv32_0,
        vld_in => res_stream_TVALID_int_regslice,
        ack_in => regslice_both_res_stream_V_strb_V_U_ack_in_dummy,
        data_out => res_stream_TSTRB,
        vld_out => regslice_both_res_stream_V_strb_V_U_vld_out,
        ack_out => res_stream_TREADY,
        apdone_blk => regslice_both_res_stream_V_strb_V_U_apdone_blk);

    regslice_both_res_stream_V_user_V_U : component bin_to_res_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_tmp_user_V_reg_2158_pp0_iter3_reg,
        vld_in => res_stream_TVALID_int_regslice,
        ack_in => regslice_both_res_stream_V_user_V_U_ack_in_dummy,
        data_out => res_stream_TUSER,
        vld_out => regslice_both_res_stream_V_user_V_U_vld_out,
        ack_out => res_stream_TREADY,
        apdone_blk => regslice_both_res_stream_V_user_V_U_apdone_blk);

    regslice_both_res_stream_V_last_V_U : component bin_to_res_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => res_stream_TLAST_int_regslice,
        vld_in => res_stream_TVALID_int_regslice,
        ack_in => regslice_both_res_stream_V_last_V_U_ack_in_dummy,
        data_out => res_stream_TLAST,
        vld_out => regslice_both_res_stream_V_last_V_U_vld_out,
        ack_out => res_stream_TREADY,
        apdone_blk => regslice_both_res_stream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then
                cache_group_V <= select_ln63_fu_503_p3;
                replay_group_V <= add_ln870_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cache_group_V_load_reg_2153 <= cache_group_V;
                lshr_ln1543_1_reg_2179 <= rid_to_bin_q0(23 downto 16);
                lshr_ln1543_2_reg_2189 <= rid_to_bin_q0(35 downto 28);
                lshr_ln1543_3_reg_2199 <= rid_to_bin_q0(47 downto 40);
                lshr_ln1543_4_reg_2209 <= rid_to_bin_q0(59 downto 52);
                lshr_ln1543_5_reg_2219 <= rid_to_bin_q0(71 downto 64);
                lshr_ln1543_6_reg_2229 <= rid_to_bin_q0(83 downto 76);
                lshr_ln1543_7_reg_2239 <= rid_to_bin_q0(95 downto 88);
                lshr_ln_reg_2169 <= rid_to_bin_q0(11 downto 4);
                output_tmp_user_V_reg_2158 <= replay_group_V;
                output_tmp_user_V_reg_2158_pp0_iter1_reg <= output_tmp_user_V_reg_2158;
                tmp_11_reg_2141 <= iq_stream_TDATA_int_regslice;
                trunc_ln9_1_reg_2184 <= rid_to_bin_q0(15 downto 12);
                trunc_ln9_2_reg_2194 <= rid_to_bin_q0(27 downto 24);
                trunc_ln9_3_reg_2204 <= rid_to_bin_q0(39 downto 36);
                trunc_ln9_4_reg_2214 <= rid_to_bin_q0(51 downto 48);
                trunc_ln9_5_reg_2224 <= rid_to_bin_q0(63 downto 60);
                trunc_ln9_6_reg_2234 <= rid_to_bin_q0(75 downto 72);
                trunc_ln9_7_reg_2244 <= rid_to_bin_q0(87 downto 84);
                trunc_ln9_reg_2174 <= trunc_ln9_fu_538_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                iqtmp_0_1_reg_2369 <= iqtmp_0_1_fu_868_p1;
                iqtmp_0_2_reg_2449 <= iqtmp_0_2_fu_1022_p1;
                iqtmp_0_3_reg_2529 <= iqtmp_0_3_fu_1176_p1;
                iqtmp_0_4_reg_2609 <= iqtmp_0_4_fu_1330_p1;
                iqtmp_0_5_reg_2689 <= iqtmp_0_5_fu_1484_p1;
                iqtmp_0_6_reg_2769 <= iqtmp_0_6_fu_1638_p1;
                iqtmp_0_7_reg_2849 <= iqtmp_0_7_fu_1792_p1;
                iqtmp_0_reg_2289 <= iqtmp_0_fu_714_p1;
                iqtmp_10_1_reg_2419 <= cache_V_1_q1(351 downto 320);
                iqtmp_10_2_reg_2499 <= cache_V_2_q1(351 downto 320);
                iqtmp_10_3_reg_2579 <= cache_V_3_q1(351 downto 320);
                iqtmp_10_4_reg_2659 <= cache_V_4_q1(351 downto 320);
                iqtmp_10_5_reg_2739 <= cache_V_5_q1(351 downto 320);
                iqtmp_10_6_reg_2819 <= cache_V_6_q1(351 downto 320);
                iqtmp_10_7_reg_2899 <= cache_V_7_q1(351 downto 320);
                iqtmp_10_reg_2339 <= cache_V_0_q1(351 downto 320);
                iqtmp_11_1_reg_2424 <= cache_V_1_q1(383 downto 352);
                iqtmp_11_2_reg_2504 <= cache_V_2_q1(383 downto 352);
                iqtmp_11_3_reg_2584 <= cache_V_3_q1(383 downto 352);
                iqtmp_11_4_reg_2664 <= cache_V_4_q1(383 downto 352);
                iqtmp_11_5_reg_2744 <= cache_V_5_q1(383 downto 352);
                iqtmp_11_6_reg_2824 <= cache_V_6_q1(383 downto 352);
                iqtmp_11_7_reg_2904 <= cache_V_7_q1(383 downto 352);
                iqtmp_11_reg_2344 <= cache_V_0_q1(383 downto 352);
                iqtmp_12_1_reg_2429 <= cache_V_1_q1(415 downto 384);
                iqtmp_12_2_reg_2509 <= cache_V_2_q1(415 downto 384);
                iqtmp_12_3_reg_2589 <= cache_V_3_q1(415 downto 384);
                iqtmp_12_4_reg_2669 <= cache_V_4_q1(415 downto 384);
                iqtmp_12_5_reg_2749 <= cache_V_5_q1(415 downto 384);
                iqtmp_12_6_reg_2829 <= cache_V_6_q1(415 downto 384);
                iqtmp_12_7_reg_2909 <= cache_V_7_q1(415 downto 384);
                iqtmp_12_reg_2349 <= cache_V_0_q1(415 downto 384);
                iqtmp_13_1_reg_2434 <= cache_V_1_q1(447 downto 416);
                iqtmp_13_2_reg_2514 <= cache_V_2_q1(447 downto 416);
                iqtmp_13_3_reg_2594 <= cache_V_3_q1(447 downto 416);
                iqtmp_13_4_reg_2674 <= cache_V_4_q1(447 downto 416);
                iqtmp_13_5_reg_2754 <= cache_V_5_q1(447 downto 416);
                iqtmp_13_6_reg_2834 <= cache_V_6_q1(447 downto 416);
                iqtmp_13_7_reg_2914 <= cache_V_7_q1(447 downto 416);
                iqtmp_13_reg_2354 <= cache_V_0_q1(447 downto 416);
                iqtmp_14_1_reg_2439 <= cache_V_1_q1(479 downto 448);
                iqtmp_14_2_reg_2519 <= cache_V_2_q1(479 downto 448);
                iqtmp_14_3_reg_2599 <= cache_V_3_q1(479 downto 448);
                iqtmp_14_4_reg_2679 <= cache_V_4_q1(479 downto 448);
                iqtmp_14_5_reg_2759 <= cache_V_5_q1(479 downto 448);
                iqtmp_14_6_reg_2839 <= cache_V_6_q1(479 downto 448);
                iqtmp_14_7_reg_2919 <= cache_V_7_q1(479 downto 448);
                iqtmp_14_reg_2359 <= cache_V_0_q1(479 downto 448);
                iqtmp_15_1_reg_2444 <= cache_V_1_q1(511 downto 480);
                iqtmp_15_2_reg_2524 <= cache_V_2_q1(511 downto 480);
                iqtmp_15_3_reg_2604 <= cache_V_3_q1(511 downto 480);
                iqtmp_15_4_reg_2684 <= cache_V_4_q1(511 downto 480);
                iqtmp_15_5_reg_2764 <= cache_V_5_q1(511 downto 480);
                iqtmp_15_6_reg_2844 <= cache_V_6_q1(511 downto 480);
                iqtmp_15_7_reg_2924 <= cache_V_7_q1(511 downto 480);
                iqtmp_15_reg_2364 <= cache_V_0_q1(511 downto 480);
                iqtmp_1_1_reg_2374 <= cache_V_1_q1(63 downto 32);
                iqtmp_1_2_reg_2454 <= cache_V_2_q1(63 downto 32);
                iqtmp_1_3_reg_2534 <= cache_V_3_q1(63 downto 32);
                iqtmp_1_4_reg_2614 <= cache_V_4_q1(63 downto 32);
                iqtmp_1_5_reg_2694 <= cache_V_5_q1(63 downto 32);
                iqtmp_1_6_reg_2774 <= cache_V_6_q1(63 downto 32);
                iqtmp_1_7_reg_2854 <= cache_V_7_q1(63 downto 32);
                iqtmp_1_reg_2294 <= cache_V_0_q1(63 downto 32);
                iqtmp_2_1_reg_2379 <= cache_V_1_q1(95 downto 64);
                iqtmp_2_2_reg_2459 <= cache_V_2_q1(95 downto 64);
                iqtmp_2_3_reg_2539 <= cache_V_3_q1(95 downto 64);
                iqtmp_2_4_reg_2619 <= cache_V_4_q1(95 downto 64);
                iqtmp_2_5_reg_2699 <= cache_V_5_q1(95 downto 64);
                iqtmp_2_6_reg_2779 <= cache_V_6_q1(95 downto 64);
                iqtmp_2_7_reg_2859 <= cache_V_7_q1(95 downto 64);
                iqtmp_2_reg_2299 <= cache_V_0_q1(95 downto 64);
                iqtmp_3_1_reg_2384 <= cache_V_1_q1(127 downto 96);
                iqtmp_3_2_reg_2464 <= cache_V_2_q1(127 downto 96);
                iqtmp_3_3_reg_2544 <= cache_V_3_q1(127 downto 96);
                iqtmp_3_4_reg_2624 <= cache_V_4_q1(127 downto 96);
                iqtmp_3_5_reg_2704 <= cache_V_5_q1(127 downto 96);
                iqtmp_3_6_reg_2784 <= cache_V_6_q1(127 downto 96);
                iqtmp_3_7_reg_2864 <= cache_V_7_q1(127 downto 96);
                iqtmp_3_reg_2304 <= cache_V_0_q1(127 downto 96);
                iqtmp_4_1_reg_2389 <= cache_V_1_q1(159 downto 128);
                iqtmp_4_2_reg_2469 <= cache_V_2_q1(159 downto 128);
                iqtmp_4_3_reg_2549 <= cache_V_3_q1(159 downto 128);
                iqtmp_4_4_reg_2629 <= cache_V_4_q1(159 downto 128);
                iqtmp_4_5_reg_2709 <= cache_V_5_q1(159 downto 128);
                iqtmp_4_6_reg_2789 <= cache_V_6_q1(159 downto 128);
                iqtmp_4_7_reg_2869 <= cache_V_7_q1(159 downto 128);
                iqtmp_4_reg_2309 <= cache_V_0_q1(159 downto 128);
                iqtmp_5_1_reg_2394 <= cache_V_1_q1(191 downto 160);
                iqtmp_5_2_reg_2474 <= cache_V_2_q1(191 downto 160);
                iqtmp_5_3_reg_2554 <= cache_V_3_q1(191 downto 160);
                iqtmp_5_4_reg_2634 <= cache_V_4_q1(191 downto 160);
                iqtmp_5_5_reg_2714 <= cache_V_5_q1(191 downto 160);
                iqtmp_5_6_reg_2794 <= cache_V_6_q1(191 downto 160);
                iqtmp_5_7_reg_2874 <= cache_V_7_q1(191 downto 160);
                iqtmp_5_reg_2314 <= cache_V_0_q1(191 downto 160);
                iqtmp_6_1_reg_2399 <= cache_V_1_q1(223 downto 192);
                iqtmp_6_2_reg_2479 <= cache_V_2_q1(223 downto 192);
                iqtmp_6_3_reg_2559 <= cache_V_3_q1(223 downto 192);
                iqtmp_6_4_reg_2639 <= cache_V_4_q1(223 downto 192);
                iqtmp_6_5_reg_2719 <= cache_V_5_q1(223 downto 192);
                iqtmp_6_6_reg_2799 <= cache_V_6_q1(223 downto 192);
                iqtmp_6_7_reg_2879 <= cache_V_7_q1(223 downto 192);
                iqtmp_6_reg_2319 <= cache_V_0_q1(223 downto 192);
                iqtmp_7_1_reg_2404 <= cache_V_1_q1(255 downto 224);
                iqtmp_7_2_reg_2484 <= cache_V_2_q1(255 downto 224);
                iqtmp_7_3_reg_2564 <= cache_V_3_q1(255 downto 224);
                iqtmp_7_4_reg_2644 <= cache_V_4_q1(255 downto 224);
                iqtmp_7_5_reg_2724 <= cache_V_5_q1(255 downto 224);
                iqtmp_7_6_reg_2804 <= cache_V_6_q1(255 downto 224);
                iqtmp_7_7_reg_2884 <= cache_V_7_q1(255 downto 224);
                iqtmp_7_reg_2324 <= cache_V_0_q1(255 downto 224);
                iqtmp_8_1_reg_2409 <= cache_V_1_q1(287 downto 256);
                iqtmp_8_2_reg_2489 <= cache_V_2_q1(287 downto 256);
                iqtmp_8_3_reg_2569 <= cache_V_3_q1(287 downto 256);
                iqtmp_8_4_reg_2649 <= cache_V_4_q1(287 downto 256);
                iqtmp_8_5_reg_2729 <= cache_V_5_q1(287 downto 256);
                iqtmp_8_6_reg_2809 <= cache_V_6_q1(287 downto 256);
                iqtmp_8_7_reg_2889 <= cache_V_7_q1(287 downto 256);
                iqtmp_8_reg_2329 <= cache_V_0_q1(287 downto 256);
                iqtmp_9_1_reg_2414 <= cache_V_1_q1(319 downto 288);
                iqtmp_9_2_reg_2494 <= cache_V_2_q1(319 downto 288);
                iqtmp_9_3_reg_2574 <= cache_V_3_q1(319 downto 288);
                iqtmp_9_4_reg_2654 <= cache_V_4_q1(319 downto 288);
                iqtmp_9_5_reg_2734 <= cache_V_5_q1(319 downto 288);
                iqtmp_9_6_reg_2814 <= cache_V_6_q1(319 downto 288);
                iqtmp_9_7_reg_2894 <= cache_V_7_q1(319 downto 288);
                iqtmp_9_reg_2334 <= cache_V_0_q1(319 downto 288);
                output_tmp_user_V_reg_2158_pp0_iter2_reg <= output_tmp_user_V_reg_2158_pp0_iter1_reg;
                output_tmp_user_V_reg_2158_pp0_iter3_reg <= output_tmp_user_V_reg_2158_pp0_iter2_reg;
                trunc_ln9_1_reg_2184_pp0_iter2_reg <= trunc_ln9_1_reg_2184;
                trunc_ln9_1_reg_2184_pp0_iter3_reg <= trunc_ln9_1_reg_2184_pp0_iter2_reg;
                trunc_ln9_2_reg_2194_pp0_iter2_reg <= trunc_ln9_2_reg_2194;
                trunc_ln9_2_reg_2194_pp0_iter3_reg <= trunc_ln9_2_reg_2194_pp0_iter2_reg;
                trunc_ln9_3_reg_2204_pp0_iter2_reg <= trunc_ln9_3_reg_2204;
                trunc_ln9_3_reg_2204_pp0_iter3_reg <= trunc_ln9_3_reg_2204_pp0_iter2_reg;
                trunc_ln9_4_reg_2214_pp0_iter2_reg <= trunc_ln9_4_reg_2214;
                trunc_ln9_4_reg_2214_pp0_iter3_reg <= trunc_ln9_4_reg_2214_pp0_iter2_reg;
                trunc_ln9_5_reg_2224_pp0_iter2_reg <= trunc_ln9_5_reg_2224;
                trunc_ln9_5_reg_2224_pp0_iter3_reg <= trunc_ln9_5_reg_2224_pp0_iter2_reg;
                trunc_ln9_6_reg_2234_pp0_iter2_reg <= trunc_ln9_6_reg_2234;
                trunc_ln9_6_reg_2234_pp0_iter3_reg <= trunc_ln9_6_reg_2234_pp0_iter2_reg;
                trunc_ln9_7_reg_2244_pp0_iter2_reg <= trunc_ln9_7_reg_2244;
                trunc_ln9_7_reg_2244_pp0_iter3_reg <= trunc_ln9_7_reg_2244_pp0_iter2_reg;
                trunc_ln9_reg_2174_pp0_iter2_reg <= trunc_ln9_reg_2174;
                trunc_ln9_reg_2174_pp0_iter3_reg <= trunc_ln9_reg_2174_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln223_fu_497_p2 <= std_logic_vector(unsigned(cache_group_V) + unsigned(ap_const_lv8_1));
    add_ln870_fu_485_p2 <= std_logic_vector(unsigned(replay_group_V) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, regslice_both_res_stream_V_data_V_U_apdone_blk, iq_stream_TVALID_int_regslice, res_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((res_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((iq_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((regslice_both_res_stream_V_data_V_U_apdone_blk = ap_const_logic_1) or (res_stream_TREADY_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, regslice_both_res_stream_V_data_V_U_apdone_blk, iq_stream_TVALID_int_regslice, res_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((res_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((iq_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((regslice_both_res_stream_V_data_V_U_apdone_blk = ap_const_logic_1) or (res_stream_TREADY_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, regslice_both_res_stream_V_data_V_U_apdone_blk, iq_stream_TVALID_int_regslice, res_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((res_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((iq_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((regslice_both_res_stream_V_data_V_U_apdone_blk = ap_const_logic_1) or (res_stream_TREADY_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(iq_stream_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (iq_stream_TVALID_int_regslice = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(res_stream_TREADY_int_regslice)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (res_stream_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state6_pp0_stage0_iter5_assign_proc : process(regslice_both_res_stream_V_data_V_U_apdone_blk, res_stream_TREADY_int_regslice)
    begin
                ap_block_state6_pp0_stage0_iter5 <= ((regslice_both_res_stream_V_data_V_U_apdone_blk = ap_const_logic_1) or (res_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_axi_clk_inv_assign_proc : process(ap_rst_n_axi_clk)
    begin
                ap_rst_n_axi_clk_inv <= not(ap_rst_n_axi_clk);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cache_V_0_address0 <= conv_i65_fu_517_p1(8 - 1 downto 0);
    cache_V_0_address1 <= zext_ln52_fu_682_p1(8 - 1 downto 0);

    cache_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_0_ce0 <= ap_const_logic_1;
        else 
            cache_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_0_ce1 <= ap_const_logic_1;
        else 
            cache_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_0_we0 <= ap_const_logic_1;
        else 
            cache_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_1_address0 <= conv_i65_fu_517_p1(8 - 1 downto 0);
    cache_V_1_address1 <= zext_ln52_1_fu_686_p1(8 - 1 downto 0);

    cache_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_1_ce0 <= ap_const_logic_1;
        else 
            cache_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_1_ce1 <= ap_const_logic_1;
        else 
            cache_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_1_we0 <= ap_const_logic_1;
        else 
            cache_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_2_address0 <= conv_i65_fu_517_p1(8 - 1 downto 0);
    cache_V_2_address1 <= zext_ln52_2_fu_690_p1(8 - 1 downto 0);

    cache_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_2_ce0 <= ap_const_logic_1;
        else 
            cache_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_2_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_2_ce1 <= ap_const_logic_1;
        else 
            cache_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_2_we0 <= ap_const_logic_1;
        else 
            cache_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_3_address0 <= conv_i65_fu_517_p1(8 - 1 downto 0);
    cache_V_3_address1 <= zext_ln52_3_fu_694_p1(8 - 1 downto 0);

    cache_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_3_ce0 <= ap_const_logic_1;
        else 
            cache_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_3_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_3_ce1 <= ap_const_logic_1;
        else 
            cache_V_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_3_we0 <= ap_const_logic_1;
        else 
            cache_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_4_address0 <= conv_i65_fu_517_p1(8 - 1 downto 0);
    cache_V_4_address1 <= zext_ln52_4_fu_698_p1(8 - 1 downto 0);

    cache_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_4_ce0 <= ap_const_logic_1;
        else 
            cache_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_4_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_4_ce1 <= ap_const_logic_1;
        else 
            cache_V_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_4_we0 <= ap_const_logic_1;
        else 
            cache_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_5_address0 <= conv_i65_fu_517_p1(8 - 1 downto 0);
    cache_V_5_address1 <= zext_ln52_5_fu_702_p1(8 - 1 downto 0);

    cache_V_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_5_ce0 <= ap_const_logic_1;
        else 
            cache_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_5_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_5_ce1 <= ap_const_logic_1;
        else 
            cache_V_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_5_we0 <= ap_const_logic_1;
        else 
            cache_V_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_6_address0 <= conv_i65_fu_517_p1(8 - 1 downto 0);
    cache_V_6_address1 <= zext_ln52_6_fu_706_p1(8 - 1 downto 0);

    cache_V_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_6_ce0 <= ap_const_logic_1;
        else 
            cache_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_6_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_6_ce1 <= ap_const_logic_1;
        else 
            cache_V_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_6_we0 <= ap_const_logic_1;
        else 
            cache_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_7_address0 <= conv_i65_fu_517_p1(8 - 1 downto 0);
    cache_V_7_address1 <= zext_ln52_7_fu_710_p1(8 - 1 downto 0);

    cache_V_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_7_ce0 <= ap_const_logic_1;
        else 
            cache_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_7_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_7_ce1 <= ap_const_logic_1;
        else 
            cache_V_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_7_we0 <= ap_const_logic_1;
        else 
            cache_V_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_i65_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cache_group_V_load_reg_2153),64));

    iq_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, iq_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq_stream_TDATA_blk_n <= iq_stream_TVALID_int_regslice;
        else 
            iq_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_stream_TREADY <= regslice_both_iq_stream_V_data_V_U_ack_in;

    iq_stream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq_stream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            iq_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    iqtmp_0_1_fu_868_p1 <= cache_V_1_q1(32 - 1 downto 0);
    iqtmp_0_2_fu_1022_p1 <= cache_V_2_q1(32 - 1 downto 0);
    iqtmp_0_3_fu_1176_p1 <= cache_V_3_q1(32 - 1 downto 0);
    iqtmp_0_4_fu_1330_p1 <= cache_V_4_q1(32 - 1 downto 0);
    iqtmp_0_5_fu_1484_p1 <= cache_V_5_q1(32 - 1 downto 0);
    iqtmp_0_6_fu_1638_p1 <= cache_V_6_q1(32 - 1 downto 0);
    iqtmp_0_7_fu_1792_p1 <= cache_V_7_q1(32 - 1 downto 0);
    iqtmp_0_fu_714_p1 <= cache_V_0_q1(32 - 1 downto 0);

    res_stream_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, res_stream_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            res_stream_TDATA_blk_n <= res_stream_TREADY_int_regslice;
        else 
            res_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_TDATA_int_regslice <= (((((((tmp_s_fu_2093_p18 & tmp_9_fu_2072_p18) & tmp_8_fu_2051_p18) & tmp_7_fu_2030_p18) & tmp_6_fu_2009_p18) & tmp_5_fu_1988_p18) & tmp_4_fu_1967_p18) & tmp_fu_1946_p18);
    res_stream_TLAST_int_regslice <= "1" when (output_tmp_user_V_reg_2158_pp0_iter3_reg = ap_const_lv8_FF) else "0";
    res_stream_TVALID <= regslice_both_res_stream_V_data_V_U_vld_out;

    res_stream_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            res_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    rid_to_bin_address0 <= zext_ln573_fu_480_p1(8 - 1 downto 0);

    rid_to_bin_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
            rid_to_bin_ce0 <= ap_const_logic_1;
        else 
            rid_to_bin_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln63_fu_503_p3 <= 
        ap_const_lv8_0 when (iq_stream_TLAST_int_regslice(0) = '1') else 
        add_ln223_fu_497_p2;
    trunc_ln9_fu_538_p1 <= rid_to_bin_q0(4 - 1 downto 0);
    zext_ln52_1_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1543_1_reg_2179),64));
    zext_ln52_2_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1543_2_reg_2189),64));
    zext_ln52_3_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1543_3_reg_2199),64));
    zext_ln52_4_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1543_4_reg_2209),64));
    zext_ln52_5_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1543_5_reg_2219),64));
    zext_ln52_6_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1543_6_reg_2229),64));
    zext_ln52_7_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1543_7_reg_2239),64));
    zext_ln52_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_2169),64));
    zext_ln573_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(replay_group_V),64));
end behav;
