-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bin_to_res is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    iq_stream_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    iq_stream_TVALID : IN STD_LOGIC;
    iq_stream_TREADY : OUT STD_LOGIC;
    iq_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    res_stream_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    res_stream_TVALID : OUT STD_LOGIC;
    res_stream_TREADY : IN STD_LOGIC;
    res_stream_TUSER : OUT STD_LOGIC_VECTOR (7 downto 0);
    res_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of bin_to_res is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bin_to_res_bin_to_res,hls_ip_2020_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.237000,HLS_SYN_LAT=5,HLS_SYN_TPT=1,HLS_SYN_MEM=128,HLS_SYN_DSP=0,HLS_SYN_FF=5428,HLS_SYN_LUT=991,HLS_VERSION=2020_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal resmap_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal resmap_ce0 : STD_LOGIC;
    signal resmap_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal cache_group : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal cache_V_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_0_ce0 : STD_LOGIC;
    signal cache_V_0_we0 : STD_LOGIC;
    signal cache_V_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_0_ce1 : STD_LOGIC;
    signal cache_V_0_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_1_ce0 : STD_LOGIC;
    signal cache_V_1_we0 : STD_LOGIC;
    signal cache_V_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_1_ce1 : STD_LOGIC;
    signal cache_V_1_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_2_ce0 : STD_LOGIC;
    signal cache_V_2_we0 : STD_LOGIC;
    signal cache_V_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_2_ce1 : STD_LOGIC;
    signal cache_V_2_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_3_ce0 : STD_LOGIC;
    signal cache_V_3_we0 : STD_LOGIC;
    signal cache_V_3_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_3_ce1 : STD_LOGIC;
    signal cache_V_3_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_4_ce0 : STD_LOGIC;
    signal cache_V_4_we0 : STD_LOGIC;
    signal cache_V_4_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_4_ce1 : STD_LOGIC;
    signal cache_V_4_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_5_ce0 : STD_LOGIC;
    signal cache_V_5_we0 : STD_LOGIC;
    signal cache_V_5_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_5_ce1 : STD_LOGIC;
    signal cache_V_5_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_6_ce0 : STD_LOGIC;
    signal cache_V_6_we0 : STD_LOGIC;
    signal cache_V_6_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_6_ce1 : STD_LOGIC;
    signal cache_V_6_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal cache_V_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_7_ce0 : STD_LOGIC;
    signal cache_V_7_we0 : STD_LOGIC;
    signal cache_V_7_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cache_V_7_ce1 : STD_LOGIC;
    signal cache_V_7_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal replay_group : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal iq_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal res_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal iq_in_data_V_reg_2119 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal regslice_both_res_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal cache_group_load_reg_2131 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_tmp_user_V_reg_2136 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_tmp_user_V_reg_2136_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_tmp_user_V_reg_2136_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal output_tmp_user_V_reg_2136_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_fu_516_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_reg_2152 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_reg_2152_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_reg_2152_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1368_1_reg_2157 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_1_reg_2162 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_1_reg_2162_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_1_reg_2162_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1368_2_reg_2167 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_2_reg_2172 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_2_reg_2172_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_2_reg_2172_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1368_3_reg_2177 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_3_reg_2182 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_3_reg_2182_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_3_reg_2182_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1368_4_reg_2187 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_4_reg_2192 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_4_reg_2192_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_4_reg_2192_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1368_5_reg_2197 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_5_reg_2202 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_5_reg_2202_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_5_reg_2202_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1368_6_reg_2207 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_6_reg_2212 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_6_reg_2212_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_6_reg_2212_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1368_7_reg_2217 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_7_reg_2222 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_7_reg_2222_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_7_reg_2222_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal iqtmp_0_fu_692_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_reg_2267 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_reg_2272 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_reg_2277 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_reg_2282 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_reg_2287 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_reg_2292 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_reg_2297 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_reg_2302 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_reg_2307 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_reg_2312 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_reg_2317 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_reg_2322 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_reg_2327 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_reg_2332 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_reg_2337 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_reg_2342 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_1_fu_846_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_1_reg_2347 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_1_reg_2352 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_1_reg_2357 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_1_reg_2362 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_1_reg_2367 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_1_reg_2372 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_1_reg_2377 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_1_reg_2382 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_1_reg_2387 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_1_reg_2392 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_1_reg_2397 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_1_reg_2402 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_1_reg_2407 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_1_reg_2412 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_1_reg_2417 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_1_reg_2422 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_2_fu_1000_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_2_reg_2427 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_2_reg_2432 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_2_reg_2437 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_2_reg_2442 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_2_reg_2447 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_2_reg_2452 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_2_reg_2457 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_2_reg_2462 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_2_reg_2467 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_2_reg_2472 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_2_reg_2477 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_2_reg_2482 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_2_reg_2487 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_2_reg_2492 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_2_reg_2497 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_2_reg_2502 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_3_fu_1154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_3_reg_2507 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_3_reg_2512 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_3_reg_2517 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_3_reg_2522 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_3_reg_2527 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_3_reg_2532 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_3_reg_2537 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_3_reg_2542 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_3_reg_2547 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_3_reg_2552 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_3_reg_2557 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_3_reg_2562 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_3_reg_2567 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_3_reg_2572 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_3_reg_2577 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_3_reg_2582 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_4_fu_1308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_4_reg_2587 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_4_reg_2592 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_4_reg_2597 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_4_reg_2602 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_4_reg_2607 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_4_reg_2612 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_4_reg_2617 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_4_reg_2622 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_4_reg_2627 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_4_reg_2632 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_4_reg_2637 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_4_reg_2642 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_4_reg_2647 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_4_reg_2652 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_4_reg_2657 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_4_reg_2662 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_5_fu_1462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_5_reg_2667 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_5_reg_2672 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_5_reg_2677 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_5_reg_2682 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_5_reg_2687 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_5_reg_2692 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_5_reg_2697 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_5_reg_2702 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_5_reg_2707 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_5_reg_2712 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_5_reg_2717 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_5_reg_2722 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_5_reg_2727 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_5_reg_2732 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_5_reg_2737 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_5_reg_2742 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_6_fu_1616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_6_reg_2747 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_6_reg_2752 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_6_reg_2757 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_6_reg_2762 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_6_reg_2767 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_6_reg_2772 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_6_reg_2777 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_6_reg_2782 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_6_reg_2787 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_6_reg_2792 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_6_reg_2797 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_6_reg_2802 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_6_reg_2807 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_6_reg_2812 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_6_reg_2817 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_6_reg_2822 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_7_fu_1770_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_0_7_reg_2827 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_1_7_reg_2832 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_2_7_reg_2837 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_3_7_reg_2842 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_4_7_reg_2847 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_5_7_reg_2852 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_6_7_reg_2857 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_7_7_reg_2862 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_8_7_reg_2867 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_9_7_reg_2872 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_10_7_reg_2877 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_11_7_reg_2882 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_12_7_reg_2887 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_13_7_reg_2892 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_14_7_reg_2897 : STD_LOGIC_VECTOR (31 downto 0);
    signal iqtmp_15_7_reg_2902 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal zext_ln538_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i67_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_1_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_2_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_3_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_4_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_5_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_6_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_7_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln63_fu_481_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln695_fu_463_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln216_fu_475_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_2071_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_2050_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_2029_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_2008_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1987_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1966_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1945_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1924_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_iq_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal iq_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal iq_stream_TVALID_int_regslice : STD_LOGIC;
    signal iq_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_iq_stream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_iq_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal iq_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_iq_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_iq_stream_V_last_V_U_ack_in : STD_LOGIC;
    signal res_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (255 downto 0);
    signal res_stream_TVALID_int_regslice : STD_LOGIC;
    signal res_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_res_stream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_stream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_stream_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_res_stream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_res_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal res_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_res_stream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_res_stream_V_last_V_U_vld_out : STD_LOGIC;

    component bin_to_res_mux_164_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bin_to_res_cache_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component bin_to_res_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        resmap_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        resmap_ce0 : IN STD_LOGIC;
        resmap_q0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    cache_V_0_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_0_address0,
        ce0 => cache_V_0_ce0,
        we0 => cache_V_0_we0,
        d0 => iq_in_data_V_reg_2119,
        address1 => cache_V_0_address1,
        ce1 => cache_V_0_ce1,
        q1 => cache_V_0_q1);

    cache_V_1_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_1_address0,
        ce0 => cache_V_1_ce0,
        we0 => cache_V_1_we0,
        d0 => iq_in_data_V_reg_2119,
        address1 => cache_V_1_address1,
        ce1 => cache_V_1_ce1,
        q1 => cache_V_1_q1);

    cache_V_2_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_2_address0,
        ce0 => cache_V_2_ce0,
        we0 => cache_V_2_we0,
        d0 => iq_in_data_V_reg_2119,
        address1 => cache_V_2_address1,
        ce1 => cache_V_2_ce1,
        q1 => cache_V_2_q1);

    cache_V_3_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_3_address0,
        ce0 => cache_V_3_ce0,
        we0 => cache_V_3_we0,
        d0 => iq_in_data_V_reg_2119,
        address1 => cache_V_3_address1,
        ce1 => cache_V_3_ce1,
        q1 => cache_V_3_q1);

    cache_V_4_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_4_address0,
        ce0 => cache_V_4_ce0,
        we0 => cache_V_4_we0,
        d0 => iq_in_data_V_reg_2119,
        address1 => cache_V_4_address1,
        ce1 => cache_V_4_ce1,
        q1 => cache_V_4_q1);

    cache_V_5_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_5_address0,
        ce0 => cache_V_5_ce0,
        we0 => cache_V_5_we0,
        d0 => iq_in_data_V_reg_2119,
        address1 => cache_V_5_address1,
        ce1 => cache_V_5_ce1,
        q1 => cache_V_5_q1);

    cache_V_6_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_6_address0,
        ce0 => cache_V_6_ce0,
        we0 => cache_V_6_we0,
        d0 => iq_in_data_V_reg_2119,
        address1 => cache_V_6_address1,
        ce1 => cache_V_6_ce1,
        q1 => cache_V_6_q1);

    cache_V_7_U : component bin_to_res_cache_V_0
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cache_V_7_address0,
        ce0 => cache_V_7_ce0,
        we0 => cache_V_7_we0,
        d0 => iq_in_data_V_reg_2119,
        address1 => cache_V_7_address1,
        ce1 => cache_V_7_ce1,
        q1 => cache_V_7_q1);

    control_s_axi_U : component bin_to_res_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        resmap_address0 => resmap_address0,
        resmap_ce0 => resmap_ce0,
        resmap_q0 => resmap_q0);

    mux_164_32_1_1_U1 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_reg_2267,
        din1 => iqtmp_1_reg_2272,
        din2 => iqtmp_2_reg_2277,
        din3 => iqtmp_3_reg_2282,
        din4 => iqtmp_4_reg_2287,
        din5 => iqtmp_5_reg_2292,
        din6 => iqtmp_6_reg_2297,
        din7 => iqtmp_7_reg_2302,
        din8 => iqtmp_8_reg_2307,
        din9 => iqtmp_9_reg_2312,
        din10 => iqtmp_10_reg_2317,
        din11 => iqtmp_11_reg_2322,
        din12 => iqtmp_12_reg_2327,
        din13 => iqtmp_13_reg_2332,
        din14 => iqtmp_14_reg_2337,
        din15 => iqtmp_15_reg_2342,
        din16 => trunc_ln9_reg_2152_pp0_iter3_reg,
        dout => tmp_fu_1924_p18);

    mux_164_32_1_1_U2 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_1_reg_2347,
        din1 => iqtmp_1_1_reg_2352,
        din2 => iqtmp_2_1_reg_2357,
        din3 => iqtmp_3_1_reg_2362,
        din4 => iqtmp_4_1_reg_2367,
        din5 => iqtmp_5_1_reg_2372,
        din6 => iqtmp_6_1_reg_2377,
        din7 => iqtmp_7_1_reg_2382,
        din8 => iqtmp_8_1_reg_2387,
        din9 => iqtmp_9_1_reg_2392,
        din10 => iqtmp_10_1_reg_2397,
        din11 => iqtmp_11_1_reg_2402,
        din12 => iqtmp_12_1_reg_2407,
        din13 => iqtmp_13_1_reg_2412,
        din14 => iqtmp_14_1_reg_2417,
        din15 => iqtmp_15_1_reg_2422,
        din16 => trunc_ln9_1_reg_2162_pp0_iter3_reg,
        dout => tmp_1_fu_1945_p18);

    mux_164_32_1_1_U3 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_2_reg_2427,
        din1 => iqtmp_1_2_reg_2432,
        din2 => iqtmp_2_2_reg_2437,
        din3 => iqtmp_3_2_reg_2442,
        din4 => iqtmp_4_2_reg_2447,
        din5 => iqtmp_5_2_reg_2452,
        din6 => iqtmp_6_2_reg_2457,
        din7 => iqtmp_7_2_reg_2462,
        din8 => iqtmp_8_2_reg_2467,
        din9 => iqtmp_9_2_reg_2472,
        din10 => iqtmp_10_2_reg_2477,
        din11 => iqtmp_11_2_reg_2482,
        din12 => iqtmp_12_2_reg_2487,
        din13 => iqtmp_13_2_reg_2492,
        din14 => iqtmp_14_2_reg_2497,
        din15 => iqtmp_15_2_reg_2502,
        din16 => trunc_ln9_2_reg_2172_pp0_iter3_reg,
        dout => tmp_2_fu_1966_p18);

    mux_164_32_1_1_U4 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_3_reg_2507,
        din1 => iqtmp_1_3_reg_2512,
        din2 => iqtmp_2_3_reg_2517,
        din3 => iqtmp_3_3_reg_2522,
        din4 => iqtmp_4_3_reg_2527,
        din5 => iqtmp_5_3_reg_2532,
        din6 => iqtmp_6_3_reg_2537,
        din7 => iqtmp_7_3_reg_2542,
        din8 => iqtmp_8_3_reg_2547,
        din9 => iqtmp_9_3_reg_2552,
        din10 => iqtmp_10_3_reg_2557,
        din11 => iqtmp_11_3_reg_2562,
        din12 => iqtmp_12_3_reg_2567,
        din13 => iqtmp_13_3_reg_2572,
        din14 => iqtmp_14_3_reg_2577,
        din15 => iqtmp_15_3_reg_2582,
        din16 => trunc_ln9_3_reg_2182_pp0_iter3_reg,
        dout => tmp_3_fu_1987_p18);

    mux_164_32_1_1_U5 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_4_reg_2587,
        din1 => iqtmp_1_4_reg_2592,
        din2 => iqtmp_2_4_reg_2597,
        din3 => iqtmp_3_4_reg_2602,
        din4 => iqtmp_4_4_reg_2607,
        din5 => iqtmp_5_4_reg_2612,
        din6 => iqtmp_6_4_reg_2617,
        din7 => iqtmp_7_4_reg_2622,
        din8 => iqtmp_8_4_reg_2627,
        din9 => iqtmp_9_4_reg_2632,
        din10 => iqtmp_10_4_reg_2637,
        din11 => iqtmp_11_4_reg_2642,
        din12 => iqtmp_12_4_reg_2647,
        din13 => iqtmp_13_4_reg_2652,
        din14 => iqtmp_14_4_reg_2657,
        din15 => iqtmp_15_4_reg_2662,
        din16 => trunc_ln9_4_reg_2192_pp0_iter3_reg,
        dout => tmp_4_fu_2008_p18);

    mux_164_32_1_1_U6 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_5_reg_2667,
        din1 => iqtmp_1_5_reg_2672,
        din2 => iqtmp_2_5_reg_2677,
        din3 => iqtmp_3_5_reg_2682,
        din4 => iqtmp_4_5_reg_2687,
        din5 => iqtmp_5_5_reg_2692,
        din6 => iqtmp_6_5_reg_2697,
        din7 => iqtmp_7_5_reg_2702,
        din8 => iqtmp_8_5_reg_2707,
        din9 => iqtmp_9_5_reg_2712,
        din10 => iqtmp_10_5_reg_2717,
        din11 => iqtmp_11_5_reg_2722,
        din12 => iqtmp_12_5_reg_2727,
        din13 => iqtmp_13_5_reg_2732,
        din14 => iqtmp_14_5_reg_2737,
        din15 => iqtmp_15_5_reg_2742,
        din16 => trunc_ln9_5_reg_2202_pp0_iter3_reg,
        dout => tmp_5_fu_2029_p18);

    mux_164_32_1_1_U7 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_6_reg_2747,
        din1 => iqtmp_1_6_reg_2752,
        din2 => iqtmp_2_6_reg_2757,
        din3 => iqtmp_3_6_reg_2762,
        din4 => iqtmp_4_6_reg_2767,
        din5 => iqtmp_5_6_reg_2772,
        din6 => iqtmp_6_6_reg_2777,
        din7 => iqtmp_7_6_reg_2782,
        din8 => iqtmp_8_6_reg_2787,
        din9 => iqtmp_9_6_reg_2792,
        din10 => iqtmp_10_6_reg_2797,
        din11 => iqtmp_11_6_reg_2802,
        din12 => iqtmp_12_6_reg_2807,
        din13 => iqtmp_13_6_reg_2812,
        din14 => iqtmp_14_6_reg_2817,
        din15 => iqtmp_15_6_reg_2822,
        din16 => trunc_ln9_6_reg_2212_pp0_iter3_reg,
        dout => tmp_6_fu_2050_p18);

    mux_164_32_1_1_U8 : component bin_to_res_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => iqtmp_0_7_reg_2827,
        din1 => iqtmp_1_7_reg_2832,
        din2 => iqtmp_2_7_reg_2837,
        din3 => iqtmp_3_7_reg_2842,
        din4 => iqtmp_4_7_reg_2847,
        din5 => iqtmp_5_7_reg_2852,
        din6 => iqtmp_6_7_reg_2857,
        din7 => iqtmp_7_7_reg_2862,
        din8 => iqtmp_8_7_reg_2867,
        din9 => iqtmp_9_7_reg_2872,
        din10 => iqtmp_10_7_reg_2877,
        din11 => iqtmp_11_7_reg_2882,
        din12 => iqtmp_12_7_reg_2887,
        din13 => iqtmp_13_7_reg_2892,
        din14 => iqtmp_14_7_reg_2897,
        din15 => iqtmp_15_7_reg_2902,
        din16 => trunc_ln9_7_reg_2222_pp0_iter3_reg,
        dout => tmp_7_fu_2071_p18);

    regslice_both_iq_stream_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iq_stream_TDATA,
        vld_in => iq_stream_TVALID,
        ack_in => regslice_both_iq_stream_V_data_V_U_ack_in,
        data_out => iq_stream_TDATA_int_regslice,
        vld_out => iq_stream_TVALID_int_regslice,
        ack_out => iq_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_iq_stream_V_data_V_U_apdone_blk);

    regslice_both_iq_stream_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => iq_stream_TLAST,
        vld_in => iq_stream_TVALID,
        ack_in => regslice_both_iq_stream_V_last_V_U_ack_in,
        data_out => iq_stream_TLAST_int_regslice,
        vld_out => regslice_both_iq_stream_V_last_V_U_vld_out,
        ack_out => iq_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_iq_stream_V_last_V_U_apdone_blk);

    regslice_both_res_stream_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => res_stream_TDATA_int_regslice,
        vld_in => res_stream_TVALID_int_regslice,
        ack_in => res_stream_TREADY_int_regslice,
        data_out => res_stream_TDATA,
        vld_out => regslice_both_res_stream_V_data_V_U_vld_out,
        ack_out => res_stream_TREADY,
        apdone_blk => regslice_both_res_stream_V_data_V_U_apdone_blk);

    regslice_both_res_stream_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_tmp_user_V_reg_2136_pp0_iter3_reg,
        vld_in => res_stream_TVALID_int_regslice,
        ack_in => regslice_both_res_stream_V_user_V_U_ack_in_dummy,
        data_out => res_stream_TUSER,
        vld_out => regslice_both_res_stream_V_user_V_U_vld_out,
        ack_out => res_stream_TREADY,
        apdone_blk => regslice_both_res_stream_V_user_V_U_apdone_blk);

    regslice_both_res_stream_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => res_stream_TLAST_int_regslice,
        vld_in => res_stream_TVALID_int_regslice,
        ack_in => regslice_both_res_stream_V_last_V_U_ack_in_dummy,
        data_out => res_stream_TLAST,
        vld_out => regslice_both_res_stream_V_last_V_U_vld_out,
        ack_out => res_stream_TREADY,
        apdone_blk => regslice_both_res_stream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then
                cache_group <= select_ln63_fu_481_p3;
                replay_group <= add_ln695_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cache_group_load_reg_2131 <= cache_group;
                iq_in_data_V_reg_2119 <= iq_stream_TDATA_int_regslice;
                lshr_ln1368_1_reg_2157 <= resmap_q0(23 downto 16);
                lshr_ln1368_2_reg_2167 <= resmap_q0(35 downto 28);
                lshr_ln1368_3_reg_2177 <= resmap_q0(47 downto 40);
                lshr_ln1368_4_reg_2187 <= resmap_q0(59 downto 52);
                lshr_ln1368_5_reg_2197 <= resmap_q0(71 downto 64);
                lshr_ln1368_6_reg_2207 <= resmap_q0(83 downto 76);
                lshr_ln1368_7_reg_2217 <= resmap_q0(95 downto 88);
                lshr_ln_reg_2147 <= resmap_q0(11 downto 4);
                output_tmp_user_V_reg_2136 <= replay_group;
                output_tmp_user_V_reg_2136_pp0_iter1_reg <= output_tmp_user_V_reg_2136;
                trunc_ln9_1_reg_2162 <= resmap_q0(15 downto 12);
                trunc_ln9_2_reg_2172 <= resmap_q0(27 downto 24);
                trunc_ln9_3_reg_2182 <= resmap_q0(39 downto 36);
                trunc_ln9_4_reg_2192 <= resmap_q0(51 downto 48);
                trunc_ln9_5_reg_2202 <= resmap_q0(63 downto 60);
                trunc_ln9_6_reg_2212 <= resmap_q0(75 downto 72);
                trunc_ln9_7_reg_2222 <= resmap_q0(87 downto 84);
                trunc_ln9_reg_2152 <= trunc_ln9_fu_516_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                iqtmp_0_1_reg_2347 <= iqtmp_0_1_fu_846_p1;
                iqtmp_0_2_reg_2427 <= iqtmp_0_2_fu_1000_p1;
                iqtmp_0_3_reg_2507 <= iqtmp_0_3_fu_1154_p1;
                iqtmp_0_4_reg_2587 <= iqtmp_0_4_fu_1308_p1;
                iqtmp_0_5_reg_2667 <= iqtmp_0_5_fu_1462_p1;
                iqtmp_0_6_reg_2747 <= iqtmp_0_6_fu_1616_p1;
                iqtmp_0_7_reg_2827 <= iqtmp_0_7_fu_1770_p1;
                iqtmp_0_reg_2267 <= iqtmp_0_fu_692_p1;
                iqtmp_10_1_reg_2397 <= cache_V_1_q1(351 downto 320);
                iqtmp_10_2_reg_2477 <= cache_V_2_q1(351 downto 320);
                iqtmp_10_3_reg_2557 <= cache_V_3_q1(351 downto 320);
                iqtmp_10_4_reg_2637 <= cache_V_4_q1(351 downto 320);
                iqtmp_10_5_reg_2717 <= cache_V_5_q1(351 downto 320);
                iqtmp_10_6_reg_2797 <= cache_V_6_q1(351 downto 320);
                iqtmp_10_7_reg_2877 <= cache_V_7_q1(351 downto 320);
                iqtmp_10_reg_2317 <= cache_V_0_q1(351 downto 320);
                iqtmp_11_1_reg_2402 <= cache_V_1_q1(383 downto 352);
                iqtmp_11_2_reg_2482 <= cache_V_2_q1(383 downto 352);
                iqtmp_11_3_reg_2562 <= cache_V_3_q1(383 downto 352);
                iqtmp_11_4_reg_2642 <= cache_V_4_q1(383 downto 352);
                iqtmp_11_5_reg_2722 <= cache_V_5_q1(383 downto 352);
                iqtmp_11_6_reg_2802 <= cache_V_6_q1(383 downto 352);
                iqtmp_11_7_reg_2882 <= cache_V_7_q1(383 downto 352);
                iqtmp_11_reg_2322 <= cache_V_0_q1(383 downto 352);
                iqtmp_12_1_reg_2407 <= cache_V_1_q1(415 downto 384);
                iqtmp_12_2_reg_2487 <= cache_V_2_q1(415 downto 384);
                iqtmp_12_3_reg_2567 <= cache_V_3_q1(415 downto 384);
                iqtmp_12_4_reg_2647 <= cache_V_4_q1(415 downto 384);
                iqtmp_12_5_reg_2727 <= cache_V_5_q1(415 downto 384);
                iqtmp_12_6_reg_2807 <= cache_V_6_q1(415 downto 384);
                iqtmp_12_7_reg_2887 <= cache_V_7_q1(415 downto 384);
                iqtmp_12_reg_2327 <= cache_V_0_q1(415 downto 384);
                iqtmp_13_1_reg_2412 <= cache_V_1_q1(447 downto 416);
                iqtmp_13_2_reg_2492 <= cache_V_2_q1(447 downto 416);
                iqtmp_13_3_reg_2572 <= cache_V_3_q1(447 downto 416);
                iqtmp_13_4_reg_2652 <= cache_V_4_q1(447 downto 416);
                iqtmp_13_5_reg_2732 <= cache_V_5_q1(447 downto 416);
                iqtmp_13_6_reg_2812 <= cache_V_6_q1(447 downto 416);
                iqtmp_13_7_reg_2892 <= cache_V_7_q1(447 downto 416);
                iqtmp_13_reg_2332 <= cache_V_0_q1(447 downto 416);
                iqtmp_14_1_reg_2417 <= cache_V_1_q1(479 downto 448);
                iqtmp_14_2_reg_2497 <= cache_V_2_q1(479 downto 448);
                iqtmp_14_3_reg_2577 <= cache_V_3_q1(479 downto 448);
                iqtmp_14_4_reg_2657 <= cache_V_4_q1(479 downto 448);
                iqtmp_14_5_reg_2737 <= cache_V_5_q1(479 downto 448);
                iqtmp_14_6_reg_2817 <= cache_V_6_q1(479 downto 448);
                iqtmp_14_7_reg_2897 <= cache_V_7_q1(479 downto 448);
                iqtmp_14_reg_2337 <= cache_V_0_q1(479 downto 448);
                iqtmp_15_1_reg_2422 <= cache_V_1_q1(511 downto 480);
                iqtmp_15_2_reg_2502 <= cache_V_2_q1(511 downto 480);
                iqtmp_15_3_reg_2582 <= cache_V_3_q1(511 downto 480);
                iqtmp_15_4_reg_2662 <= cache_V_4_q1(511 downto 480);
                iqtmp_15_5_reg_2742 <= cache_V_5_q1(511 downto 480);
                iqtmp_15_6_reg_2822 <= cache_V_6_q1(511 downto 480);
                iqtmp_15_7_reg_2902 <= cache_V_7_q1(511 downto 480);
                iqtmp_15_reg_2342 <= cache_V_0_q1(511 downto 480);
                iqtmp_1_1_reg_2352 <= cache_V_1_q1(63 downto 32);
                iqtmp_1_2_reg_2432 <= cache_V_2_q1(63 downto 32);
                iqtmp_1_3_reg_2512 <= cache_V_3_q1(63 downto 32);
                iqtmp_1_4_reg_2592 <= cache_V_4_q1(63 downto 32);
                iqtmp_1_5_reg_2672 <= cache_V_5_q1(63 downto 32);
                iqtmp_1_6_reg_2752 <= cache_V_6_q1(63 downto 32);
                iqtmp_1_7_reg_2832 <= cache_V_7_q1(63 downto 32);
                iqtmp_1_reg_2272 <= cache_V_0_q1(63 downto 32);
                iqtmp_2_1_reg_2357 <= cache_V_1_q1(95 downto 64);
                iqtmp_2_2_reg_2437 <= cache_V_2_q1(95 downto 64);
                iqtmp_2_3_reg_2517 <= cache_V_3_q1(95 downto 64);
                iqtmp_2_4_reg_2597 <= cache_V_4_q1(95 downto 64);
                iqtmp_2_5_reg_2677 <= cache_V_5_q1(95 downto 64);
                iqtmp_2_6_reg_2757 <= cache_V_6_q1(95 downto 64);
                iqtmp_2_7_reg_2837 <= cache_V_7_q1(95 downto 64);
                iqtmp_2_reg_2277 <= cache_V_0_q1(95 downto 64);
                iqtmp_3_1_reg_2362 <= cache_V_1_q1(127 downto 96);
                iqtmp_3_2_reg_2442 <= cache_V_2_q1(127 downto 96);
                iqtmp_3_3_reg_2522 <= cache_V_3_q1(127 downto 96);
                iqtmp_3_4_reg_2602 <= cache_V_4_q1(127 downto 96);
                iqtmp_3_5_reg_2682 <= cache_V_5_q1(127 downto 96);
                iqtmp_3_6_reg_2762 <= cache_V_6_q1(127 downto 96);
                iqtmp_3_7_reg_2842 <= cache_V_7_q1(127 downto 96);
                iqtmp_3_reg_2282 <= cache_V_0_q1(127 downto 96);
                iqtmp_4_1_reg_2367 <= cache_V_1_q1(159 downto 128);
                iqtmp_4_2_reg_2447 <= cache_V_2_q1(159 downto 128);
                iqtmp_4_3_reg_2527 <= cache_V_3_q1(159 downto 128);
                iqtmp_4_4_reg_2607 <= cache_V_4_q1(159 downto 128);
                iqtmp_4_5_reg_2687 <= cache_V_5_q1(159 downto 128);
                iqtmp_4_6_reg_2767 <= cache_V_6_q1(159 downto 128);
                iqtmp_4_7_reg_2847 <= cache_V_7_q1(159 downto 128);
                iqtmp_4_reg_2287 <= cache_V_0_q1(159 downto 128);
                iqtmp_5_1_reg_2372 <= cache_V_1_q1(191 downto 160);
                iqtmp_5_2_reg_2452 <= cache_V_2_q1(191 downto 160);
                iqtmp_5_3_reg_2532 <= cache_V_3_q1(191 downto 160);
                iqtmp_5_4_reg_2612 <= cache_V_4_q1(191 downto 160);
                iqtmp_5_5_reg_2692 <= cache_V_5_q1(191 downto 160);
                iqtmp_5_6_reg_2772 <= cache_V_6_q1(191 downto 160);
                iqtmp_5_7_reg_2852 <= cache_V_7_q1(191 downto 160);
                iqtmp_5_reg_2292 <= cache_V_0_q1(191 downto 160);
                iqtmp_6_1_reg_2377 <= cache_V_1_q1(223 downto 192);
                iqtmp_6_2_reg_2457 <= cache_V_2_q1(223 downto 192);
                iqtmp_6_3_reg_2537 <= cache_V_3_q1(223 downto 192);
                iqtmp_6_4_reg_2617 <= cache_V_4_q1(223 downto 192);
                iqtmp_6_5_reg_2697 <= cache_V_5_q1(223 downto 192);
                iqtmp_6_6_reg_2777 <= cache_V_6_q1(223 downto 192);
                iqtmp_6_7_reg_2857 <= cache_V_7_q1(223 downto 192);
                iqtmp_6_reg_2297 <= cache_V_0_q1(223 downto 192);
                iqtmp_7_1_reg_2382 <= cache_V_1_q1(255 downto 224);
                iqtmp_7_2_reg_2462 <= cache_V_2_q1(255 downto 224);
                iqtmp_7_3_reg_2542 <= cache_V_3_q1(255 downto 224);
                iqtmp_7_4_reg_2622 <= cache_V_4_q1(255 downto 224);
                iqtmp_7_5_reg_2702 <= cache_V_5_q1(255 downto 224);
                iqtmp_7_6_reg_2782 <= cache_V_6_q1(255 downto 224);
                iqtmp_7_7_reg_2862 <= cache_V_7_q1(255 downto 224);
                iqtmp_7_reg_2302 <= cache_V_0_q1(255 downto 224);
                iqtmp_8_1_reg_2387 <= cache_V_1_q1(287 downto 256);
                iqtmp_8_2_reg_2467 <= cache_V_2_q1(287 downto 256);
                iqtmp_8_3_reg_2547 <= cache_V_3_q1(287 downto 256);
                iqtmp_8_4_reg_2627 <= cache_V_4_q1(287 downto 256);
                iqtmp_8_5_reg_2707 <= cache_V_5_q1(287 downto 256);
                iqtmp_8_6_reg_2787 <= cache_V_6_q1(287 downto 256);
                iqtmp_8_7_reg_2867 <= cache_V_7_q1(287 downto 256);
                iqtmp_8_reg_2307 <= cache_V_0_q1(287 downto 256);
                iqtmp_9_1_reg_2392 <= cache_V_1_q1(319 downto 288);
                iqtmp_9_2_reg_2472 <= cache_V_2_q1(319 downto 288);
                iqtmp_9_3_reg_2552 <= cache_V_3_q1(319 downto 288);
                iqtmp_9_4_reg_2632 <= cache_V_4_q1(319 downto 288);
                iqtmp_9_5_reg_2712 <= cache_V_5_q1(319 downto 288);
                iqtmp_9_6_reg_2792 <= cache_V_6_q1(319 downto 288);
                iqtmp_9_7_reg_2872 <= cache_V_7_q1(319 downto 288);
                iqtmp_9_reg_2312 <= cache_V_0_q1(319 downto 288);
                output_tmp_user_V_reg_2136_pp0_iter2_reg <= output_tmp_user_V_reg_2136_pp0_iter1_reg;
                output_tmp_user_V_reg_2136_pp0_iter3_reg <= output_tmp_user_V_reg_2136_pp0_iter2_reg;
                trunc_ln9_1_reg_2162_pp0_iter2_reg <= trunc_ln9_1_reg_2162;
                trunc_ln9_1_reg_2162_pp0_iter3_reg <= trunc_ln9_1_reg_2162_pp0_iter2_reg;
                trunc_ln9_2_reg_2172_pp0_iter2_reg <= trunc_ln9_2_reg_2172;
                trunc_ln9_2_reg_2172_pp0_iter3_reg <= trunc_ln9_2_reg_2172_pp0_iter2_reg;
                trunc_ln9_3_reg_2182_pp0_iter2_reg <= trunc_ln9_3_reg_2182;
                trunc_ln9_3_reg_2182_pp0_iter3_reg <= trunc_ln9_3_reg_2182_pp0_iter2_reg;
                trunc_ln9_4_reg_2192_pp0_iter2_reg <= trunc_ln9_4_reg_2192;
                trunc_ln9_4_reg_2192_pp0_iter3_reg <= trunc_ln9_4_reg_2192_pp0_iter2_reg;
                trunc_ln9_5_reg_2202_pp0_iter2_reg <= trunc_ln9_5_reg_2202;
                trunc_ln9_5_reg_2202_pp0_iter3_reg <= trunc_ln9_5_reg_2202_pp0_iter2_reg;
                trunc_ln9_6_reg_2212_pp0_iter2_reg <= trunc_ln9_6_reg_2212;
                trunc_ln9_6_reg_2212_pp0_iter3_reg <= trunc_ln9_6_reg_2212_pp0_iter2_reg;
                trunc_ln9_7_reg_2222_pp0_iter2_reg <= trunc_ln9_7_reg_2222;
                trunc_ln9_7_reg_2222_pp0_iter3_reg <= trunc_ln9_7_reg_2222_pp0_iter2_reg;
                trunc_ln9_reg_2152_pp0_iter2_reg <= trunc_ln9_reg_2152;
                trunc_ln9_reg_2152_pp0_iter3_reg <= trunc_ln9_reg_2152_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln216_fu_475_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(cache_group));
    add_ln695_fu_463_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(replay_group));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter5, regslice_both_res_stream_V_data_V_U_apdone_blk, iq_stream_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((regslice_both_res_stream_V_data_V_U_apdone_blk = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((iq_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, regslice_both_res_stream_V_data_V_U_apdone_blk, iq_stream_TVALID_int_regslice, res_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((res_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((iq_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((regslice_both_res_stream_V_data_V_U_apdone_blk = ap_const_logic_1) or (res_stream_TREADY_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, regslice_both_res_stream_V_data_V_U_apdone_blk, iq_stream_TVALID_int_regslice, res_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((res_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((iq_stream_TVALID_int_regslice = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((regslice_both_res_stream_V_data_V_U_apdone_blk = ap_const_logic_1) or (res_stream_TREADY_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(iq_stream_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (iq_stream_TVALID_int_regslice = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter5_assign_proc : process(regslice_both_res_stream_V_data_V_U_apdone_blk)
    begin
                ap_block_state6_pp0_stage0_iter5 <= (regslice_both_res_stream_V_data_V_U_apdone_blk = ap_const_logic_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cache_V_0_address0 <= conv_i67_fu_495_p1(8 - 1 downto 0);
    cache_V_0_address1 <= zext_ln52_fu_660_p1(8 - 1 downto 0);

    cache_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_0_ce0 <= ap_const_logic_1;
        else 
            cache_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_0_ce1 <= ap_const_logic_1;
        else 
            cache_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_0_we0 <= ap_const_logic_1;
        else 
            cache_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_1_address0 <= conv_i67_fu_495_p1(8 - 1 downto 0);
    cache_V_1_address1 <= zext_ln52_1_fu_664_p1(8 - 1 downto 0);

    cache_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_1_ce0 <= ap_const_logic_1;
        else 
            cache_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_1_ce1 <= ap_const_logic_1;
        else 
            cache_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_1_we0 <= ap_const_logic_1;
        else 
            cache_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_2_address0 <= conv_i67_fu_495_p1(8 - 1 downto 0);
    cache_V_2_address1 <= zext_ln52_2_fu_668_p1(8 - 1 downto 0);

    cache_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_2_ce0 <= ap_const_logic_1;
        else 
            cache_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_2_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_2_ce1 <= ap_const_logic_1;
        else 
            cache_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_2_we0 <= ap_const_logic_1;
        else 
            cache_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_3_address0 <= conv_i67_fu_495_p1(8 - 1 downto 0);
    cache_V_3_address1 <= zext_ln52_3_fu_672_p1(8 - 1 downto 0);

    cache_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_3_ce0 <= ap_const_logic_1;
        else 
            cache_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_3_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_3_ce1 <= ap_const_logic_1;
        else 
            cache_V_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_3_we0 <= ap_const_logic_1;
        else 
            cache_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_4_address0 <= conv_i67_fu_495_p1(8 - 1 downto 0);
    cache_V_4_address1 <= zext_ln52_4_fu_676_p1(8 - 1 downto 0);

    cache_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_4_ce0 <= ap_const_logic_1;
        else 
            cache_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_4_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_4_ce1 <= ap_const_logic_1;
        else 
            cache_V_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_4_we0 <= ap_const_logic_1;
        else 
            cache_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_5_address0 <= conv_i67_fu_495_p1(8 - 1 downto 0);
    cache_V_5_address1 <= zext_ln52_5_fu_680_p1(8 - 1 downto 0);

    cache_V_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_5_ce0 <= ap_const_logic_1;
        else 
            cache_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_5_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_5_ce1 <= ap_const_logic_1;
        else 
            cache_V_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_5_we0 <= ap_const_logic_1;
        else 
            cache_V_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_6_address0 <= conv_i67_fu_495_p1(8 - 1 downto 0);
    cache_V_6_address1 <= zext_ln52_6_fu_684_p1(8 - 1 downto 0);

    cache_V_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_6_ce0 <= ap_const_logic_1;
        else 
            cache_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_6_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_6_ce1 <= ap_const_logic_1;
        else 
            cache_V_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_6_we0 <= ap_const_logic_1;
        else 
            cache_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cache_V_7_address0 <= conv_i67_fu_495_p1(8 - 1 downto 0);
    cache_V_7_address1 <= zext_ln52_7_fu_688_p1(8 - 1 downto 0);

    cache_V_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_7_ce0 <= ap_const_logic_1;
        else 
            cache_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_7_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_7_ce1 <= ap_const_logic_1;
        else 
            cache_V_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cache_V_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cache_V_7_we0 <= ap_const_logic_1;
        else 
            cache_V_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_i67_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cache_group_load_reg_2131),64));

    iq_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, iq_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq_stream_TDATA_blk_n <= iq_stream_TVALID_int_regslice;
        else 
            iq_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iq_stream_TREADY <= regslice_both_iq_stream_V_data_V_U_ack_in;

    iq_stream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq_stream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            iq_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    iqtmp_0_1_fu_846_p1 <= cache_V_1_q1(32 - 1 downto 0);
    iqtmp_0_2_fu_1000_p1 <= cache_V_2_q1(32 - 1 downto 0);
    iqtmp_0_3_fu_1154_p1 <= cache_V_3_q1(32 - 1 downto 0);
    iqtmp_0_4_fu_1308_p1 <= cache_V_4_q1(32 - 1 downto 0);
    iqtmp_0_5_fu_1462_p1 <= cache_V_5_q1(32 - 1 downto 0);
    iqtmp_0_6_fu_1616_p1 <= cache_V_6_q1(32 - 1 downto 0);
    iqtmp_0_7_fu_1770_p1 <= cache_V_7_q1(32 - 1 downto 0);
    iqtmp_0_fu_692_p1 <= cache_V_0_q1(32 - 1 downto 0);

    res_stream_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, res_stream_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            res_stream_TDATA_blk_n <= res_stream_TREADY_int_regslice;
        else 
            res_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_TDATA_int_regslice <= (((((((tmp_7_fu_2071_p18 & tmp_6_fu_2050_p18) & tmp_5_fu_2029_p18) & tmp_4_fu_2008_p18) & tmp_3_fu_1987_p18) & tmp_2_fu_1966_p18) & tmp_1_fu_1945_p18) & tmp_fu_1924_p18);
    res_stream_TLAST_int_regslice <= "1" when (output_tmp_user_V_reg_2136_pp0_iter3_reg = ap_const_lv8_FF) else "0";
    res_stream_TVALID <= regslice_both_res_stream_V_data_V_U_vld_out;

    res_stream_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            res_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    resmap_address0 <= zext_ln538_fu_458_p1(8 - 1 downto 0);

    resmap_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
            resmap_ce0 <= ap_const_logic_1;
        else 
            resmap_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln63_fu_481_p3 <= 
        ap_const_lv8_0 when (iq_stream_TLAST_int_regslice(0) = '1') else 
        add_ln216_fu_475_p2;
    trunc_ln9_fu_516_p1 <= resmap_q0(4 - 1 downto 0);
    zext_ln52_1_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1368_1_reg_2157),64));
    zext_ln52_2_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1368_2_reg_2167),64));
    zext_ln52_3_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1368_3_reg_2177),64));
    zext_ln52_4_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1368_4_reg_2187),64));
    zext_ln52_5_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1368_5_reg_2197),64));
    zext_ln52_6_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1368_6_reg_2207),64));
    zext_ln52_7_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1368_7_reg_2217),64));
    zext_ln52_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_2147),64));
    zext_ln538_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(replay_group),64));
end behav;
