-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bin_to_res_buff_multibuffer is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    i_stream_TVALID : IN STD_LOGIC;
    q_stream_TVALID : IN STD_LOGIC;
    out0_TREADY : IN STD_LOGIC;
    out1_TREADY : IN STD_LOGIC;
    out2_TREADY : IN STD_LOGIC;
    out3_TREADY : IN STD_LOGIC;
    out4_TREADY : IN STD_LOGIC;
    out5_TREADY : IN STD_LOGIC;
    out6_TREADY : IN STD_LOGIC;
    out7_TREADY : IN STD_LOGIC;
    i_stream_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    i_stream_TREADY : OUT STD_LOGIC;
    i_stream_TUSER : IN STD_LOGIC_VECTOR (7 downto 0);
    q_stream_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    q_stream_TREADY : OUT STD_LOGIC;
    q_stream_TUSER : IN STD_LOGIC_VECTOR (7 downto 0);
    out0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out0_TVALID : OUT STD_LOGIC;
    out0_TUSER : OUT STD_LOGIC_VECTOR (10 downto 0);
    out1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out1_TVALID : OUT STD_LOGIC;
    out1_TUSER : OUT STD_LOGIC_VECTOR (10 downto 0);
    out2_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out2_TVALID : OUT STD_LOGIC;
    out2_TUSER : OUT STD_LOGIC_VECTOR (10 downto 0);
    out3_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out3_TVALID : OUT STD_LOGIC;
    out3_TUSER : OUT STD_LOGIC_VECTOR (10 downto 0);
    out4_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out4_TVALID : OUT STD_LOGIC;
    out4_TUSER : OUT STD_LOGIC_VECTOR (10 downto 0);
    out5_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out5_TVALID : OUT STD_LOGIC;
    out5_TUSER : OUT STD_LOGIC_VECTOR (10 downto 0);
    out6_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out6_TVALID : OUT STD_LOGIC;
    out6_TUSER : OUT STD_LOGIC_VECTOR (10 downto 0);
    out7_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out7_TVALID : OUT STD_LOGIC;
    out7_TUSER : OUT STD_LOGIC_VECTOR (10 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of bin_to_res_buff_multibuffer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bin_to_res_buff_multibuffer,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.563000,HLS_SYN_LAT=12,HLS_SYN_TPT=1,HLS_SYN_MEM=126,HLS_SYN_DSP=0,HLS_SYN_FF=43252,HLS_SYN_LUT=53204,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv10_10 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_const_lv10_1F : STD_LOGIC_VECTOR (9 downto 0) := "0000011111";
    constant ap_const_lv10_20 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_const_lv10_2F : STD_LOGIC_VECTOR (9 downto 0) := "0000101111";
    constant ap_const_lv10_30 : STD_LOGIC_VECTOR (9 downto 0) := "0000110000";
    constant ap_const_lv10_3F : STD_LOGIC_VECTOR (9 downto 0) := "0000111111";
    constant ap_const_lv10_40 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_const_lv10_4F : STD_LOGIC_VECTOR (9 downto 0) := "0001001111";
    constant ap_const_lv10_50 : STD_LOGIC_VECTOR (9 downto 0) := "0001010000";
    constant ap_const_lv10_5F : STD_LOGIC_VECTOR (9 downto 0) := "0001011111";
    constant ap_const_lv10_60 : STD_LOGIC_VECTOR (9 downto 0) := "0001100000";
    constant ap_const_lv10_6F : STD_LOGIC_VECTOR (9 downto 0) := "0001101111";
    constant ap_const_lv10_70 : STD_LOGIC_VECTOR (9 downto 0) := "0001110000";
    constant ap_const_lv10_7F : STD_LOGIC_VECTOR (9 downto 0) := "0001111111";
    constant ap_const_lv10_80 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_const_lv10_8F : STD_LOGIC_VECTOR (9 downto 0) := "0010001111";
    constant ap_const_lv10_90 : STD_LOGIC_VECTOR (9 downto 0) := "0010010000";
    constant ap_const_lv10_9F : STD_LOGIC_VECTOR (9 downto 0) := "0010011111";
    constant ap_const_lv10_A0 : STD_LOGIC_VECTOR (9 downto 0) := "0010100000";
    constant ap_const_lv10_AF : STD_LOGIC_VECTOR (9 downto 0) := "0010101111";
    constant ap_const_lv10_B0 : STD_LOGIC_VECTOR (9 downto 0) := "0010110000";
    constant ap_const_lv10_BF : STD_LOGIC_VECTOR (9 downto 0) := "0010111111";
    constant ap_const_lv10_C0 : STD_LOGIC_VECTOR (9 downto 0) := "0011000000";
    constant ap_const_lv10_CF : STD_LOGIC_VECTOR (9 downto 0) := "0011001111";
    constant ap_const_lv10_D0 : STD_LOGIC_VECTOR (9 downto 0) := "0011010000";
    constant ap_const_lv10_DF : STD_LOGIC_VECTOR (9 downto 0) := "0011011111";
    constant ap_const_lv10_E0 : STD_LOGIC_VECTOR (9 downto 0) := "0011100000";
    constant ap_const_lv10_EF : STD_LOGIC_VECTOR (9 downto 0) := "0011101111";
    constant ap_const_lv10_F0 : STD_LOGIC_VECTOR (9 downto 0) := "0011110000";
    constant ap_const_lv10_FF : STD_LOGIC_VECTOR (9 downto 0) := "0011111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_1F : STD_LOGIC_VECTOR (8 downto 0) := "000011111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv11_7 : STD_LOGIC_VECTOR (10 downto 0) := "00000000111";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal regslice_both_out0_data_val_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out1_data_val_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out2_data_val_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out3_data_val_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out4_data_val_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out5_data_val_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out6_data_val_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out7_data_val_U_apdone_blk : STD_LOGIC;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal rid_to_bin_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rid_to_bin_V_ce0 : STD_LOGIC;
    signal rid_to_bin_V_q0 : STD_LOGIC_VECTOR (95 downto 0);
    signal bin_iq_cache0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache0_ce0 : STD_LOGIC;
    signal bin_iq_cache0_we0 : STD_LOGIC;
    signal bin_iq_cache0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache0_ce1 : STD_LOGIC;
    signal bin_iq_cache0_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal id_ndx_V : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal bin_iq_cache1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache1_ce0 : STD_LOGIC;
    signal bin_iq_cache1_we0 : STD_LOGIC;
    signal bin_iq_cache1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache1_ce1 : STD_LOGIC;
    signal bin_iq_cache1_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal bin_iq_cache2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache2_ce0 : STD_LOGIC;
    signal bin_iq_cache2_we0 : STD_LOGIC;
    signal bin_iq_cache2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache2_ce1 : STD_LOGIC;
    signal bin_iq_cache2_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal bin_iq_cache3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache3_ce0 : STD_LOGIC;
    signal bin_iq_cache3_we0 : STD_LOGIC;
    signal bin_iq_cache3_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache3_ce1 : STD_LOGIC;
    signal bin_iq_cache3_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal bin_iq_cache4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache4_ce0 : STD_LOGIC;
    signal bin_iq_cache4_we0 : STD_LOGIC;
    signal bin_iq_cache4_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache4_ce1 : STD_LOGIC;
    signal bin_iq_cache4_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal bin_iq_cache5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache5_ce0 : STD_LOGIC;
    signal bin_iq_cache5_we0 : STD_LOGIC;
    signal bin_iq_cache5_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache5_ce1 : STD_LOGIC;
    signal bin_iq_cache5_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal bin_iq_cache6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache6_ce0 : STD_LOGIC;
    signal bin_iq_cache6_we0 : STD_LOGIC;
    signal bin_iq_cache6_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache6_ce1 : STD_LOGIC;
    signal bin_iq_cache6_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal bin_iq_cache7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache7_ce0 : STD_LOGIC;
    signal bin_iq_cache7_we0 : STD_LOGIC;
    signal bin_iq_cache7_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bin_iq_cache7_ce1 : STD_LOGIC;
    signal bin_iq_cache7_q1 : STD_LOGIC_VECTOR (511 downto 0);
    signal i_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal q_stream_TDATA_blk_n : STD_LOGIC;
    signal out0_TDATA_blk_n : STD_LOGIC;
    signal out1_TDATA_blk_n : STD_LOGIC;
    signal out2_TDATA_blk_n : STD_LOGIC;
    signal out3_TDATA_blk_n : STD_LOGIC;
    signal out4_TDATA_blk_n : STD_LOGIC;
    signal out5_TDATA_blk_n : STD_LOGIC;
    signal out6_TDATA_blk_n : STD_LOGIC;
    signal out7_TDATA_blk_n : STD_LOGIC;
    signal p_Result_1_reg_2077 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_8_fu_982_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_8_reg_2082 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_8_reg_2082_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_8_reg_2082_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_8_reg_2082_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_3_reg_2087 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_2092 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_2092_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_2092_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_2092_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_5_reg_2097 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_2102 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_reg_2102_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_reg_2102_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_reg_2102_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_7_reg_2107 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_2112 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_reg_2112_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_reg_2112_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_reg_2112_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_9_reg_2117 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_2122 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_reg_2122_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_reg_2122_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_reg_2122_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_s_reg_2127 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_2132 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_2132_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_2132_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_2132_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_2_reg_2137 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_reg_2142 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_17_reg_2142_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_17_reg_2142_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_17_reg_2142_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_4_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_2152 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_reg_2152_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_reg_2152_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_reg_2152_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bin_iq_cache0_load_reg_2197 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_fu_1158_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_reg_2202 : STD_LOGIC_VECTOR (511 downto 0);
    signal bin_iq_cache1_load_reg_2207 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_2_fu_1168_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_2_reg_2212 : STD_LOGIC_VECTOR (511 downto 0);
    signal bin_iq_cache2_load_reg_2217 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_6_fu_1178_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_6_reg_2222 : STD_LOGIC_VECTOR (511 downto 0);
    signal bin_iq_cache3_load_reg_2227 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_10_fu_1188_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_10_reg_2232 : STD_LOGIC_VECTOR (511 downto 0);
    signal bin_iq_cache4_load_reg_2237 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_13_fu_1198_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_13_reg_2242 : STD_LOGIC_VECTOR (511 downto 0);
    signal bin_iq_cache5_load_reg_2247 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_16_fu_1208_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_16_reg_2252 : STD_LOGIC_VECTOR (511 downto 0);
    signal bin_iq_cache6_load_reg_2257 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_19_fu_1218_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_19_reg_2262 : STD_LOGIC_VECTOR (511 downto 0);
    signal bin_iq_cache7_load_reg_2267 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_22_fu_1228_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_22_reg_2272 : STD_LOGIC_VECTOR (511 downto 0);
    signal empty_9_fu_1245_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_9_reg_2277 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln180_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln180_reg_2282 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln180_fu_1257_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln180_reg_2287 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_1_fu_1267_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_1_reg_2293 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_2_fu_1273_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_2_reg_2298 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_10_fu_1288_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_10_reg_2303 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln180_1_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln180_1_reg_2308 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln180_4_fu_1300_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln180_4_reg_2313 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_4_fu_1310_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_4_reg_2319 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_5_fu_1316_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_5_reg_2324 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_11_fu_1331_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_11_reg_2329 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln180_2_fu_1337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln180_2_reg_2334 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln180_8_fu_1343_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln180_8_reg_2339 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_7_fu_1353_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_7_reg_2345 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_8_fu_1359_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_8_reg_2350 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_12_fu_1374_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_12_reg_2355 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln180_3_fu_1380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln180_3_reg_2360 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln180_12_fu_1386_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln180_12_reg_2365 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_10_fu_1396_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_10_reg_2371 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_11_fu_1402_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_11_reg_2376 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_13_fu_1417_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_13_reg_2381 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln180_4_fu_1423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln180_4_reg_2386 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln180_16_fu_1429_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln180_16_reg_2391 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_13_fu_1439_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_13_reg_2397 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_14_fu_1445_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_14_reg_2402 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_14_fu_1460_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_14_reg_2407 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln180_5_fu_1466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln180_5_reg_2412 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln180_20_fu_1472_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln180_20_reg_2417 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_16_fu_1482_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_16_reg_2423 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_17_fu_1488_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_17_reg_2428 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_15_fu_1503_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_15_reg_2433 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln180_6_fu_1509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln180_6_reg_2438 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln180_24_fu_1515_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln180_24_reg_2443 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_19_fu_1525_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_19_reg_2449 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_20_fu_1531_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_20_reg_2454 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_16_fu_1546_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_16_reg_2459 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln180_7_fu_1552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln180_7_reg_2464 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln180_28_fu_1558_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln180_28_reg_2469 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_22_fu_1568_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_22_reg_2475 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln180_23_fu_1574_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_23_reg_2480 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_2_fu_1602_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_2_reg_2485 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_2_reg_2485_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_2_reg_2485_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_2_reg_2485_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_5_fu_1636_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_5_reg_2495 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_5_reg_2495_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_5_reg_2495_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_5_reg_2495_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_8_fu_1670_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_8_reg_2505 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_8_reg_2505_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_8_reg_2505_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_8_reg_2505_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_11_fu_1704_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_11_reg_2515 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_11_reg_2515_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_11_reg_2515_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_11_reg_2515_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_14_fu_1738_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_14_reg_2525 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_14_reg_2525_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_14_reg_2525_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_14_reg_2525_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_17_fu_1772_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_17_reg_2535 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_17_reg_2535_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_17_reg_2535_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_17_reg_2535_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_20_fu_1806_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_20_reg_2545 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_20_reg_2545_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_20_reg_2545_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_20_reg_2545_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_23_fu_1840_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_23_reg_2555 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_23_reg_2555_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_23_reg_2555_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_23_reg_2555_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1611_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_reg_2565 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_1645_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_2_reg_2570 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_1679_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_4_reg_2575 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_1713_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_6_reg_2580 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_1747_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_8_reg_2585 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_1781_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_10_reg_2590 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_1815_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_12_reg_2595 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_1849_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_14_reg_2600 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln544_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_fu_1126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_1_fu_1130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_2_fu_1134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_3_fu_1138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_4_fu_1142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_5_fu_1146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_6_fu_1150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_7_fu_1154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_fu_2060_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_5_fu_896_p33 : STD_LOGIC_VECTOR (511 downto 0);
    signal op2_V_read_assign_29_fu_886_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_28_fu_876_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_27_fu_866_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_26_fu_856_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_25_fu_846_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_24_fu_836_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_23_fu_826_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_22_fu_816_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_21_fu_806_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_20_fu_796_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_19_fu_786_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_18_fu_776_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_17_fu_766_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_16_fu_756_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_15_fu_746_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_14_fu_736_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_13_fu_726_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_12_fu_716_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_11_fu_706_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_10_fu_696_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_1_fu_686_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_s_fu_676_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_9_fu_666_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_8_fu_656_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_7_fu_646_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_6_fu_636_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_5_fu_626_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_4_fu_616_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_3_fu_606_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_read_assign_2_fu_596_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln78_1_fu_592_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln78_fu_588_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_1238_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln180_fu_1261_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1281_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln180_1_fu_1304_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_1324_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln180_2_fu_1347_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_1367_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln180_3_fu_1390_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_1410_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln180_4_fu_1433_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_1453_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln180_5_fu_1476_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_1496_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln180_6_fu_1519_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_1539_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln180_7_fu_1562_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln180_1_fu_1582_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_fu_1585_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_1_fu_1590_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_fu_1595_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1611_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_5_fu_1616_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_3_fu_1619_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_4_fu_1624_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_3_fu_1629_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1645_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_9_fu_1650_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_6_fu_1653_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_7_fu_1658_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_6_fu_1663_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1679_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_13_fu_1684_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_9_fu_1687_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_10_fu_1692_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_9_fu_1697_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1713_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_17_fu_1718_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_12_fu_1721_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_13_fu_1726_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_12_fu_1731_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1747_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_21_fu_1752_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_15_fu_1755_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_16_fu_1760_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_15_fu_1765_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1781_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_25_fu_1786_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_18_fu_1789_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_19_fu_1794_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_18_fu_1799_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1815_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_29_fu_1820_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_21_fu_1823_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln180_22_fu_1828_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln180_21_fu_1833_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1849_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_3_fu_1854_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_1_fu_1857_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln180_fu_1863_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_7_fu_1878_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_3_fu_1881_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln180_1_fu_1887_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_11_fu_1904_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_5_fu_1907_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln180_2_fu_1913_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_15_fu_1930_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_7_fu_1933_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln180_3_fu_1939_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_19_fu_1956_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_9_fu_1959_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln180_4_fu_1965_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_23_fu_1982_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_11_fu_1985_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln180_5_fu_1991_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_27_fu_2008_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_13_fu_2011_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln180_6_fu_2017_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln180_31_fu_2034_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln180_15_fu_2037_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln180_7_fu_2043_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_fu_1611_ce : STD_LOGIC;
    signal grp_fu_1645_ce : STD_LOGIC;
    signal grp_fu_1679_ce : STD_LOGIC;
    signal grp_fu_1713_ce : STD_LOGIC;
    signal grp_fu_1747_ce : STD_LOGIC;
    signal grp_fu_1781_ce : STD_LOGIC;
    signal grp_fu_1815_ce : STD_LOGIC;
    signal grp_fu_1849_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to11 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_63 : BOOLEAN;
    signal ap_enable_state1_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_91 : BOOLEAN;
    signal ap_enable_state4_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_121 : BOOLEAN;
    signal ap_enable_state6_pp0_iter5_stage0 : BOOLEAN;
    signal ap_enable_operation_64 : BOOLEAN;
    signal ap_enable_operation_94 : BOOLEAN;
    signal ap_enable_operation_123 : BOOLEAN;
    signal ap_enable_operation_65 : BOOLEAN;
    signal ap_enable_operation_97 : BOOLEAN;
    signal ap_enable_operation_125 : BOOLEAN;
    signal ap_enable_operation_66 : BOOLEAN;
    signal ap_enable_operation_100 : BOOLEAN;
    signal ap_enable_operation_127 : BOOLEAN;
    signal ap_enable_operation_67 : BOOLEAN;
    signal ap_enable_operation_103 : BOOLEAN;
    signal ap_enable_operation_129 : BOOLEAN;
    signal ap_enable_operation_68 : BOOLEAN;
    signal ap_enable_operation_106 : BOOLEAN;
    signal ap_enable_operation_131 : BOOLEAN;
    signal ap_enable_operation_69 : BOOLEAN;
    signal ap_enable_operation_109 : BOOLEAN;
    signal ap_enable_operation_133 : BOOLEAN;
    signal ap_enable_operation_70 : BOOLEAN;
    signal ap_enable_operation_112 : BOOLEAN;
    signal ap_enable_operation_135 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_i_stream_data_val_V_U_apdone_blk : STD_LOGIC;
    signal i_stream_TDATA_int : STD_LOGIC_VECTOR (255 downto 0);
    signal i_stream_TVALID_int : STD_LOGIC;
    signal i_stream_TREADY_int : STD_LOGIC;
    signal regslice_both_i_stream_data_val_V_U_ack_in : STD_LOGIC;
    signal regslice_both_i_stream_user_V_U_apdone_blk : STD_LOGIC;
    signal i_stream_TUSER_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_i_stream_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_i_stream_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_q_stream_data_val_V_U_apdone_blk : STD_LOGIC;
    signal q_stream_TDATA_int : STD_LOGIC_VECTOR (255 downto 0);
    signal q_stream_TVALID_int : STD_LOGIC;
    signal q_stream_TREADY_int : STD_LOGIC;
    signal regslice_both_q_stream_data_val_V_U_ack_in : STD_LOGIC;
    signal regslice_both_q_stream_user_V_U_apdone_blk : STD_LOGIC;
    signal q_stream_TUSER_int : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_q_stream_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_q_stream_user_V_U_ack_in : STD_LOGIC;
    signal out0_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal out0_TVALID_int : STD_LOGIC;
    signal out0_TREADY_int : STD_LOGIC;
    signal regslice_both_out0_data_val_U_vld_out : STD_LOGIC;
    signal regslice_both_out0_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out0_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out0_user_V_U_vld_out : STD_LOGIC;
    signal out1_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal out1_TVALID_int : STD_LOGIC;
    signal out1_TREADY_int : STD_LOGIC;
    signal regslice_both_out1_data_val_U_vld_out : STD_LOGIC;
    signal regslice_both_out1_user_V_U_apdone_blk : STD_LOGIC;
    signal out1_TUSER_int : STD_LOGIC_VECTOR (10 downto 0);
    signal regslice_both_out1_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out1_user_V_U_vld_out : STD_LOGIC;
    signal out2_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal out2_TVALID_int : STD_LOGIC;
    signal out2_TREADY_int : STD_LOGIC;
    signal regslice_both_out2_data_val_U_vld_out : STD_LOGIC;
    signal regslice_both_out2_user_V_U_apdone_blk : STD_LOGIC;
    signal out2_TUSER_int : STD_LOGIC_VECTOR (10 downto 0);
    signal regslice_both_out2_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out2_user_V_U_vld_out : STD_LOGIC;
    signal out3_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal out3_TVALID_int : STD_LOGIC;
    signal out3_TREADY_int : STD_LOGIC;
    signal regslice_both_out3_data_val_U_vld_out : STD_LOGIC;
    signal regslice_both_out3_user_V_U_apdone_blk : STD_LOGIC;
    signal out3_TUSER_int : STD_LOGIC_VECTOR (10 downto 0);
    signal regslice_both_out3_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out3_user_V_U_vld_out : STD_LOGIC;
    signal out4_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal out4_TVALID_int : STD_LOGIC;
    signal out4_TREADY_int : STD_LOGIC;
    signal regslice_both_out4_data_val_U_vld_out : STD_LOGIC;
    signal regslice_both_out4_user_V_U_apdone_blk : STD_LOGIC;
    signal out4_TUSER_int : STD_LOGIC_VECTOR (10 downto 0);
    signal regslice_both_out4_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out4_user_V_U_vld_out : STD_LOGIC;
    signal out5_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal out5_TVALID_int : STD_LOGIC;
    signal out5_TREADY_int : STD_LOGIC;
    signal regslice_both_out5_data_val_U_vld_out : STD_LOGIC;
    signal regslice_both_out5_user_V_U_apdone_blk : STD_LOGIC;
    signal out5_TUSER_int : STD_LOGIC_VECTOR (10 downto 0);
    signal regslice_both_out5_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out5_user_V_U_vld_out : STD_LOGIC;
    signal out6_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal out6_TVALID_int : STD_LOGIC;
    signal out6_TREADY_int : STD_LOGIC;
    signal regslice_both_out6_data_val_U_vld_out : STD_LOGIC;
    signal regslice_both_out6_user_V_U_apdone_blk : STD_LOGIC;
    signal out6_TUSER_int : STD_LOGIC_VECTOR (10 downto 0);
    signal regslice_both_out6_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out6_user_V_U_vld_out : STD_LOGIC;
    signal out7_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal out7_TVALID_int : STD_LOGIC;
    signal out7_TREADY_int : STD_LOGIC;
    signal regslice_both_out7_data_val_U_vld_out : STD_LOGIC;
    signal regslice_both_out7_user_V_U_apdone_blk : STD_LOGIC;
    signal out7_TUSER_int : STD_LOGIC_VECTOR (10 downto 0);
    signal regslice_both_out7_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out7_user_V_U_vld_out : STD_LOGIC;

    component bin_to_res_buff_mjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (511 downto 0);
        din1 : IN STD_LOGIC_VECTOR (511 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component bin_to_res_buff_mbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component bin_to_res_buff_multibuffer_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        rid_to_bin_V_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rid_to_bin_V_ce0 : IN STD_LOGIC;
        rid_to_bin_V_q0 : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    bin_iq_cache0_U : component bin_to_res_buff_mbkb
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bin_iq_cache0_address0,
        ce0 => bin_iq_cache0_ce0,
        we0 => bin_iq_cache0_we0,
        d0 => tmp_5_fu_896_p33,
        address1 => bin_iq_cache0_address1,
        ce1 => bin_iq_cache0_ce1,
        q1 => bin_iq_cache0_q1);

    bin_iq_cache1_U : component bin_to_res_buff_mbkb
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bin_iq_cache1_address0,
        ce0 => bin_iq_cache1_ce0,
        we0 => bin_iq_cache1_we0,
        d0 => tmp_5_fu_896_p33,
        address1 => bin_iq_cache1_address1,
        ce1 => bin_iq_cache1_ce1,
        q1 => bin_iq_cache1_q1);

    bin_iq_cache2_U : component bin_to_res_buff_mbkb
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bin_iq_cache2_address0,
        ce0 => bin_iq_cache2_ce0,
        we0 => bin_iq_cache2_we0,
        d0 => tmp_5_fu_896_p33,
        address1 => bin_iq_cache2_address1,
        ce1 => bin_iq_cache2_ce1,
        q1 => bin_iq_cache2_q1);

    bin_iq_cache3_U : component bin_to_res_buff_mbkb
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bin_iq_cache3_address0,
        ce0 => bin_iq_cache3_ce0,
        we0 => bin_iq_cache3_we0,
        d0 => tmp_5_fu_896_p33,
        address1 => bin_iq_cache3_address1,
        ce1 => bin_iq_cache3_ce1,
        q1 => bin_iq_cache3_q1);

    bin_iq_cache4_U : component bin_to_res_buff_mbkb
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bin_iq_cache4_address0,
        ce0 => bin_iq_cache4_ce0,
        we0 => bin_iq_cache4_we0,
        d0 => tmp_5_fu_896_p33,
        address1 => bin_iq_cache4_address1,
        ce1 => bin_iq_cache4_ce1,
        q1 => bin_iq_cache4_q1);

    bin_iq_cache5_U : component bin_to_res_buff_mbkb
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bin_iq_cache5_address0,
        ce0 => bin_iq_cache5_ce0,
        we0 => bin_iq_cache5_we0,
        d0 => tmp_5_fu_896_p33,
        address1 => bin_iq_cache5_address1,
        ce1 => bin_iq_cache5_ce1,
        q1 => bin_iq_cache5_q1);

    bin_iq_cache6_U : component bin_to_res_buff_mbkb
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bin_iq_cache6_address0,
        ce0 => bin_iq_cache6_ce0,
        we0 => bin_iq_cache6_we0,
        d0 => tmp_5_fu_896_p33,
        address1 => bin_iq_cache6_address1,
        ce1 => bin_iq_cache6_ce1,
        q1 => bin_iq_cache6_q1);

    bin_iq_cache7_U : component bin_to_res_buff_mbkb
    generic map (
        DataWidth => 512,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bin_iq_cache7_address0,
        ce0 => bin_iq_cache7_ce0,
        we0 => bin_iq_cache7_we0,
        d0 => tmp_5_fu_896_p33,
        address1 => bin_iq_cache7_address1,
        ce1 => bin_iq_cache7_ce1,
        q1 => bin_iq_cache7_q1);

    bin_to_res_buff_multibuffer_AXILiteS_s_axi_U : component bin_to_res_buff_multibuffer_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        rid_to_bin_V_address0 => rid_to_bin_V_address0,
        rid_to_bin_V_ce0 => rid_to_bin_V_ce0,
        rid_to_bin_V_q0 => rid_to_bin_V_q0);

    bin_to_res_buff_mjbC_U1 : component bin_to_res_buff_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 1,
        din0_WIDTH => 512,
        din1_WIDTH => 10,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => select_ln180_1_reg_2293,
        din1 => grp_fu_1611_p1,
        ce => grp_fu_1611_ce,
        dout => grp_fu_1611_p2);

    bin_to_res_buff_mjbC_U2 : component bin_to_res_buff_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 1,
        din0_WIDTH => 512,
        din1_WIDTH => 10,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => select_ln180_4_reg_2319,
        din1 => grp_fu_1645_p1,
        ce => grp_fu_1645_ce,
        dout => grp_fu_1645_p2);

    bin_to_res_buff_mjbC_U3 : component bin_to_res_buff_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 1,
        din0_WIDTH => 512,
        din1_WIDTH => 10,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => select_ln180_7_reg_2345,
        din1 => grp_fu_1679_p1,
        ce => grp_fu_1679_ce,
        dout => grp_fu_1679_p2);

    bin_to_res_buff_mjbC_U4 : component bin_to_res_buff_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 1,
        din0_WIDTH => 512,
        din1_WIDTH => 10,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => select_ln180_10_reg_2371,
        din1 => grp_fu_1713_p1,
        ce => grp_fu_1713_ce,
        dout => grp_fu_1713_p2);

    bin_to_res_buff_mjbC_U5 : component bin_to_res_buff_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 1,
        din0_WIDTH => 512,
        din1_WIDTH => 10,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => select_ln180_13_reg_2397,
        din1 => grp_fu_1747_p1,
        ce => grp_fu_1747_ce,
        dout => grp_fu_1747_p2);

    bin_to_res_buff_mjbC_U6 : component bin_to_res_buff_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 1,
        din0_WIDTH => 512,
        din1_WIDTH => 10,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => select_ln180_16_reg_2423,
        din1 => grp_fu_1781_p1,
        ce => grp_fu_1781_ce,
        dout => grp_fu_1781_p2);

    bin_to_res_buff_mjbC_U7 : component bin_to_res_buff_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 1,
        din0_WIDTH => 512,
        din1_WIDTH => 10,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => select_ln180_19_reg_2449,
        din1 => grp_fu_1815_p1,
        ce => grp_fu_1815_ce,
        dout => grp_fu_1815_p2);

    bin_to_res_buff_mjbC_U8 : component bin_to_res_buff_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        OP => 1,
        din0_WIDTH => 512,
        din1_WIDTH => 10,
        dout_WIDTH => 512)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => select_ln180_22_reg_2475,
        din1 => grp_fu_1849_p1,
        ce => grp_fu_1849_ce,
        dout => grp_fu_1849_p2);

    regslice_both_i_stream_data_val_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => i_stream_TDATA,
        vld_in => i_stream_TVALID,
        ack_in => regslice_both_i_stream_data_val_V_U_ack_in,
        data_out => i_stream_TDATA_int,
        vld_out => i_stream_TVALID_int,
        ack_out => i_stream_TREADY_int,
        apdone_blk => regslice_both_i_stream_data_val_V_U_apdone_blk);

    regslice_both_i_stream_user_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => i_stream_TUSER,
        vld_in => i_stream_TVALID,
        ack_in => regslice_both_i_stream_user_V_U_ack_in,
        data_out => i_stream_TUSER_int,
        vld_out => regslice_both_i_stream_user_V_U_vld_out,
        ack_out => i_stream_TREADY_int,
        apdone_blk => regslice_both_i_stream_user_V_U_apdone_blk);

    regslice_both_q_stream_data_val_V_U : component regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => q_stream_TDATA,
        vld_in => q_stream_TVALID,
        ack_in => regslice_both_q_stream_data_val_V_U_ack_in,
        data_out => q_stream_TDATA_int,
        vld_out => q_stream_TVALID_int,
        ack_out => q_stream_TREADY_int,
        apdone_blk => regslice_both_q_stream_data_val_V_U_apdone_blk);

    regslice_both_q_stream_user_V_U : component regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => q_stream_TUSER,
        vld_in => q_stream_TVALID,
        ack_in => regslice_both_q_stream_user_V_U_ack_in,
        data_out => q_stream_TUSER_int,
        vld_out => regslice_both_q_stream_user_V_U_vld_out,
        ack_out => q_stream_TREADY_int,
        apdone_blk => regslice_both_q_stream_user_V_U_apdone_blk);

    regslice_both_out0_data_val_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out0_TDATA_int,
        vld_in => out0_TVALID_int,
        ack_in => out0_TREADY_int,
        data_out => out0_TDATA,
        vld_out => regslice_both_out0_data_val_U_vld_out,
        ack_out => out0_TREADY,
        apdone_blk => regslice_both_out0_data_val_U_apdone_blk);

    regslice_both_out0_user_V_U : component regslice_both
    generic map (
        DataWidth => 11)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => id_ndx_V,
        vld_in => out0_TVALID_int,
        ack_in => regslice_both_out0_user_V_U_ack_in_dummy,
        data_out => out0_TUSER,
        vld_out => regslice_both_out0_user_V_U_vld_out,
        ack_out => out0_TREADY,
        apdone_blk => regslice_both_out0_user_V_U_apdone_blk);

    regslice_both_out1_data_val_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out1_TDATA_int,
        vld_in => out1_TVALID_int,
        ack_in => out1_TREADY_int,
        data_out => out1_TDATA,
        vld_out => regslice_both_out1_data_val_U_vld_out,
        ack_out => out1_TREADY,
        apdone_blk => regslice_both_out1_data_val_U_apdone_blk);

    regslice_both_out1_user_V_U : component regslice_both
    generic map (
        DataWidth => 11)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out1_TUSER_int,
        vld_in => out1_TVALID_int,
        ack_in => regslice_both_out1_user_V_U_ack_in_dummy,
        data_out => out1_TUSER,
        vld_out => regslice_both_out1_user_V_U_vld_out,
        ack_out => out1_TREADY,
        apdone_blk => regslice_both_out1_user_V_U_apdone_blk);

    regslice_both_out2_data_val_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out2_TDATA_int,
        vld_in => out2_TVALID_int,
        ack_in => out2_TREADY_int,
        data_out => out2_TDATA,
        vld_out => regslice_both_out2_data_val_U_vld_out,
        ack_out => out2_TREADY,
        apdone_blk => regslice_both_out2_data_val_U_apdone_blk);

    regslice_both_out2_user_V_U : component regslice_both
    generic map (
        DataWidth => 11)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out2_TUSER_int,
        vld_in => out2_TVALID_int,
        ack_in => regslice_both_out2_user_V_U_ack_in_dummy,
        data_out => out2_TUSER,
        vld_out => regslice_both_out2_user_V_U_vld_out,
        ack_out => out2_TREADY,
        apdone_blk => regslice_both_out2_user_V_U_apdone_blk);

    regslice_both_out3_data_val_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out3_TDATA_int,
        vld_in => out3_TVALID_int,
        ack_in => out3_TREADY_int,
        data_out => out3_TDATA,
        vld_out => regslice_both_out3_data_val_U_vld_out,
        ack_out => out3_TREADY,
        apdone_blk => regslice_both_out3_data_val_U_apdone_blk);

    regslice_both_out3_user_V_U : component regslice_both
    generic map (
        DataWidth => 11)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out3_TUSER_int,
        vld_in => out3_TVALID_int,
        ack_in => regslice_both_out3_user_V_U_ack_in_dummy,
        data_out => out3_TUSER,
        vld_out => regslice_both_out3_user_V_U_vld_out,
        ack_out => out3_TREADY,
        apdone_blk => regslice_both_out3_user_V_U_apdone_blk);

    regslice_both_out4_data_val_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out4_TDATA_int,
        vld_in => out4_TVALID_int,
        ack_in => out4_TREADY_int,
        data_out => out4_TDATA,
        vld_out => regslice_both_out4_data_val_U_vld_out,
        ack_out => out4_TREADY,
        apdone_blk => regslice_both_out4_data_val_U_apdone_blk);

    regslice_both_out4_user_V_U : component regslice_both
    generic map (
        DataWidth => 11)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out4_TUSER_int,
        vld_in => out4_TVALID_int,
        ack_in => regslice_both_out4_user_V_U_ack_in_dummy,
        data_out => out4_TUSER,
        vld_out => regslice_both_out4_user_V_U_vld_out,
        ack_out => out4_TREADY,
        apdone_blk => regslice_both_out4_user_V_U_apdone_blk);

    regslice_both_out5_data_val_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out5_TDATA_int,
        vld_in => out5_TVALID_int,
        ack_in => out5_TREADY_int,
        data_out => out5_TDATA,
        vld_out => regslice_both_out5_data_val_U_vld_out,
        ack_out => out5_TREADY,
        apdone_blk => regslice_both_out5_data_val_U_apdone_blk);

    regslice_both_out5_user_V_U : component regslice_both
    generic map (
        DataWidth => 11)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out5_TUSER_int,
        vld_in => out5_TVALID_int,
        ack_in => regslice_both_out5_user_V_U_ack_in_dummy,
        data_out => out5_TUSER,
        vld_out => regslice_both_out5_user_V_U_vld_out,
        ack_out => out5_TREADY,
        apdone_blk => regslice_both_out5_user_V_U_apdone_blk);

    regslice_both_out6_data_val_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out6_TDATA_int,
        vld_in => out6_TVALID_int,
        ack_in => out6_TREADY_int,
        data_out => out6_TDATA,
        vld_out => regslice_both_out6_data_val_U_vld_out,
        ack_out => out6_TREADY,
        apdone_blk => regslice_both_out6_data_val_U_apdone_blk);

    regslice_both_out6_user_V_U : component regslice_both
    generic map (
        DataWidth => 11)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out6_TUSER_int,
        vld_in => out6_TVALID_int,
        ack_in => regslice_both_out6_user_V_U_ack_in_dummy,
        data_out => out6_TUSER,
        vld_out => regslice_both_out6_user_V_U_vld_out,
        ack_out => out6_TREADY,
        apdone_blk => regslice_both_out6_user_V_U_apdone_blk);

    regslice_both_out7_data_val_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out7_TDATA_int,
        vld_in => out7_TVALID_int,
        ack_in => out7_TREADY_int,
        data_out => out7_TDATA,
        vld_out => regslice_both_out7_data_val_U_vld_out,
        ack_out => out7_TREADY,
        apdone_blk => regslice_both_out7_data_val_U_apdone_blk);

    regslice_both_out7_user_V_U : component regslice_both
    generic map (
        DataWidth => 11)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out7_TUSER_int,
        vld_in => out7_TVALID_int,
        ack_in => regslice_both_out7_user_V_U_ack_in_dummy,
        data_out => out7_TUSER,
        vld_out => regslice_both_out7_user_V_U_vld_out,
        ack_out => out7_TREADY,
        apdone_blk => regslice_both_out7_user_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bin_iq_cache0_load_reg_2197 <= bin_iq_cache0_q1;
                bin_iq_cache1_load_reg_2207 <= bin_iq_cache1_q1;
                bin_iq_cache2_load_reg_2217 <= bin_iq_cache2_q1;
                bin_iq_cache3_load_reg_2227 <= bin_iq_cache3_q1;
                bin_iq_cache4_load_reg_2237 <= bin_iq_cache4_q1;
                bin_iq_cache5_load_reg_2247 <= bin_iq_cache5_q1;
                bin_iq_cache6_load_reg_2257 <= bin_iq_cache6_q1;
                bin_iq_cache7_load_reg_2267 <= bin_iq_cache7_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                    empty_10_reg_2303(8 downto 5) <= empty_10_fu_1288_p2(8 downto 5);
                    empty_11_reg_2329(8 downto 5) <= empty_11_fu_1331_p2(8 downto 5);
                    empty_12_reg_2355(8 downto 5) <= empty_12_fu_1374_p2(8 downto 5);
                    empty_13_reg_2381(8 downto 5) <= empty_13_fu_1417_p2(8 downto 5);
                    empty_14_reg_2407(8 downto 5) <= empty_14_fu_1460_p2(8 downto 5);
                    empty_15_reg_2433(8 downto 5) <= empty_15_fu_1503_p2(8 downto 5);
                    empty_16_reg_2459(8 downto 5) <= empty_16_fu_1546_p2(8 downto 5);
                empty_8_reg_2082 <= empty_8_fu_982_p1;
                empty_8_reg_2082_pp0_iter3_reg <= empty_8_reg_2082;
                empty_8_reg_2082_pp0_iter4_reg <= empty_8_reg_2082_pp0_iter3_reg;
                empty_8_reg_2082_pp0_iter5_reg <= empty_8_reg_2082_pp0_iter4_reg;
                    empty_9_reg_2277(8 downto 5) <= empty_9_fu_1245_p2(8 downto 5);
                icmp_ln180_1_reg_2308 <= icmp_ln180_1_fu_1294_p2;
                icmp_ln180_2_reg_2334 <= icmp_ln180_2_fu_1337_p2;
                icmp_ln180_3_reg_2360 <= icmp_ln180_3_fu_1380_p2;
                icmp_ln180_4_reg_2386 <= icmp_ln180_4_fu_1423_p2;
                icmp_ln180_5_reg_2412 <= icmp_ln180_5_fu_1466_p2;
                icmp_ln180_6_reg_2438 <= icmp_ln180_6_fu_1509_p2;
                icmp_ln180_7_reg_2464 <= icmp_ln180_7_fu_1552_p2;
                icmp_ln180_reg_2282 <= icmp_ln180_fu_1251_p2;
                lshr_ln180_10_reg_2590 <= grp_fu_1781_p2;
                lshr_ln180_12_reg_2595 <= grp_fu_1815_p2;
                lshr_ln180_14_reg_2600 <= grp_fu_1849_p2;
                lshr_ln180_2_reg_2570 <= grp_fu_1645_p2;
                lshr_ln180_4_reg_2575 <= grp_fu_1679_p2;
                lshr_ln180_6_reg_2580 <= grp_fu_1713_p2;
                lshr_ln180_8_reg_2585 <= grp_fu_1747_p2;
                lshr_ln180_reg_2565 <= grp_fu_1611_p2;
                p_Result_1_reg_2077 <= rid_to_bin_V_q0(11 downto 4);
                p_Result_2_reg_2137 <= rid_to_bin_V_q0(83 downto 76);
                p_Result_3_reg_2087 <= rid_to_bin_V_q0(23 downto 16);
                p_Result_4_reg_2147 <= rid_to_bin_V_q0(95 downto 88);
                p_Result_5_reg_2097 <= rid_to_bin_V_q0(35 downto 28);
                p_Result_7_reg_2107 <= rid_to_bin_V_q0(47 downto 40);
                p_Result_9_reg_2117 <= rid_to_bin_V_q0(59 downto 52);
                p_Result_s_reg_2127 <= rid_to_bin_V_q0(71 downto 64);
                select_ln180_10_reg_2371 <= select_ln180_10_fu_1396_p3;
                select_ln180_11_reg_2376 <= select_ln180_11_fu_1402_p3;
                select_ln180_13_reg_2397 <= select_ln180_13_fu_1439_p3;
                select_ln180_14_reg_2402 <= select_ln180_14_fu_1445_p3;
                select_ln180_16_reg_2423 <= select_ln180_16_fu_1482_p3;
                select_ln180_17_reg_2428 <= select_ln180_17_fu_1488_p3;
                select_ln180_19_reg_2449 <= select_ln180_19_fu_1525_p3;
                select_ln180_1_reg_2293 <= select_ln180_1_fu_1267_p3;
                select_ln180_20_reg_2454 <= select_ln180_20_fu_1531_p3;
                select_ln180_22_reg_2475 <= select_ln180_22_fu_1568_p3;
                select_ln180_23_reg_2480 <= select_ln180_23_fu_1574_p3;
                select_ln180_2_reg_2298 <= select_ln180_2_fu_1273_p3;
                select_ln180_4_reg_2319 <= select_ln180_4_fu_1310_p3;
                select_ln180_5_reg_2324 <= select_ln180_5_fu_1316_p3;
                select_ln180_7_reg_2345 <= select_ln180_7_fu_1353_p3;
                select_ln180_8_reg_2350 <= select_ln180_8_fu_1359_p3;
                    sub_ln180_11_reg_2515(9 downto 1) <= sub_ln180_11_fu_1704_p2(9 downto 1);
                    sub_ln180_11_reg_2515_pp0_iter10_reg(9 downto 1) <= sub_ln180_11_reg_2515_pp0_iter9_reg(9 downto 1);
                    sub_ln180_11_reg_2515_pp0_iter8_reg(9 downto 1) <= sub_ln180_11_reg_2515(9 downto 1);
                    sub_ln180_11_reg_2515_pp0_iter9_reg(9 downto 1) <= sub_ln180_11_reg_2515_pp0_iter8_reg(9 downto 1);
                    sub_ln180_14_reg_2525(9 downto 1) <= sub_ln180_14_fu_1738_p2(9 downto 1);
                    sub_ln180_14_reg_2525_pp0_iter10_reg(9 downto 1) <= sub_ln180_14_reg_2525_pp0_iter9_reg(9 downto 1);
                    sub_ln180_14_reg_2525_pp0_iter8_reg(9 downto 1) <= sub_ln180_14_reg_2525(9 downto 1);
                    sub_ln180_14_reg_2525_pp0_iter9_reg(9 downto 1) <= sub_ln180_14_reg_2525_pp0_iter8_reg(9 downto 1);
                    sub_ln180_17_reg_2535(9 downto 1) <= sub_ln180_17_fu_1772_p2(9 downto 1);
                    sub_ln180_17_reg_2535_pp0_iter10_reg(9 downto 1) <= sub_ln180_17_reg_2535_pp0_iter9_reg(9 downto 1);
                    sub_ln180_17_reg_2535_pp0_iter8_reg(9 downto 1) <= sub_ln180_17_reg_2535(9 downto 1);
                    sub_ln180_17_reg_2535_pp0_iter9_reg(9 downto 1) <= sub_ln180_17_reg_2535_pp0_iter8_reg(9 downto 1);
                    sub_ln180_20_reg_2545(9 downto 1) <= sub_ln180_20_fu_1806_p2(9 downto 1);
                    sub_ln180_20_reg_2545_pp0_iter10_reg(9 downto 1) <= sub_ln180_20_reg_2545_pp0_iter9_reg(9 downto 1);
                    sub_ln180_20_reg_2545_pp0_iter8_reg(9 downto 1) <= sub_ln180_20_reg_2545(9 downto 1);
                    sub_ln180_20_reg_2545_pp0_iter9_reg(9 downto 1) <= sub_ln180_20_reg_2545_pp0_iter8_reg(9 downto 1);
                    sub_ln180_23_reg_2555(9 downto 1) <= sub_ln180_23_fu_1840_p2(9 downto 1);
                    sub_ln180_23_reg_2555_pp0_iter10_reg(9 downto 1) <= sub_ln180_23_reg_2555_pp0_iter9_reg(9 downto 1);
                    sub_ln180_23_reg_2555_pp0_iter8_reg(9 downto 1) <= sub_ln180_23_reg_2555(9 downto 1);
                    sub_ln180_23_reg_2555_pp0_iter9_reg(9 downto 1) <= sub_ln180_23_reg_2555_pp0_iter8_reg(9 downto 1);
                    sub_ln180_2_reg_2485(9 downto 1) <= sub_ln180_2_fu_1602_p2(9 downto 1);
                    sub_ln180_2_reg_2485_pp0_iter10_reg(9 downto 1) <= sub_ln180_2_reg_2485_pp0_iter9_reg(9 downto 1);
                    sub_ln180_2_reg_2485_pp0_iter8_reg(9 downto 1) <= sub_ln180_2_reg_2485(9 downto 1);
                    sub_ln180_2_reg_2485_pp0_iter9_reg(9 downto 1) <= sub_ln180_2_reg_2485_pp0_iter8_reg(9 downto 1);
                    sub_ln180_5_reg_2495(9 downto 1) <= sub_ln180_5_fu_1636_p2(9 downto 1);
                    sub_ln180_5_reg_2495_pp0_iter10_reg(9 downto 1) <= sub_ln180_5_reg_2495_pp0_iter9_reg(9 downto 1);
                    sub_ln180_5_reg_2495_pp0_iter8_reg(9 downto 1) <= sub_ln180_5_reg_2495(9 downto 1);
                    sub_ln180_5_reg_2495_pp0_iter9_reg(9 downto 1) <= sub_ln180_5_reg_2495_pp0_iter8_reg(9 downto 1);
                    sub_ln180_8_reg_2505(9 downto 1) <= sub_ln180_8_fu_1670_p2(9 downto 1);
                    sub_ln180_8_reg_2505_pp0_iter10_reg(9 downto 1) <= sub_ln180_8_reg_2505_pp0_iter9_reg(9 downto 1);
                    sub_ln180_8_reg_2505_pp0_iter8_reg(9 downto 1) <= sub_ln180_8_reg_2505(9 downto 1);
                    sub_ln180_8_reg_2505_pp0_iter9_reg(9 downto 1) <= sub_ln180_8_reg_2505_pp0_iter8_reg(9 downto 1);
                tmp_10_reg_2232 <= tmp_10_fu_1188_p4;
                tmp_11_reg_2122 <= rid_to_bin_V_q0(51 downto 48);
                tmp_11_reg_2122_pp0_iter3_reg <= tmp_11_reg_2122;
                tmp_11_reg_2122_pp0_iter4_reg <= tmp_11_reg_2122_pp0_iter3_reg;
                tmp_11_reg_2122_pp0_iter5_reg <= tmp_11_reg_2122_pp0_iter4_reg;
                tmp_13_reg_2242 <= tmp_13_fu_1198_p4;
                tmp_14_reg_2132 <= rid_to_bin_V_q0(63 downto 60);
                tmp_14_reg_2132_pp0_iter3_reg <= tmp_14_reg_2132;
                tmp_14_reg_2132_pp0_iter4_reg <= tmp_14_reg_2132_pp0_iter3_reg;
                tmp_14_reg_2132_pp0_iter5_reg <= tmp_14_reg_2132_pp0_iter4_reg;
                tmp_16_reg_2252 <= tmp_16_fu_1208_p4;
                tmp_17_reg_2142 <= rid_to_bin_V_q0(75 downto 72);
                tmp_17_reg_2142_pp0_iter3_reg <= tmp_17_reg_2142;
                tmp_17_reg_2142_pp0_iter4_reg <= tmp_17_reg_2142_pp0_iter3_reg;
                tmp_17_reg_2142_pp0_iter5_reg <= tmp_17_reg_2142_pp0_iter4_reg;
                tmp_19_reg_2262 <= tmp_19_fu_1218_p4;
                tmp_20_reg_2152 <= rid_to_bin_V_q0(87 downto 84);
                tmp_20_reg_2152_pp0_iter3_reg <= tmp_20_reg_2152;
                tmp_20_reg_2152_pp0_iter4_reg <= tmp_20_reg_2152_pp0_iter3_reg;
                tmp_20_reg_2152_pp0_iter5_reg <= tmp_20_reg_2152_pp0_iter4_reg;
                tmp_22_reg_2272 <= tmp_22_fu_1228_p4;
                tmp_2_reg_2212 <= tmp_2_fu_1168_p4;
                tmp_3_reg_2102 <= rid_to_bin_V_q0(27 downto 24);
                tmp_3_reg_2102_pp0_iter3_reg <= tmp_3_reg_2102;
                tmp_3_reg_2102_pp0_iter4_reg <= tmp_3_reg_2102_pp0_iter3_reg;
                tmp_3_reg_2102_pp0_iter5_reg <= tmp_3_reg_2102_pp0_iter4_reg;
                tmp_6_reg_2222 <= tmp_6_fu_1178_p4;
                tmp_8_reg_2112 <= rid_to_bin_V_q0(39 downto 36);
                tmp_8_reg_2112_pp0_iter3_reg <= tmp_8_reg_2112;
                tmp_8_reg_2112_pp0_iter4_reg <= tmp_8_reg_2112_pp0_iter3_reg;
                tmp_8_reg_2112_pp0_iter5_reg <= tmp_8_reg_2112_pp0_iter4_reg;
                tmp_reg_2202 <= tmp_fu_1158_p4;
                tmp_s_reg_2092 <= rid_to_bin_V_q0(15 downto 12);
                tmp_s_reg_2092_pp0_iter3_reg <= tmp_s_reg_2092;
                tmp_s_reg_2092_pp0_iter4_reg <= tmp_s_reg_2092_pp0_iter3_reg;
                tmp_s_reg_2092_pp0_iter5_reg <= tmp_s_reg_2092_pp0_iter4_reg;
                    zext_ln180_12_reg_2365(8 downto 5) <= zext_ln180_12_fu_1386_p1(8 downto 5);
                    zext_ln180_16_reg_2391(8 downto 5) <= zext_ln180_16_fu_1429_p1(8 downto 5);
                    zext_ln180_20_reg_2417(8 downto 5) <= zext_ln180_20_fu_1472_p1(8 downto 5);
                    zext_ln180_24_reg_2443(8 downto 5) <= zext_ln180_24_fu_1515_p1(8 downto 5);
                    zext_ln180_28_reg_2469(8 downto 5) <= zext_ln180_28_fu_1558_p1(8 downto 5);
                    zext_ln180_4_reg_2313(8 downto 5) <= zext_ln180_4_fu_1300_p1(8 downto 5);
                    zext_ln180_8_reg_2339(8 downto 5) <= zext_ln180_8_fu_1343_p1(8 downto 5);
                    zext_ln180_reg_2287(8 downto 5) <= zext_ln180_fu_1257_p1(8 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                id_ndx_V <= add_ln700_fu_2060_p2;
            end if;
        end if;
    end process;
    empty_9_reg_2277(4 downto 0) <= "11111";
    zext_ln180_reg_2287(4 downto 0) <= "00000";
    zext_ln180_reg_2287(9) <= '0';
    empty_10_reg_2303(4 downto 0) <= "11111";
    zext_ln180_4_reg_2313(4 downto 0) <= "00000";
    zext_ln180_4_reg_2313(9) <= '0';
    empty_11_reg_2329(4 downto 0) <= "11111";
    zext_ln180_8_reg_2339(4 downto 0) <= "00000";
    zext_ln180_8_reg_2339(9) <= '0';
    empty_12_reg_2355(4 downto 0) <= "11111";
    zext_ln180_12_reg_2365(4 downto 0) <= "00000";
    zext_ln180_12_reg_2365(9) <= '0';
    empty_13_reg_2381(4 downto 0) <= "11111";
    zext_ln180_16_reg_2391(4 downto 0) <= "00000";
    zext_ln180_16_reg_2391(9) <= '0';
    empty_14_reg_2407(4 downto 0) <= "11111";
    zext_ln180_20_reg_2417(4 downto 0) <= "00000";
    zext_ln180_20_reg_2417(9) <= '0';
    empty_15_reg_2433(4 downto 0) <= "11111";
    zext_ln180_24_reg_2443(4 downto 0) <= "00000";
    zext_ln180_24_reg_2443(9) <= '0';
    empty_16_reg_2459(4 downto 0) <= "11111";
    zext_ln180_28_reg_2469(4 downto 0) <= "00000";
    zext_ln180_28_reg_2469(9) <= '0';
    sub_ln180_2_reg_2485(0) <= '0';
    sub_ln180_2_reg_2485_pp0_iter8_reg(0) <= '0';
    sub_ln180_2_reg_2485_pp0_iter9_reg(0) <= '0';
    sub_ln180_2_reg_2485_pp0_iter10_reg(0) <= '0';
    sub_ln180_5_reg_2495(0) <= '0';
    sub_ln180_5_reg_2495_pp0_iter8_reg(0) <= '0';
    sub_ln180_5_reg_2495_pp0_iter9_reg(0) <= '0';
    sub_ln180_5_reg_2495_pp0_iter10_reg(0) <= '0';
    sub_ln180_8_reg_2505(0) <= '0';
    sub_ln180_8_reg_2505_pp0_iter8_reg(0) <= '0';
    sub_ln180_8_reg_2505_pp0_iter9_reg(0) <= '0';
    sub_ln180_8_reg_2505_pp0_iter10_reg(0) <= '0';
    sub_ln180_11_reg_2515(0) <= '0';
    sub_ln180_11_reg_2515_pp0_iter8_reg(0) <= '0';
    sub_ln180_11_reg_2515_pp0_iter9_reg(0) <= '0';
    sub_ln180_11_reg_2515_pp0_iter10_reg(0) <= '0';
    sub_ln180_14_reg_2525(0) <= '0';
    sub_ln180_14_reg_2525_pp0_iter8_reg(0) <= '0';
    sub_ln180_14_reg_2525_pp0_iter9_reg(0) <= '0';
    sub_ln180_14_reg_2525_pp0_iter10_reg(0) <= '0';
    sub_ln180_17_reg_2535(0) <= '0';
    sub_ln180_17_reg_2535_pp0_iter8_reg(0) <= '0';
    sub_ln180_17_reg_2535_pp0_iter9_reg(0) <= '0';
    sub_ln180_17_reg_2535_pp0_iter10_reg(0) <= '0';
    sub_ln180_20_reg_2545(0) <= '0';
    sub_ln180_20_reg_2545_pp0_iter8_reg(0) <= '0';
    sub_ln180_20_reg_2545_pp0_iter9_reg(0) <= '0';
    sub_ln180_20_reg_2545_pp0_iter10_reg(0) <= '0';
    sub_ln180_23_reg_2555(0) <= '0';
    sub_ln180_23_reg_2555_pp0_iter8_reg(0) <= '0';
    sub_ln180_23_reg_2555_pp0_iter9_reg(0) <= '0';
    sub_ln180_23_reg_2555_pp0_iter10_reg(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln700_fu_2060_p2 <= std_logic_vector(unsigned(ap_const_lv11_8) + unsigned(id_ndx_V));
    and_ln180_1_fu_1887_p2 <= (lshr_ln180_3_fu_1881_p2 and lshr_ln180_2_reg_2570);
    and_ln180_2_fu_1913_p2 <= (lshr_ln180_5_fu_1907_p2 and lshr_ln180_4_reg_2575);
    and_ln180_3_fu_1939_p2 <= (lshr_ln180_7_fu_1933_p2 and lshr_ln180_6_reg_2580);
    and_ln180_4_fu_1965_p2 <= (lshr_ln180_9_fu_1959_p2 and lshr_ln180_8_reg_2585);
    and_ln180_5_fu_1991_p2 <= (lshr_ln180_11_fu_1985_p2 and lshr_ln180_10_reg_2590);
    and_ln180_6_fu_2017_p2 <= (lshr_ln180_13_fu_2011_p2 and lshr_ln180_12_reg_2595);
    and_ln180_7_fu_2043_p2 <= (lshr_ln180_15_fu_2037_p2 and lshr_ln180_14_reg_2600);
    and_ln180_fu_1863_p2 <= (lshr_ln180_reg_2565 and lshr_ln180_1_fu_1857_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter12, regslice_both_out0_data_val_U_apdone_blk, regslice_both_out1_data_val_U_apdone_blk, regslice_both_out2_data_val_U_apdone_blk, regslice_both_out3_data_val_U_apdone_blk, regslice_both_out4_data_val_U_apdone_blk, regslice_both_out5_data_val_U_apdone_blk, regslice_both_out6_data_val_U_apdone_blk, regslice_both_out7_data_val_U_apdone_blk, i_stream_TVALID_int, q_stream_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (q_stream_TVALID_int = ap_const_logic_0) or (i_stream_TVALID_int = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and ((regslice_both_out7_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out6_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out5_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out4_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out3_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out2_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out1_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out0_data_val_U_apdone_blk = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_block_state12_io, regslice_both_out0_data_val_U_apdone_blk, regslice_both_out1_data_val_U_apdone_blk, regslice_both_out2_data_val_U_apdone_blk, regslice_both_out3_data_val_U_apdone_blk, regslice_both_out4_data_val_U_apdone_blk, regslice_both_out5_data_val_U_apdone_blk, regslice_both_out6_data_val_U_apdone_blk, regslice_both_out7_data_val_U_apdone_blk, ap_block_state13_io, i_stream_TVALID_int, q_stream_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (q_stream_TVALID_int = ap_const_logic_0) or (i_stream_TVALID_int = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and ((regslice_both_out7_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out6_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out5_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out4_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out3_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out2_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out1_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out0_data_val_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state13_io))) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_block_state12_io, regslice_both_out0_data_val_U_apdone_blk, regslice_both_out1_data_val_U_apdone_blk, regslice_both_out2_data_val_U_apdone_blk, regslice_both_out3_data_val_U_apdone_blk, regslice_both_out4_data_val_U_apdone_blk, regslice_both_out5_data_val_U_apdone_blk, regslice_both_out6_data_val_U_apdone_blk, regslice_both_out7_data_val_U_apdone_blk, ap_block_state13_io, i_stream_TVALID_int, q_stream_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (q_stream_TVALID_int = ap_const_logic_0) or (i_stream_TVALID_int = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and ((regslice_both_out7_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out6_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out5_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out4_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out3_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out2_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out1_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out0_data_val_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state13_io))) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_io_assign_proc : process(out0_TREADY_int, out1_TREADY_int, out2_TREADY_int, out3_TREADY_int, out4_TREADY_int, out5_TREADY_int, out6_TREADY_int, out7_TREADY_int)
    begin
                ap_block_state12_io <= ((out7_TREADY_int = ap_const_logic_0) or (out6_TREADY_int = ap_const_logic_0) or (out5_TREADY_int = ap_const_logic_0) or (out4_TREADY_int = ap_const_logic_0) or (out3_TREADY_int = ap_const_logic_0) or (out2_TREADY_int = ap_const_logic_0) or (out1_TREADY_int = ap_const_logic_0) or (out0_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_io_assign_proc : process(out0_TREADY_int, out1_TREADY_int, out2_TREADY_int, out3_TREADY_int, out4_TREADY_int, out5_TREADY_int, out6_TREADY_int, out7_TREADY_int)
    begin
                ap_block_state13_io <= ((out7_TREADY_int = ap_const_logic_0) or (out6_TREADY_int = ap_const_logic_0) or (out5_TREADY_int = ap_const_logic_0) or (out4_TREADY_int = ap_const_logic_0) or (out3_TREADY_int = ap_const_logic_0) or (out2_TREADY_int = ap_const_logic_0) or (out1_TREADY_int = ap_const_logic_0) or (out0_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state13_pp0_stage0_iter12_assign_proc : process(regslice_both_out0_data_val_U_apdone_blk, regslice_both_out1_data_val_U_apdone_blk, regslice_both_out2_data_val_U_apdone_blk, regslice_both_out3_data_val_U_apdone_blk, regslice_both_out4_data_val_U_apdone_blk, regslice_both_out5_data_val_U_apdone_blk, regslice_both_out6_data_val_U_apdone_blk, regslice_both_out7_data_val_U_apdone_blk)
    begin
                ap_block_state13_pp0_stage0_iter12 <= ((regslice_both_out7_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out6_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out5_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out4_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out3_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out2_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out1_data_val_U_apdone_blk = ap_const_logic_1) or (regslice_both_out0_data_val_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, i_stream_TVALID_int, q_stream_TVALID_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (q_stream_TVALID_int = ap_const_logic_0) or (i_stream_TVALID_int = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

        ap_enable_operation_100 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_103 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_106 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_109 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_112 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_121 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_123 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_125 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_127 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_129 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_131 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_133 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_135 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_63 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_64 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_65 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_66 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_67 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_68 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_69 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_70 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_91 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_94 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_97 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_enable_state1_pp0_iter0_stage0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0)
    begin
                ap_enable_state1_pp0_iter0_stage0 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state4_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state6_pp0_iter5_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5)
    begin
                ap_enable_state6_pp0_iter5_stage0 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to11_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to11 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to11)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to11 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bin_iq_cache0_address0 <= zext_ln544_fu_571_p1(8 - 1 downto 0);
    bin_iq_cache0_address1 <= zext_ln681_fu_1126_p1(8 - 1 downto 0);

    bin_iq_cache0_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache0_ce0 <= ap_const_logic_1;
        else 
            bin_iq_cache0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache0_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            bin_iq_cache0_ce1 <= ap_const_logic_1;
        else 
            bin_iq_cache0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache0_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache0_we0 <= ap_const_logic_1;
        else 
            bin_iq_cache0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bin_iq_cache1_address0 <= zext_ln544_fu_571_p1(8 - 1 downto 0);
    bin_iq_cache1_address1 <= zext_ln681_1_fu_1130_p1(8 - 1 downto 0);

    bin_iq_cache1_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache1_ce0 <= ap_const_logic_1;
        else 
            bin_iq_cache1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache1_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            bin_iq_cache1_ce1 <= ap_const_logic_1;
        else 
            bin_iq_cache1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache1_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache1_we0 <= ap_const_logic_1;
        else 
            bin_iq_cache1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bin_iq_cache2_address0 <= zext_ln544_fu_571_p1(8 - 1 downto 0);
    bin_iq_cache2_address1 <= zext_ln681_2_fu_1134_p1(8 - 1 downto 0);

    bin_iq_cache2_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache2_ce0 <= ap_const_logic_1;
        else 
            bin_iq_cache2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache2_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            bin_iq_cache2_ce1 <= ap_const_logic_1;
        else 
            bin_iq_cache2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache2_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache2_we0 <= ap_const_logic_1;
        else 
            bin_iq_cache2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bin_iq_cache3_address0 <= zext_ln544_fu_571_p1(8 - 1 downto 0);
    bin_iq_cache3_address1 <= zext_ln681_3_fu_1138_p1(8 - 1 downto 0);

    bin_iq_cache3_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache3_ce0 <= ap_const_logic_1;
        else 
            bin_iq_cache3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache3_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            bin_iq_cache3_ce1 <= ap_const_logic_1;
        else 
            bin_iq_cache3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache3_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache3_we0 <= ap_const_logic_1;
        else 
            bin_iq_cache3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bin_iq_cache4_address0 <= zext_ln544_fu_571_p1(8 - 1 downto 0);
    bin_iq_cache4_address1 <= zext_ln681_4_fu_1142_p1(8 - 1 downto 0);

    bin_iq_cache4_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache4_ce0 <= ap_const_logic_1;
        else 
            bin_iq_cache4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache4_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            bin_iq_cache4_ce1 <= ap_const_logic_1;
        else 
            bin_iq_cache4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache4_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache4_we0 <= ap_const_logic_1;
        else 
            bin_iq_cache4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bin_iq_cache5_address0 <= zext_ln544_fu_571_p1(8 - 1 downto 0);
    bin_iq_cache5_address1 <= zext_ln681_5_fu_1146_p1(8 - 1 downto 0);

    bin_iq_cache5_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache5_ce0 <= ap_const_logic_1;
        else 
            bin_iq_cache5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache5_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            bin_iq_cache5_ce1 <= ap_const_logic_1;
        else 
            bin_iq_cache5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache5_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache5_we0 <= ap_const_logic_1;
        else 
            bin_iq_cache5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bin_iq_cache6_address0 <= zext_ln544_fu_571_p1(8 - 1 downto 0);
    bin_iq_cache6_address1 <= zext_ln681_6_fu_1150_p1(8 - 1 downto 0);

    bin_iq_cache6_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache6_ce0 <= ap_const_logic_1;
        else 
            bin_iq_cache6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache6_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            bin_iq_cache6_ce1 <= ap_const_logic_1;
        else 
            bin_iq_cache6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache6_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache6_we0 <= ap_const_logic_1;
        else 
            bin_iq_cache6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bin_iq_cache7_address0 <= zext_ln544_fu_571_p1(8 - 1 downto 0);
    bin_iq_cache7_address1 <= zext_ln681_7_fu_1154_p1(8 - 1 downto 0);

    bin_iq_cache7_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache7_ce0 <= ap_const_logic_1;
        else 
            bin_iq_cache7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache7_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            bin_iq_cache7_ce1 <= ap_const_logic_1;
        else 
            bin_iq_cache7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bin_iq_cache7_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bin_iq_cache7_we0 <= ap_const_logic_1;
        else 
            bin_iq_cache7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_1288_p2 <= (tmp_1_fu_1281_p3 or ap_const_lv9_1F);
    empty_11_fu_1331_p2 <= (tmp_4_fu_1324_p3 or ap_const_lv9_1F);
    empty_12_fu_1374_p2 <= (tmp_9_fu_1367_p3 or ap_const_lv9_1F);
    empty_13_fu_1417_p2 <= (tmp_12_fu_1410_p3 or ap_const_lv9_1F);
    empty_14_fu_1460_p2 <= (tmp_15_fu_1453_p3 or ap_const_lv9_1F);
    empty_15_fu_1503_p2 <= (tmp_18_fu_1496_p3 or ap_const_lv9_1F);
    empty_16_fu_1546_p2 <= (tmp_21_fu_1539_p3 or ap_const_lv9_1F);
    empty_8_fu_982_p1 <= rid_to_bin_V_q0(4 - 1 downto 0);
    empty_9_fu_1245_p2 <= (tmp_7_fu_1238_p3 or ap_const_lv9_1F);

    grp_fu_1611_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1611_ce <= ap_const_logic_1;
        else 
            grp_fu_1611_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln180_2_reg_2298),512));

    grp_fu_1645_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1645_ce <= ap_const_logic_1;
        else 
            grp_fu_1645_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln180_5_reg_2324),512));

    grp_fu_1679_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1679_ce <= ap_const_logic_1;
        else 
            grp_fu_1679_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln180_8_reg_2350),512));

    grp_fu_1713_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1713_ce <= ap_const_logic_1;
        else 
            grp_fu_1713_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln180_11_reg_2376),512));

    grp_fu_1747_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1747_ce <= ap_const_logic_1;
        else 
            grp_fu_1747_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln180_14_reg_2402),512));

    grp_fu_1781_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1781_ce <= ap_const_logic_1;
        else 
            grp_fu_1781_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln180_17_reg_2428),512));

    grp_fu_1815_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1815_ce <= ap_const_logic_1;
        else 
            grp_fu_1815_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln180_20_reg_2454),512));

    grp_fu_1849_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1849_ce <= ap_const_logic_1;
        else 
            grp_fu_1849_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln180_23_reg_2480),512));

    i_stream_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_stream_TVALID_int)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            i_stream_TDATA_blk_n <= i_stream_TVALID_int;
        else 
            i_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_stream_TREADY_assign_proc : process(i_stream_TVALID, regslice_both_i_stream_data_val_V_U_ack_in)
    begin
        if (((i_stream_TVALID = ap_const_logic_1) and (regslice_both_i_stream_data_val_V_U_ack_in = ap_const_logic_1))) then 
            i_stream_TREADY <= ap_const_logic_1;
        else 
            i_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    i_stream_TREADY_int_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            i_stream_TREADY_int <= ap_const_logic_1;
        else 
            i_stream_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln180_1_fu_1294_p2 <= "1" when (unsigned(tmp_1_fu_1281_p3) > unsigned(empty_10_fu_1288_p2)) else "0";
    icmp_ln180_2_fu_1337_p2 <= "1" when (unsigned(tmp_4_fu_1324_p3) > unsigned(empty_11_fu_1331_p2)) else "0";
    icmp_ln180_3_fu_1380_p2 <= "1" when (unsigned(tmp_9_fu_1367_p3) > unsigned(empty_12_fu_1374_p2)) else "0";
    icmp_ln180_4_fu_1423_p2 <= "1" when (unsigned(tmp_12_fu_1410_p3) > unsigned(empty_13_fu_1417_p2)) else "0";
    icmp_ln180_5_fu_1466_p2 <= "1" when (unsigned(tmp_15_fu_1453_p3) > unsigned(empty_14_fu_1460_p2)) else "0";
    icmp_ln180_6_fu_1509_p2 <= "1" when (unsigned(tmp_18_fu_1496_p3) > unsigned(empty_15_fu_1503_p2)) else "0";
    icmp_ln180_7_fu_1552_p2 <= "1" when (unsigned(tmp_21_fu_1539_p3) > unsigned(empty_16_fu_1546_p2)) else "0";
    icmp_ln180_fu_1251_p2 <= "1" when (unsigned(tmp_7_fu_1238_p3) > unsigned(empty_9_fu_1245_p2)) else "0";
    lshr_ln180_11_fu_1985_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln180_23_fu_1982_p1(31-1 downto 0)))));
    lshr_ln180_13_fu_2011_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln180_27_fu_2008_p1(31-1 downto 0)))));
    lshr_ln180_15_fu_2037_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln180_31_fu_2034_p1(31-1 downto 0)))));
    lshr_ln180_1_fu_1857_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln180_3_fu_1854_p1(31-1 downto 0)))));
    lshr_ln180_3_fu_1881_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln180_7_fu_1878_p1(31-1 downto 0)))));
    lshr_ln180_5_fu_1907_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln180_11_fu_1904_p1(31-1 downto 0)))));
    lshr_ln180_7_fu_1933_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln180_15_fu_1930_p1(31-1 downto 0)))));
    lshr_ln180_9_fu_1959_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln180_19_fu_1956_p1(31-1 downto 0)))));
    op2_V_read_assign_10_fu_696_p4 <= i_stream_TDATA_int(111 downto 96);
    op2_V_read_assign_11_fu_706_p4 <= q_stream_TDATA_int(111 downto 96);
    op2_V_read_assign_12_fu_716_p4 <= i_stream_TDATA_int(127 downto 112);
    op2_V_read_assign_13_fu_726_p4 <= q_stream_TDATA_int(127 downto 112);
    op2_V_read_assign_14_fu_736_p4 <= i_stream_TDATA_int(143 downto 128);
    op2_V_read_assign_15_fu_746_p4 <= q_stream_TDATA_int(143 downto 128);
    op2_V_read_assign_16_fu_756_p4 <= i_stream_TDATA_int(159 downto 144);
    op2_V_read_assign_17_fu_766_p4 <= q_stream_TDATA_int(159 downto 144);
    op2_V_read_assign_18_fu_776_p4 <= i_stream_TDATA_int(175 downto 160);
    op2_V_read_assign_19_fu_786_p4 <= q_stream_TDATA_int(175 downto 160);
    op2_V_read_assign_1_fu_686_p4 <= q_stream_TDATA_int(95 downto 80);
    op2_V_read_assign_20_fu_796_p4 <= i_stream_TDATA_int(191 downto 176);
    op2_V_read_assign_21_fu_806_p4 <= q_stream_TDATA_int(191 downto 176);
    op2_V_read_assign_22_fu_816_p4 <= i_stream_TDATA_int(207 downto 192);
    op2_V_read_assign_23_fu_826_p4 <= q_stream_TDATA_int(207 downto 192);
    op2_V_read_assign_24_fu_836_p4 <= i_stream_TDATA_int(223 downto 208);
    op2_V_read_assign_25_fu_846_p4 <= q_stream_TDATA_int(223 downto 208);
    op2_V_read_assign_26_fu_856_p4 <= i_stream_TDATA_int(239 downto 224);
    op2_V_read_assign_27_fu_866_p4 <= q_stream_TDATA_int(239 downto 224);
    op2_V_read_assign_28_fu_876_p4 <= i_stream_TDATA_int(255 downto 240);
    op2_V_read_assign_29_fu_886_p4 <= q_stream_TDATA_int(255 downto 240);
    op2_V_read_assign_2_fu_596_p4 <= i_stream_TDATA_int(31 downto 16);
    op2_V_read_assign_3_fu_606_p4 <= q_stream_TDATA_int(31 downto 16);
    op2_V_read_assign_4_fu_616_p4 <= i_stream_TDATA_int(47 downto 32);
    op2_V_read_assign_5_fu_626_p4 <= q_stream_TDATA_int(47 downto 32);
    op2_V_read_assign_6_fu_636_p4 <= i_stream_TDATA_int(63 downto 48);
    op2_V_read_assign_7_fu_646_p4 <= q_stream_TDATA_int(63 downto 48);
    op2_V_read_assign_8_fu_656_p4 <= i_stream_TDATA_int(79 downto 64);
    op2_V_read_assign_9_fu_666_p4 <= q_stream_TDATA_int(79 downto 64);
    op2_V_read_assign_s_fu_676_p4 <= i_stream_TDATA_int(95 downto 80);

    out0_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, out0_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)))) then 
            out0_TDATA_blk_n <= out0_TREADY_int;
        else 
            out0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out0_TDATA_int <= and_ln180_fu_1863_p2(32 - 1 downto 0);
    out0_TVALID <= regslice_both_out0_data_val_U_vld_out;

    out0_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out0_TVALID_int <= ap_const_logic_1;
        else 
            out0_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    out1_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, out1_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)))) then 
            out1_TDATA_blk_n <= out1_TREADY_int;
        else 
            out1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out1_TDATA_int <= and_ln180_1_fu_1887_p2(32 - 1 downto 0);
    out1_TUSER_int <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(id_ndx_V));
    out1_TVALID <= regslice_both_out1_data_val_U_vld_out;

    out1_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out1_TVALID_int <= ap_const_logic_1;
        else 
            out1_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    out2_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, out2_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)))) then 
            out2_TDATA_blk_n <= out2_TREADY_int;
        else 
            out2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out2_TDATA_int <= and_ln180_2_fu_1913_p2(32 - 1 downto 0);
    out2_TUSER_int <= std_logic_vector(unsigned(ap_const_lv11_2) + unsigned(id_ndx_V));
    out2_TVALID <= regslice_both_out2_data_val_U_vld_out;

    out2_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out2_TVALID_int <= ap_const_logic_1;
        else 
            out2_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    out3_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, out3_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)))) then 
            out3_TDATA_blk_n <= out3_TREADY_int;
        else 
            out3_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out3_TDATA_int <= and_ln180_3_fu_1939_p2(32 - 1 downto 0);
    out3_TUSER_int <= std_logic_vector(unsigned(ap_const_lv11_3) + unsigned(id_ndx_V));
    out3_TVALID <= regslice_both_out3_data_val_U_vld_out;

    out3_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out3_TVALID_int <= ap_const_logic_1;
        else 
            out3_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    out4_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, out4_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)))) then 
            out4_TDATA_blk_n <= out4_TREADY_int;
        else 
            out4_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out4_TDATA_int <= and_ln180_4_fu_1965_p2(32 - 1 downto 0);
    out4_TUSER_int <= std_logic_vector(unsigned(ap_const_lv11_4) + unsigned(id_ndx_V));
    out4_TVALID <= regslice_both_out4_data_val_U_vld_out;

    out4_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out4_TVALID_int <= ap_const_logic_1;
        else 
            out4_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    out5_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, out5_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)))) then 
            out5_TDATA_blk_n <= out5_TREADY_int;
        else 
            out5_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out5_TDATA_int <= and_ln180_5_fu_1991_p2(32 - 1 downto 0);
    out5_TUSER_int <= std_logic_vector(unsigned(ap_const_lv11_5) + unsigned(id_ndx_V));
    out5_TVALID <= regslice_both_out5_data_val_U_vld_out;

    out5_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out5_TVALID_int <= ap_const_logic_1;
        else 
            out5_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    out6_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, out6_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)))) then 
            out6_TDATA_blk_n <= out6_TREADY_int;
        else 
            out6_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out6_TDATA_int <= and_ln180_6_fu_2017_p2(32 - 1 downto 0);
    out6_TUSER_int <= std_logic_vector(unsigned(ap_const_lv11_6) + unsigned(id_ndx_V));
    out6_TVALID <= regslice_both_out6_data_val_U_vld_out;

    out6_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out6_TVALID_int <= ap_const_logic_1;
        else 
            out6_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    out7_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, out7_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)))) then 
            out7_TDATA_blk_n <= out7_TREADY_int;
        else 
            out7_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out7_TDATA_int <= and_ln180_7_fu_2043_p2(32 - 1 downto 0);
    out7_TUSER_int <= std_logic_vector(unsigned(ap_const_lv11_7) + unsigned(id_ndx_V));
    out7_TVALID <= regslice_both_out7_data_val_U_vld_out;

    out7_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out7_TVALID_int <= ap_const_logic_1;
        else 
            out7_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    q_stream_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, q_stream_TVALID_int)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_stream_TDATA_blk_n <= q_stream_TVALID_int;
        else 
            q_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    q_stream_TREADY_assign_proc : process(q_stream_TVALID, regslice_both_q_stream_data_val_V_U_ack_in)
    begin
        if (((q_stream_TVALID = ap_const_logic_1) and (regslice_both_q_stream_data_val_V_U_ack_in = ap_const_logic_1))) then 
            q_stream_TREADY <= ap_const_logic_1;
        else 
            q_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    q_stream_TREADY_int_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            q_stream_TREADY_int <= ap_const_logic_1;
        else 
            q_stream_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    rid_to_bin_V_address0 <= zext_ln544_fu_571_p1(8 - 1 downto 0);

    rid_to_bin_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            rid_to_bin_V_ce0 <= ap_const_logic_1;
        else 
            rid_to_bin_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln180_10_fu_1396_p3 <= 
        tmp_10_reg_2232 when (icmp_ln180_3_fu_1380_p2(0) = '1') else 
        bin_iq_cache3_load_reg_2227;
    select_ln180_11_fu_1402_p3 <= 
        xor_ln180_3_fu_1390_p2 when (icmp_ln180_3_fu_1380_p2(0) = '1') else 
        zext_ln180_12_fu_1386_p1;
    select_ln180_12_fu_1731_p3 <= 
        sub_ln180_12_fu_1721_p2 when (icmp_ln180_4_reg_2386(0) = '1') else 
        sub_ln180_13_fu_1726_p2;
    select_ln180_13_fu_1439_p3 <= 
        tmp_13_reg_2242 when (icmp_ln180_4_fu_1423_p2(0) = '1') else 
        bin_iq_cache4_load_reg_2237;
    select_ln180_14_fu_1445_p3 <= 
        xor_ln180_4_fu_1433_p2 when (icmp_ln180_4_fu_1423_p2(0) = '1') else 
        zext_ln180_16_fu_1429_p1;
    select_ln180_15_fu_1765_p3 <= 
        sub_ln180_15_fu_1755_p2 when (icmp_ln180_5_reg_2412(0) = '1') else 
        sub_ln180_16_fu_1760_p2;
    select_ln180_16_fu_1482_p3 <= 
        tmp_16_reg_2252 when (icmp_ln180_5_fu_1466_p2(0) = '1') else 
        bin_iq_cache5_load_reg_2247;
    select_ln180_17_fu_1488_p3 <= 
        xor_ln180_5_fu_1476_p2 when (icmp_ln180_5_fu_1466_p2(0) = '1') else 
        zext_ln180_20_fu_1472_p1;
    select_ln180_18_fu_1799_p3 <= 
        sub_ln180_18_fu_1789_p2 when (icmp_ln180_6_reg_2438(0) = '1') else 
        sub_ln180_19_fu_1794_p2;
    select_ln180_19_fu_1525_p3 <= 
        tmp_19_reg_2262 when (icmp_ln180_6_fu_1509_p2(0) = '1') else 
        bin_iq_cache6_load_reg_2257;
    select_ln180_1_fu_1267_p3 <= 
        tmp_reg_2202 when (icmp_ln180_fu_1251_p2(0) = '1') else 
        bin_iq_cache0_load_reg_2197;
    select_ln180_20_fu_1531_p3 <= 
        xor_ln180_6_fu_1519_p2 when (icmp_ln180_6_fu_1509_p2(0) = '1') else 
        zext_ln180_24_fu_1515_p1;
    select_ln180_21_fu_1833_p3 <= 
        sub_ln180_21_fu_1823_p2 when (icmp_ln180_7_reg_2464(0) = '1') else 
        sub_ln180_22_fu_1828_p2;
    select_ln180_22_fu_1568_p3 <= 
        tmp_22_reg_2272 when (icmp_ln180_7_fu_1552_p2(0) = '1') else 
        bin_iq_cache7_load_reg_2267;
    select_ln180_23_fu_1574_p3 <= 
        xor_ln180_7_fu_1562_p2 when (icmp_ln180_7_fu_1552_p2(0) = '1') else 
        zext_ln180_28_fu_1558_p1;
    select_ln180_2_fu_1273_p3 <= 
        xor_ln180_fu_1261_p2 when (icmp_ln180_fu_1251_p2(0) = '1') else 
        zext_ln180_fu_1257_p1;
    select_ln180_3_fu_1629_p3 <= 
        sub_ln180_3_fu_1619_p2 when (icmp_ln180_1_reg_2308(0) = '1') else 
        sub_ln180_4_fu_1624_p2;
    select_ln180_4_fu_1310_p3 <= 
        tmp_2_reg_2212 when (icmp_ln180_1_fu_1294_p2(0) = '1') else 
        bin_iq_cache1_load_reg_2207;
    select_ln180_5_fu_1316_p3 <= 
        xor_ln180_1_fu_1304_p2 when (icmp_ln180_1_fu_1294_p2(0) = '1') else 
        zext_ln180_4_fu_1300_p1;
    select_ln180_6_fu_1663_p3 <= 
        sub_ln180_6_fu_1653_p2 when (icmp_ln180_2_reg_2334(0) = '1') else 
        sub_ln180_7_fu_1658_p2;
    select_ln180_7_fu_1353_p3 <= 
        tmp_6_reg_2222 when (icmp_ln180_2_fu_1337_p2(0) = '1') else 
        bin_iq_cache2_load_reg_2217;
    select_ln180_8_fu_1359_p3 <= 
        xor_ln180_2_fu_1347_p2 when (icmp_ln180_2_fu_1337_p2(0) = '1') else 
        zext_ln180_8_fu_1343_p1;
    select_ln180_9_fu_1697_p3 <= 
        sub_ln180_9_fu_1687_p2 when (icmp_ln180_3_reg_2360(0) = '1') else 
        sub_ln180_10_fu_1692_p2;
    select_ln180_fu_1595_p3 <= 
        sub_ln180_fu_1585_p2 when (icmp_ln180_reg_2282(0) = '1') else 
        sub_ln180_1_fu_1590_p2;
    sub_ln180_10_fu_1692_p2 <= std_logic_vector(unsigned(zext_ln180_13_fu_1684_p1) - unsigned(zext_ln180_12_reg_2365));
    sub_ln180_11_fu_1704_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln180_9_fu_1697_p3));
    sub_ln180_12_fu_1721_p2 <= std_logic_vector(unsigned(zext_ln180_16_reg_2391) - unsigned(zext_ln180_17_fu_1718_p1));
    sub_ln180_13_fu_1726_p2 <= std_logic_vector(unsigned(zext_ln180_17_fu_1718_p1) - unsigned(zext_ln180_16_reg_2391));
    sub_ln180_14_fu_1738_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln180_12_fu_1731_p3));
    sub_ln180_15_fu_1755_p2 <= std_logic_vector(unsigned(zext_ln180_20_reg_2417) - unsigned(zext_ln180_21_fu_1752_p1));
    sub_ln180_16_fu_1760_p2 <= std_logic_vector(unsigned(zext_ln180_21_fu_1752_p1) - unsigned(zext_ln180_20_reg_2417));
    sub_ln180_17_fu_1772_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln180_15_fu_1765_p3));
    sub_ln180_18_fu_1789_p2 <= std_logic_vector(unsigned(zext_ln180_24_reg_2443) - unsigned(zext_ln180_25_fu_1786_p1));
    sub_ln180_19_fu_1794_p2 <= std_logic_vector(unsigned(zext_ln180_25_fu_1786_p1) - unsigned(zext_ln180_24_reg_2443));
    sub_ln180_1_fu_1590_p2 <= std_logic_vector(unsigned(zext_ln180_1_fu_1582_p1) - unsigned(zext_ln180_reg_2287));
    sub_ln180_20_fu_1806_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln180_18_fu_1799_p3));
    sub_ln180_21_fu_1823_p2 <= std_logic_vector(unsigned(zext_ln180_28_reg_2469) - unsigned(zext_ln180_29_fu_1820_p1));
    sub_ln180_22_fu_1828_p2 <= std_logic_vector(unsigned(zext_ln180_29_fu_1820_p1) - unsigned(zext_ln180_28_reg_2469));
    sub_ln180_23_fu_1840_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln180_21_fu_1833_p3));
    sub_ln180_2_fu_1602_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln180_fu_1595_p3));
    sub_ln180_3_fu_1619_p2 <= std_logic_vector(unsigned(zext_ln180_4_reg_2313) - unsigned(zext_ln180_5_fu_1616_p1));
    sub_ln180_4_fu_1624_p2 <= std_logic_vector(unsigned(zext_ln180_5_fu_1616_p1) - unsigned(zext_ln180_4_reg_2313));
    sub_ln180_5_fu_1636_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln180_3_fu_1629_p3));
    sub_ln180_6_fu_1653_p2 <= std_logic_vector(unsigned(zext_ln180_8_reg_2339) - unsigned(zext_ln180_9_fu_1650_p1));
    sub_ln180_7_fu_1658_p2 <= std_logic_vector(unsigned(zext_ln180_9_fu_1650_p1) - unsigned(zext_ln180_8_reg_2339));
    sub_ln180_8_fu_1670_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln180_6_fu_1663_p3));
    sub_ln180_9_fu_1687_p2 <= std_logic_vector(unsigned(zext_ln180_12_reg_2365) - unsigned(zext_ln180_13_fu_1684_p1));
    sub_ln180_fu_1585_p2 <= std_logic_vector(unsigned(zext_ln180_reg_2287) - unsigned(zext_ln180_1_fu_1582_p1));
    
    tmp_10_fu_1188_p4_proc : process(bin_iq_cache3_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_10_fu_1188_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := bin_iq_cache3_q1;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_10_fu_1188_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_10_fu_1188_p4_i) := bin_iq_cache3_q1(512-1-tmp_10_fu_1188_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_10_fu_1188_p4 <= resvalue(512-1 downto 0);
    end process;

    tmp_12_fu_1410_p3 <= (tmp_11_reg_2122_pp0_iter5_reg & ap_const_lv5_0);
    
    tmp_13_fu_1198_p4_proc : process(bin_iq_cache4_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_13_fu_1198_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := bin_iq_cache4_q1;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_13_fu_1198_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_13_fu_1198_p4_i) := bin_iq_cache4_q1(512-1-tmp_13_fu_1198_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_13_fu_1198_p4 <= resvalue(512-1 downto 0);
    end process;

    tmp_15_fu_1453_p3 <= (tmp_14_reg_2132_pp0_iter5_reg & ap_const_lv5_0);
    
    tmp_16_fu_1208_p4_proc : process(bin_iq_cache5_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_16_fu_1208_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := bin_iq_cache5_q1;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_16_fu_1208_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_16_fu_1208_p4_i) := bin_iq_cache5_q1(512-1-tmp_16_fu_1208_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_16_fu_1208_p4 <= resvalue(512-1 downto 0);
    end process;

    tmp_18_fu_1496_p3 <= (tmp_17_reg_2142_pp0_iter5_reg & ap_const_lv5_0);
    
    tmp_19_fu_1218_p4_proc : process(bin_iq_cache6_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_19_fu_1218_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := bin_iq_cache6_q1;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_19_fu_1218_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_19_fu_1218_p4_i) := bin_iq_cache6_q1(512-1-tmp_19_fu_1218_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_19_fu_1218_p4 <= resvalue(512-1 downto 0);
    end process;

    tmp_1_fu_1281_p3 <= (tmp_s_reg_2092_pp0_iter5_reg & ap_const_lv5_0);
    tmp_21_fu_1539_p3 <= (tmp_20_reg_2152_pp0_iter5_reg & ap_const_lv5_0);
    
    tmp_22_fu_1228_p4_proc : process(bin_iq_cache7_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_22_fu_1228_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := bin_iq_cache7_q1;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_22_fu_1228_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_22_fu_1228_p4_i) := bin_iq_cache7_q1(512-1-tmp_22_fu_1228_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_22_fu_1228_p4 <= resvalue(512-1 downto 0);
    end process;

    
    tmp_2_fu_1168_p4_proc : process(bin_iq_cache1_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_2_fu_1168_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := bin_iq_cache1_q1;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_2_fu_1168_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_2_fu_1168_p4_i) := bin_iq_cache1_q1(512-1-tmp_2_fu_1168_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_1168_p4 <= resvalue(512-1 downto 0);
    end process;

    tmp_4_fu_1324_p3 <= (tmp_3_reg_2102_pp0_iter5_reg & ap_const_lv5_0);
    tmp_5_fu_896_p33 <= (((((((((((((((((((((((((((((((op2_V_read_assign_29_fu_886_p4 & op2_V_read_assign_28_fu_876_p4) & op2_V_read_assign_27_fu_866_p4) & op2_V_read_assign_26_fu_856_p4) & op2_V_read_assign_25_fu_846_p4) & op2_V_read_assign_24_fu_836_p4) & op2_V_read_assign_23_fu_826_p4) & op2_V_read_assign_22_fu_816_p4) & op2_V_read_assign_21_fu_806_p4) & op2_V_read_assign_20_fu_796_p4) & op2_V_read_assign_19_fu_786_p4) & op2_V_read_assign_18_fu_776_p4) & op2_V_read_assign_17_fu_766_p4) & op2_V_read_assign_16_fu_756_p4) & op2_V_read_assign_15_fu_746_p4) & op2_V_read_assign_14_fu_736_p4) & op2_V_read_assign_13_fu_726_p4) & op2_V_read_assign_12_fu_716_p4) & op2_V_read_assign_11_fu_706_p4) & op2_V_read_assign_10_fu_696_p4) & op2_V_read_assign_1_fu_686_p4) & op2_V_read_assign_s_fu_676_p4) & op2_V_read_assign_9_fu_666_p4) & op2_V_read_assign_8_fu_656_p4) & op2_V_read_assign_7_fu_646_p4) & op2_V_read_assign_6_fu_636_p4) & op2_V_read_assign_5_fu_626_p4) & op2_V_read_assign_4_fu_616_p4) & op2_V_read_assign_3_fu_606_p4) & op2_V_read_assign_2_fu_596_p4) & trunc_ln78_1_fu_592_p1) & trunc_ln78_fu_588_p1);
    
    tmp_6_fu_1178_p4_proc : process(bin_iq_cache2_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_6_fu_1178_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := bin_iq_cache2_q1;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_6_fu_1178_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_6_fu_1178_p4_i) := bin_iq_cache2_q1(512-1-tmp_6_fu_1178_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_1178_p4 <= resvalue(512-1 downto 0);
    end process;

    tmp_7_fu_1238_p3 <= (empty_8_reg_2082_pp0_iter5_reg & ap_const_lv5_0);
    tmp_9_fu_1367_p3 <= (tmp_8_reg_2112_pp0_iter5_reg & ap_const_lv5_0);
    
    tmp_fu_1158_p4_proc : process(bin_iq_cache0_q1)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_fu_1158_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := bin_iq_cache0_q1;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_fu_1158_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_fu_1158_p4_i) := bin_iq_cache0_q1(512-1-tmp_fu_1158_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_1158_p4 <= resvalue(512-1 downto 0);
    end process;

    trunc_ln78_1_fu_592_p1 <= q_stream_TDATA_int(16 - 1 downto 0);
    trunc_ln78_fu_588_p1 <= i_stream_TDATA_int(16 - 1 downto 0);
    xor_ln180_1_fu_1304_p2 <= (zext_ln180_4_fu_1300_p1 xor ap_const_lv10_1FF);
    xor_ln180_2_fu_1347_p2 <= (zext_ln180_8_fu_1343_p1 xor ap_const_lv10_1FF);
    xor_ln180_3_fu_1390_p2 <= (zext_ln180_12_fu_1386_p1 xor ap_const_lv10_1FF);
    xor_ln180_4_fu_1433_p2 <= (zext_ln180_16_fu_1429_p1 xor ap_const_lv10_1FF);
    xor_ln180_5_fu_1476_p2 <= (zext_ln180_20_fu_1472_p1 xor ap_const_lv10_1FF);
    xor_ln180_6_fu_1519_p2 <= (zext_ln180_24_fu_1515_p1 xor ap_const_lv10_1FF);
    xor_ln180_7_fu_1562_p2 <= (zext_ln180_28_fu_1558_p1 xor ap_const_lv10_1FF);
    xor_ln180_fu_1261_p2 <= (zext_ln180_fu_1257_p1 xor ap_const_lv10_1FF);
    zext_ln180_11_fu_1904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln180_8_reg_2505_pp0_iter10_reg),512));
    zext_ln180_12_fu_1386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1367_p3),10));
    zext_ln180_13_fu_1684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_12_reg_2355),10));
    zext_ln180_15_fu_1930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln180_11_reg_2515_pp0_iter10_reg),512));
    zext_ln180_16_fu_1429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1410_p3),10));
    zext_ln180_17_fu_1718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_13_reg_2381),10));
    zext_ln180_19_fu_1956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln180_14_reg_2525_pp0_iter10_reg),512));
    zext_ln180_1_fu_1582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_9_reg_2277),10));
    zext_ln180_20_fu_1472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1453_p3),10));
    zext_ln180_21_fu_1752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_14_reg_2407),10));
    zext_ln180_23_fu_1982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln180_17_reg_2535_pp0_iter10_reg),512));
    zext_ln180_24_fu_1515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_1496_p3),10));
    zext_ln180_25_fu_1786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_15_reg_2433),10));
    zext_ln180_27_fu_2008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln180_20_reg_2545_pp0_iter10_reg),512));
    zext_ln180_28_fu_1558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_1539_p3),10));
    zext_ln180_29_fu_1820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_16_reg_2459),10));
    zext_ln180_31_fu_2034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln180_23_reg_2555_pp0_iter10_reg),512));
    zext_ln180_3_fu_1854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln180_2_reg_2485_pp0_iter10_reg),512));
    zext_ln180_4_fu_1300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_1281_p3),10));
    zext_ln180_5_fu_1616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_10_reg_2303),10));
    zext_ln180_7_fu_1878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln180_5_reg_2495_pp0_iter10_reg),512));
    zext_ln180_8_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_1324_p3),10));
    zext_ln180_9_fu_1650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_11_reg_2329),10));
    zext_ln180_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_1238_p3),10));
    zext_ln544_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_stream_TUSER_int),64));
    zext_ln681_1_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_3_reg_2087),64));
    zext_ln681_2_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_5_reg_2097),64));
    zext_ln681_3_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_7_reg_2107),64));
    zext_ln681_4_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_9_reg_2117),64));
    zext_ln681_5_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_reg_2127),64));
    zext_ln681_6_fu_1150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_reg_2137),64));
    zext_ln681_7_fu_1154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_reg_2147),64));
    zext_ln681_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_reg_2077),64));
end behav;
