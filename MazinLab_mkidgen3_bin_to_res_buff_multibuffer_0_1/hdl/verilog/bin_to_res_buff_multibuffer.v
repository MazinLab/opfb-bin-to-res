// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bin_to_res_buff_multibuffer,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.563000,HLS_SYN_LAT=12,HLS_SYN_TPT=1,HLS_SYN_MEM=126,HLS_SYN_DSP=0,HLS_SYN_FF=43252,HLS_SYN_LUT=53204,HLS_VERSION=2019_2_1}" *)

module bin_to_res_buff_multibuffer (
        ap_clk,
        ap_rst_n,
        i_stream_TVALID,
        q_stream_TVALID,
        out0_TREADY,
        out1_TREADY,
        out2_TREADY,
        out3_TREADY,
        out4_TREADY,
        out5_TREADY,
        out6_TREADY,
        out7_TREADY,
        i_stream_TDATA,
        i_stream_TREADY,
        i_stream_TUSER,
        q_stream_TDATA,
        q_stream_TREADY,
        q_stream_TUSER,
        out0_TDATA,
        out0_TVALID,
        out0_TUSER,
        out1_TDATA,
        out1_TVALID,
        out1_TUSER,
        out2_TDATA,
        out2_TVALID,
        out2_TUSER,
        out3_TDATA,
        out3_TVALID,
        out3_TUSER,
        out4_TDATA,
        out4_TVALID,
        out4_TUSER,
        out5_TDATA,
        out5_TVALID,
        out5_TUSER,
        out6_TDATA,
        out6_TVALID,
        out6_TUSER,
        out7_TDATA,
        out7_TVALID,
        out7_TUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 13;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   i_stream_TVALID;
input   q_stream_TVALID;
input   out0_TREADY;
input   out1_TREADY;
input   out2_TREADY;
input   out3_TREADY;
input   out4_TREADY;
input   out5_TREADY;
input   out6_TREADY;
input   out7_TREADY;
input  [255:0] i_stream_TDATA;
output   i_stream_TREADY;
input  [7:0] i_stream_TUSER;
input  [255:0] q_stream_TDATA;
output   q_stream_TREADY;
input  [7:0] q_stream_TUSER;
output  [31:0] out0_TDATA;
output   out0_TVALID;
output  [10:0] out0_TUSER;
output  [31:0] out1_TDATA;
output   out1_TVALID;
output  [10:0] out1_TUSER;
output  [31:0] out2_TDATA;
output   out2_TVALID;
output  [10:0] out2_TUSER;
output  [31:0] out3_TDATA;
output   out3_TVALID;
output  [10:0] out3_TUSER;
output  [31:0] out4_TDATA;
output   out4_TVALID;
output  [10:0] out4_TUSER;
output  [31:0] out5_TDATA;
output   out5_TVALID;
output  [10:0] out5_TUSER;
output  [31:0] out6_TDATA;
output   out6_TVALID;
output  [10:0] out6_TUSER;
output  [31:0] out7_TDATA;
output   out7_TVALID;
output  [10:0] out7_TUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg i_stream_TREADY;
reg q_stream_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
reg    ap_ready;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_state12_io;
wire    regslice_both_out0_data_val_U_apdone_blk;
wire    regslice_both_out1_data_val_U_apdone_blk;
wire    regslice_both_out2_data_val_U_apdone_blk;
wire    regslice_both_out3_data_val_U_apdone_blk;
wire    regslice_both_out4_data_val_U_apdone_blk;
wire    regslice_both_out5_data_val_U_apdone_blk;
wire    regslice_both_out6_data_val_U_apdone_blk;
wire    regslice_both_out7_data_val_U_apdone_blk;
reg    ap_block_state13_pp0_stage0_iter12;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] rid_to_bin_V_address0;
reg    rid_to_bin_V_ce0;
wire   [95:0] rid_to_bin_V_q0;
wire   [7:0] bin_iq_cache0_address0;
reg    bin_iq_cache0_ce0;
reg    bin_iq_cache0_we0;
wire   [7:0] bin_iq_cache0_address1;
reg    bin_iq_cache0_ce1;
wire   [511:0] bin_iq_cache0_q1;
reg   [10:0] id_ndx_V;
wire   [7:0] bin_iq_cache1_address0;
reg    bin_iq_cache1_ce0;
reg    bin_iq_cache1_we0;
wire   [7:0] bin_iq_cache1_address1;
reg    bin_iq_cache1_ce1;
wire   [511:0] bin_iq_cache1_q1;
wire   [7:0] bin_iq_cache2_address0;
reg    bin_iq_cache2_ce0;
reg    bin_iq_cache2_we0;
wire   [7:0] bin_iq_cache2_address1;
reg    bin_iq_cache2_ce1;
wire   [511:0] bin_iq_cache2_q1;
wire   [7:0] bin_iq_cache3_address0;
reg    bin_iq_cache3_ce0;
reg    bin_iq_cache3_we0;
wire   [7:0] bin_iq_cache3_address1;
reg    bin_iq_cache3_ce1;
wire   [511:0] bin_iq_cache3_q1;
wire   [7:0] bin_iq_cache4_address0;
reg    bin_iq_cache4_ce0;
reg    bin_iq_cache4_we0;
wire   [7:0] bin_iq_cache4_address1;
reg    bin_iq_cache4_ce1;
wire   [511:0] bin_iq_cache4_q1;
wire   [7:0] bin_iq_cache5_address0;
reg    bin_iq_cache5_ce0;
reg    bin_iq_cache5_we0;
wire   [7:0] bin_iq_cache5_address1;
reg    bin_iq_cache5_ce1;
wire   [511:0] bin_iq_cache5_q1;
wire   [7:0] bin_iq_cache6_address0;
reg    bin_iq_cache6_ce0;
reg    bin_iq_cache6_we0;
wire   [7:0] bin_iq_cache6_address1;
reg    bin_iq_cache6_ce1;
wire   [511:0] bin_iq_cache6_q1;
wire   [7:0] bin_iq_cache7_address0;
reg    bin_iq_cache7_ce0;
reg    bin_iq_cache7_we0;
wire   [7:0] bin_iq_cache7_address1;
reg    bin_iq_cache7_ce1;
wire   [511:0] bin_iq_cache7_q1;
reg    i_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    q_stream_TDATA_blk_n;
reg    out0_TDATA_blk_n;
reg    out1_TDATA_blk_n;
reg    out2_TDATA_blk_n;
reg    out3_TDATA_blk_n;
reg    out4_TDATA_blk_n;
reg    out5_TDATA_blk_n;
reg    out6_TDATA_blk_n;
reg    out7_TDATA_blk_n;
reg   [7:0] p_Result_1_reg_2077;
wire   [3:0] empty_8_fu_982_p1;
reg   [3:0] empty_8_reg_2082;
reg   [3:0] empty_8_reg_2082_pp0_iter3_reg;
reg   [3:0] empty_8_reg_2082_pp0_iter4_reg;
reg   [3:0] empty_8_reg_2082_pp0_iter5_reg;
reg   [7:0] p_Result_3_reg_2087;
reg   [3:0] tmp_s_reg_2092;
reg   [3:0] tmp_s_reg_2092_pp0_iter3_reg;
reg   [3:0] tmp_s_reg_2092_pp0_iter4_reg;
reg   [3:0] tmp_s_reg_2092_pp0_iter5_reg;
reg   [7:0] p_Result_5_reg_2097;
reg   [3:0] tmp_3_reg_2102;
reg   [3:0] tmp_3_reg_2102_pp0_iter3_reg;
reg   [3:0] tmp_3_reg_2102_pp0_iter4_reg;
reg   [3:0] tmp_3_reg_2102_pp0_iter5_reg;
reg   [7:0] p_Result_7_reg_2107;
reg   [3:0] tmp_8_reg_2112;
reg   [3:0] tmp_8_reg_2112_pp0_iter3_reg;
reg   [3:0] tmp_8_reg_2112_pp0_iter4_reg;
reg   [3:0] tmp_8_reg_2112_pp0_iter5_reg;
reg   [7:0] p_Result_9_reg_2117;
reg   [3:0] tmp_11_reg_2122;
reg   [3:0] tmp_11_reg_2122_pp0_iter3_reg;
reg   [3:0] tmp_11_reg_2122_pp0_iter4_reg;
reg   [3:0] tmp_11_reg_2122_pp0_iter5_reg;
reg   [7:0] p_Result_s_reg_2127;
reg   [3:0] tmp_14_reg_2132;
reg   [3:0] tmp_14_reg_2132_pp0_iter3_reg;
reg   [3:0] tmp_14_reg_2132_pp0_iter4_reg;
reg   [3:0] tmp_14_reg_2132_pp0_iter5_reg;
reg   [7:0] p_Result_2_reg_2137;
reg   [3:0] tmp_17_reg_2142;
reg   [3:0] tmp_17_reg_2142_pp0_iter3_reg;
reg   [3:0] tmp_17_reg_2142_pp0_iter4_reg;
reg   [3:0] tmp_17_reg_2142_pp0_iter5_reg;
reg   [7:0] p_Result_4_reg_2147;
reg   [3:0] tmp_20_reg_2152;
reg   [3:0] tmp_20_reg_2152_pp0_iter3_reg;
reg   [3:0] tmp_20_reg_2152_pp0_iter4_reg;
reg   [3:0] tmp_20_reg_2152_pp0_iter5_reg;
reg   [511:0] bin_iq_cache0_load_reg_2197;
reg   [511:0] tmp_fu_1158_p4;
reg   [511:0] tmp_reg_2202;
reg   [511:0] bin_iq_cache1_load_reg_2207;
reg   [511:0] tmp_2_fu_1168_p4;
reg   [511:0] tmp_2_reg_2212;
reg   [511:0] bin_iq_cache2_load_reg_2217;
reg   [511:0] tmp_6_fu_1178_p4;
reg   [511:0] tmp_6_reg_2222;
reg   [511:0] bin_iq_cache3_load_reg_2227;
reg   [511:0] tmp_10_fu_1188_p4;
reg   [511:0] tmp_10_reg_2232;
reg   [511:0] bin_iq_cache4_load_reg_2237;
reg   [511:0] tmp_13_fu_1198_p4;
reg   [511:0] tmp_13_reg_2242;
reg   [511:0] bin_iq_cache5_load_reg_2247;
reg   [511:0] tmp_16_fu_1208_p4;
reg   [511:0] tmp_16_reg_2252;
reg   [511:0] bin_iq_cache6_load_reg_2257;
reg   [511:0] tmp_19_fu_1218_p4;
reg   [511:0] tmp_19_reg_2262;
reg   [511:0] bin_iq_cache7_load_reg_2267;
reg   [511:0] tmp_22_fu_1228_p4;
reg   [511:0] tmp_22_reg_2272;
wire   [8:0] empty_9_fu_1245_p2;
reg   [8:0] empty_9_reg_2277;
wire   [0:0] icmp_ln180_fu_1251_p2;
reg   [0:0] icmp_ln180_reg_2282;
wire   [9:0] zext_ln180_fu_1257_p1;
reg   [9:0] zext_ln180_reg_2287;
wire   [511:0] select_ln180_1_fu_1267_p3;
reg   [511:0] select_ln180_1_reg_2293;
wire   [9:0] select_ln180_2_fu_1273_p3;
reg   [9:0] select_ln180_2_reg_2298;
wire   [8:0] empty_10_fu_1288_p2;
reg   [8:0] empty_10_reg_2303;
wire   [0:0] icmp_ln180_1_fu_1294_p2;
reg   [0:0] icmp_ln180_1_reg_2308;
wire   [9:0] zext_ln180_4_fu_1300_p1;
reg   [9:0] zext_ln180_4_reg_2313;
wire   [511:0] select_ln180_4_fu_1310_p3;
reg   [511:0] select_ln180_4_reg_2319;
wire   [9:0] select_ln180_5_fu_1316_p3;
reg   [9:0] select_ln180_5_reg_2324;
wire   [8:0] empty_11_fu_1331_p2;
reg   [8:0] empty_11_reg_2329;
wire   [0:0] icmp_ln180_2_fu_1337_p2;
reg   [0:0] icmp_ln180_2_reg_2334;
wire   [9:0] zext_ln180_8_fu_1343_p1;
reg   [9:0] zext_ln180_8_reg_2339;
wire   [511:0] select_ln180_7_fu_1353_p3;
reg   [511:0] select_ln180_7_reg_2345;
wire   [9:0] select_ln180_8_fu_1359_p3;
reg   [9:0] select_ln180_8_reg_2350;
wire   [8:0] empty_12_fu_1374_p2;
reg   [8:0] empty_12_reg_2355;
wire   [0:0] icmp_ln180_3_fu_1380_p2;
reg   [0:0] icmp_ln180_3_reg_2360;
wire   [9:0] zext_ln180_12_fu_1386_p1;
reg   [9:0] zext_ln180_12_reg_2365;
wire   [511:0] select_ln180_10_fu_1396_p3;
reg   [511:0] select_ln180_10_reg_2371;
wire   [9:0] select_ln180_11_fu_1402_p3;
reg   [9:0] select_ln180_11_reg_2376;
wire   [8:0] empty_13_fu_1417_p2;
reg   [8:0] empty_13_reg_2381;
wire   [0:0] icmp_ln180_4_fu_1423_p2;
reg   [0:0] icmp_ln180_4_reg_2386;
wire   [9:0] zext_ln180_16_fu_1429_p1;
reg   [9:0] zext_ln180_16_reg_2391;
wire   [511:0] select_ln180_13_fu_1439_p3;
reg   [511:0] select_ln180_13_reg_2397;
wire   [9:0] select_ln180_14_fu_1445_p3;
reg   [9:0] select_ln180_14_reg_2402;
wire   [8:0] empty_14_fu_1460_p2;
reg   [8:0] empty_14_reg_2407;
wire   [0:0] icmp_ln180_5_fu_1466_p2;
reg   [0:0] icmp_ln180_5_reg_2412;
wire   [9:0] zext_ln180_20_fu_1472_p1;
reg   [9:0] zext_ln180_20_reg_2417;
wire   [511:0] select_ln180_16_fu_1482_p3;
reg   [511:0] select_ln180_16_reg_2423;
wire   [9:0] select_ln180_17_fu_1488_p3;
reg   [9:0] select_ln180_17_reg_2428;
wire   [8:0] empty_15_fu_1503_p2;
reg   [8:0] empty_15_reg_2433;
wire   [0:0] icmp_ln180_6_fu_1509_p2;
reg   [0:0] icmp_ln180_6_reg_2438;
wire   [9:0] zext_ln180_24_fu_1515_p1;
reg   [9:0] zext_ln180_24_reg_2443;
wire   [511:0] select_ln180_19_fu_1525_p3;
reg   [511:0] select_ln180_19_reg_2449;
wire   [9:0] select_ln180_20_fu_1531_p3;
reg   [9:0] select_ln180_20_reg_2454;
wire   [8:0] empty_16_fu_1546_p2;
reg   [8:0] empty_16_reg_2459;
wire   [0:0] icmp_ln180_7_fu_1552_p2;
reg   [0:0] icmp_ln180_7_reg_2464;
wire   [9:0] zext_ln180_28_fu_1558_p1;
reg   [9:0] zext_ln180_28_reg_2469;
wire   [511:0] select_ln180_22_fu_1568_p3;
reg   [511:0] select_ln180_22_reg_2475;
wire   [9:0] select_ln180_23_fu_1574_p3;
reg   [9:0] select_ln180_23_reg_2480;
wire   [9:0] sub_ln180_2_fu_1602_p2;
reg   [9:0] sub_ln180_2_reg_2485;
reg   [9:0] sub_ln180_2_reg_2485_pp0_iter8_reg;
reg   [9:0] sub_ln180_2_reg_2485_pp0_iter9_reg;
reg   [9:0] sub_ln180_2_reg_2485_pp0_iter10_reg;
wire   [9:0] sub_ln180_5_fu_1636_p2;
reg   [9:0] sub_ln180_5_reg_2495;
reg   [9:0] sub_ln180_5_reg_2495_pp0_iter8_reg;
reg   [9:0] sub_ln180_5_reg_2495_pp0_iter9_reg;
reg   [9:0] sub_ln180_5_reg_2495_pp0_iter10_reg;
wire   [9:0] sub_ln180_8_fu_1670_p2;
reg   [9:0] sub_ln180_8_reg_2505;
reg   [9:0] sub_ln180_8_reg_2505_pp0_iter8_reg;
reg   [9:0] sub_ln180_8_reg_2505_pp0_iter9_reg;
reg   [9:0] sub_ln180_8_reg_2505_pp0_iter10_reg;
wire   [9:0] sub_ln180_11_fu_1704_p2;
reg   [9:0] sub_ln180_11_reg_2515;
reg   [9:0] sub_ln180_11_reg_2515_pp0_iter8_reg;
reg   [9:0] sub_ln180_11_reg_2515_pp0_iter9_reg;
reg   [9:0] sub_ln180_11_reg_2515_pp0_iter10_reg;
wire   [9:0] sub_ln180_14_fu_1738_p2;
reg   [9:0] sub_ln180_14_reg_2525;
reg   [9:0] sub_ln180_14_reg_2525_pp0_iter8_reg;
reg   [9:0] sub_ln180_14_reg_2525_pp0_iter9_reg;
reg   [9:0] sub_ln180_14_reg_2525_pp0_iter10_reg;
wire   [9:0] sub_ln180_17_fu_1772_p2;
reg   [9:0] sub_ln180_17_reg_2535;
reg   [9:0] sub_ln180_17_reg_2535_pp0_iter8_reg;
reg   [9:0] sub_ln180_17_reg_2535_pp0_iter9_reg;
reg   [9:0] sub_ln180_17_reg_2535_pp0_iter10_reg;
wire   [9:0] sub_ln180_20_fu_1806_p2;
reg   [9:0] sub_ln180_20_reg_2545;
reg   [9:0] sub_ln180_20_reg_2545_pp0_iter8_reg;
reg   [9:0] sub_ln180_20_reg_2545_pp0_iter9_reg;
reg   [9:0] sub_ln180_20_reg_2545_pp0_iter10_reg;
wire   [9:0] sub_ln180_23_fu_1840_p2;
reg   [9:0] sub_ln180_23_reg_2555;
reg   [9:0] sub_ln180_23_reg_2555_pp0_iter8_reg;
reg   [9:0] sub_ln180_23_reg_2555_pp0_iter9_reg;
reg   [9:0] sub_ln180_23_reg_2555_pp0_iter10_reg;
wire   [511:0] grp_fu_1611_p2;
reg   [511:0] lshr_ln180_reg_2565;
wire   [511:0] grp_fu_1645_p2;
reg   [511:0] lshr_ln180_2_reg_2570;
wire   [511:0] grp_fu_1679_p2;
reg   [511:0] lshr_ln180_4_reg_2575;
wire   [511:0] grp_fu_1713_p2;
reg   [511:0] lshr_ln180_6_reg_2580;
wire   [511:0] grp_fu_1747_p2;
reg   [511:0] lshr_ln180_8_reg_2585;
wire   [511:0] grp_fu_1781_p2;
reg   [511:0] lshr_ln180_10_reg_2590;
wire   [511:0] grp_fu_1815_p2;
reg   [511:0] lshr_ln180_12_reg_2595;
wire   [511:0] grp_fu_1849_p2;
reg   [511:0] lshr_ln180_14_reg_2600;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln544_fu_571_p1;
wire   [63:0] zext_ln681_fu_1126_p1;
wire   [63:0] zext_ln681_1_fu_1130_p1;
wire   [63:0] zext_ln681_2_fu_1134_p1;
wire   [63:0] zext_ln681_3_fu_1138_p1;
wire   [63:0] zext_ln681_4_fu_1142_p1;
wire   [63:0] zext_ln681_5_fu_1146_p1;
wire   [63:0] zext_ln681_6_fu_1150_p1;
wire   [63:0] zext_ln681_7_fu_1154_p1;
wire   [10:0] add_ln700_fu_2060_p2;
reg    ap_block_pp0_stage0_01001;
wire   [511:0] tmp_5_fu_896_p33;
wire   [15:0] op2_V_read_assign_29_fu_886_p4;
wire   [15:0] op2_V_read_assign_28_fu_876_p4;
wire   [15:0] op2_V_read_assign_27_fu_866_p4;
wire   [15:0] op2_V_read_assign_26_fu_856_p4;
wire   [15:0] op2_V_read_assign_25_fu_846_p4;
wire   [15:0] op2_V_read_assign_24_fu_836_p4;
wire   [15:0] op2_V_read_assign_23_fu_826_p4;
wire   [15:0] op2_V_read_assign_22_fu_816_p4;
wire   [15:0] op2_V_read_assign_21_fu_806_p4;
wire   [15:0] op2_V_read_assign_20_fu_796_p4;
wire   [15:0] op2_V_read_assign_19_fu_786_p4;
wire   [15:0] op2_V_read_assign_18_fu_776_p4;
wire   [15:0] op2_V_read_assign_17_fu_766_p4;
wire   [15:0] op2_V_read_assign_16_fu_756_p4;
wire   [15:0] op2_V_read_assign_15_fu_746_p4;
wire   [15:0] op2_V_read_assign_14_fu_736_p4;
wire   [15:0] op2_V_read_assign_13_fu_726_p4;
wire   [15:0] op2_V_read_assign_12_fu_716_p4;
wire   [15:0] op2_V_read_assign_11_fu_706_p4;
wire   [15:0] op2_V_read_assign_10_fu_696_p4;
wire   [15:0] op2_V_read_assign_1_fu_686_p4;
wire   [15:0] op2_V_read_assign_s_fu_676_p4;
wire   [15:0] op2_V_read_assign_9_fu_666_p4;
wire   [15:0] op2_V_read_assign_8_fu_656_p4;
wire   [15:0] op2_V_read_assign_7_fu_646_p4;
wire   [15:0] op2_V_read_assign_6_fu_636_p4;
wire   [15:0] op2_V_read_assign_5_fu_626_p4;
wire   [15:0] op2_V_read_assign_4_fu_616_p4;
wire   [15:0] op2_V_read_assign_3_fu_606_p4;
wire   [15:0] op2_V_read_assign_2_fu_596_p4;
wire   [15:0] trunc_ln78_1_fu_592_p1;
wire   [15:0] trunc_ln78_fu_588_p1;
wire   [8:0] tmp_7_fu_1238_p3;
wire   [9:0] xor_ln180_fu_1261_p2;
wire   [8:0] tmp_1_fu_1281_p3;
wire   [9:0] xor_ln180_1_fu_1304_p2;
wire   [8:0] tmp_4_fu_1324_p3;
wire   [9:0] xor_ln180_2_fu_1347_p2;
wire   [8:0] tmp_9_fu_1367_p3;
wire   [9:0] xor_ln180_3_fu_1390_p2;
wire   [8:0] tmp_12_fu_1410_p3;
wire   [9:0] xor_ln180_4_fu_1433_p2;
wire   [8:0] tmp_15_fu_1453_p3;
wire   [9:0] xor_ln180_5_fu_1476_p2;
wire   [8:0] tmp_18_fu_1496_p3;
wire   [9:0] xor_ln180_6_fu_1519_p2;
wire   [8:0] tmp_21_fu_1539_p3;
wire   [9:0] xor_ln180_7_fu_1562_p2;
wire   [9:0] zext_ln180_1_fu_1582_p1;
wire   [9:0] sub_ln180_fu_1585_p2;
wire   [9:0] sub_ln180_1_fu_1590_p2;
wire   [9:0] select_ln180_fu_1595_p3;
wire   [511:0] grp_fu_1611_p1;
wire   [9:0] zext_ln180_5_fu_1616_p1;
wire   [9:0] sub_ln180_3_fu_1619_p2;
wire   [9:0] sub_ln180_4_fu_1624_p2;
wire   [9:0] select_ln180_3_fu_1629_p3;
wire   [511:0] grp_fu_1645_p1;
wire   [9:0] zext_ln180_9_fu_1650_p1;
wire   [9:0] sub_ln180_6_fu_1653_p2;
wire   [9:0] sub_ln180_7_fu_1658_p2;
wire   [9:0] select_ln180_6_fu_1663_p3;
wire   [511:0] grp_fu_1679_p1;
wire   [9:0] zext_ln180_13_fu_1684_p1;
wire   [9:0] sub_ln180_9_fu_1687_p2;
wire   [9:0] sub_ln180_10_fu_1692_p2;
wire   [9:0] select_ln180_9_fu_1697_p3;
wire   [511:0] grp_fu_1713_p1;
wire   [9:0] zext_ln180_17_fu_1718_p1;
wire   [9:0] sub_ln180_12_fu_1721_p2;
wire   [9:0] sub_ln180_13_fu_1726_p2;
wire   [9:0] select_ln180_12_fu_1731_p3;
wire   [511:0] grp_fu_1747_p1;
wire   [9:0] zext_ln180_21_fu_1752_p1;
wire   [9:0] sub_ln180_15_fu_1755_p2;
wire   [9:0] sub_ln180_16_fu_1760_p2;
wire   [9:0] select_ln180_15_fu_1765_p3;
wire   [511:0] grp_fu_1781_p1;
wire   [9:0] zext_ln180_25_fu_1786_p1;
wire   [9:0] sub_ln180_18_fu_1789_p2;
wire   [9:0] sub_ln180_19_fu_1794_p2;
wire   [9:0] select_ln180_18_fu_1799_p3;
wire   [511:0] grp_fu_1815_p1;
wire   [9:0] zext_ln180_29_fu_1820_p1;
wire   [9:0] sub_ln180_21_fu_1823_p2;
wire   [9:0] sub_ln180_22_fu_1828_p2;
wire   [9:0] select_ln180_21_fu_1833_p3;
wire   [511:0] grp_fu_1849_p1;
wire   [511:0] zext_ln180_3_fu_1854_p1;
wire   [511:0] lshr_ln180_1_fu_1857_p2;
wire   [511:0] and_ln180_fu_1863_p2;
wire   [511:0] zext_ln180_7_fu_1878_p1;
wire   [511:0] lshr_ln180_3_fu_1881_p2;
wire   [511:0] and_ln180_1_fu_1887_p2;
wire   [511:0] zext_ln180_11_fu_1904_p1;
wire   [511:0] lshr_ln180_5_fu_1907_p2;
wire   [511:0] and_ln180_2_fu_1913_p2;
wire   [511:0] zext_ln180_15_fu_1930_p1;
wire   [511:0] lshr_ln180_7_fu_1933_p2;
wire   [511:0] and_ln180_3_fu_1939_p2;
wire   [511:0] zext_ln180_19_fu_1956_p1;
wire   [511:0] lshr_ln180_9_fu_1959_p2;
wire   [511:0] and_ln180_4_fu_1965_p2;
wire   [511:0] zext_ln180_23_fu_1982_p1;
wire   [511:0] lshr_ln180_11_fu_1985_p2;
wire   [511:0] and_ln180_5_fu_1991_p2;
wire   [511:0] zext_ln180_27_fu_2008_p1;
wire   [511:0] lshr_ln180_13_fu_2011_p2;
wire   [511:0] and_ln180_6_fu_2017_p2;
wire   [511:0] zext_ln180_31_fu_2034_p1;
wire   [511:0] lshr_ln180_15_fu_2037_p2;
wire   [511:0] and_ln180_7_fu_2043_p2;
reg    grp_fu_1611_ce;
reg    grp_fu_1645_ce;
reg    grp_fu_1679_ce;
reg    grp_fu_1713_ce;
reg    grp_fu_1747_ce;
reg    grp_fu_1781_ce;
reg    grp_fu_1815_ce;
reg    grp_fu_1849_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to11;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0;
wire    ap_enable_operation_63;
reg    ap_enable_state1_pp0_iter0_stage0;
wire    ap_enable_operation_91;
reg    ap_enable_state4_pp0_iter3_stage0;
wire    ap_enable_operation_121;
reg    ap_enable_state6_pp0_iter5_stage0;
wire    ap_enable_operation_64;
wire    ap_enable_operation_94;
wire    ap_enable_operation_123;
wire    ap_enable_operation_65;
wire    ap_enable_operation_97;
wire    ap_enable_operation_125;
wire    ap_enable_operation_66;
wire    ap_enable_operation_100;
wire    ap_enable_operation_127;
wire    ap_enable_operation_67;
wire    ap_enable_operation_103;
wire    ap_enable_operation_129;
wire    ap_enable_operation_68;
wire    ap_enable_operation_106;
wire    ap_enable_operation_131;
wire    ap_enable_operation_69;
wire    ap_enable_operation_109;
wire    ap_enable_operation_133;
wire    ap_enable_operation_70;
wire    ap_enable_operation_112;
wire    ap_enable_operation_135;
wire    ap_enable_pp0;
wire    regslice_both_i_stream_data_val_V_U_apdone_blk;
wire   [255:0] i_stream_TDATA_int;
wire    i_stream_TVALID_int;
reg    i_stream_TREADY_int;
wire    regslice_both_i_stream_data_val_V_U_ack_in;
wire    regslice_both_i_stream_user_V_U_apdone_blk;
wire   [7:0] i_stream_TUSER_int;
wire    regslice_both_i_stream_user_V_U_vld_out;
wire    regslice_both_i_stream_user_V_U_ack_in;
wire    regslice_both_q_stream_data_val_V_U_apdone_blk;
wire   [255:0] q_stream_TDATA_int;
wire    q_stream_TVALID_int;
reg    q_stream_TREADY_int;
wire    regslice_both_q_stream_data_val_V_U_ack_in;
wire    regslice_both_q_stream_user_V_U_apdone_blk;
wire   [7:0] q_stream_TUSER_int;
wire    regslice_both_q_stream_user_V_U_vld_out;
wire    regslice_both_q_stream_user_V_U_ack_in;
wire   [31:0] out0_TDATA_int;
reg    out0_TVALID_int;
wire    out0_TREADY_int;
wire    regslice_both_out0_data_val_U_vld_out;
wire    regslice_both_out0_user_V_U_apdone_blk;
wire    regslice_both_out0_user_V_U_ack_in_dummy;
wire    regslice_both_out0_user_V_U_vld_out;
wire   [31:0] out1_TDATA_int;
reg    out1_TVALID_int;
wire    out1_TREADY_int;
wire    regslice_both_out1_data_val_U_vld_out;
wire    regslice_both_out1_user_V_U_apdone_blk;
wire   [10:0] out1_TUSER_int;
wire    regslice_both_out1_user_V_U_ack_in_dummy;
wire    regslice_both_out1_user_V_U_vld_out;
wire   [31:0] out2_TDATA_int;
reg    out2_TVALID_int;
wire    out2_TREADY_int;
wire    regslice_both_out2_data_val_U_vld_out;
wire    regslice_both_out2_user_V_U_apdone_blk;
wire   [10:0] out2_TUSER_int;
wire    regslice_both_out2_user_V_U_ack_in_dummy;
wire    regslice_both_out2_user_V_U_vld_out;
wire   [31:0] out3_TDATA_int;
reg    out3_TVALID_int;
wire    out3_TREADY_int;
wire    regslice_both_out3_data_val_U_vld_out;
wire    regslice_both_out3_user_V_U_apdone_blk;
wire   [10:0] out3_TUSER_int;
wire    regslice_both_out3_user_V_U_ack_in_dummy;
wire    regslice_both_out3_user_V_U_vld_out;
wire   [31:0] out4_TDATA_int;
reg    out4_TVALID_int;
wire    out4_TREADY_int;
wire    regslice_both_out4_data_val_U_vld_out;
wire    regslice_both_out4_user_V_U_apdone_blk;
wire   [10:0] out4_TUSER_int;
wire    regslice_both_out4_user_V_U_ack_in_dummy;
wire    regslice_both_out4_user_V_U_vld_out;
wire   [31:0] out5_TDATA_int;
reg    out5_TVALID_int;
wire    out5_TREADY_int;
wire    regslice_both_out5_data_val_U_vld_out;
wire    regslice_both_out5_user_V_U_apdone_blk;
wire   [10:0] out5_TUSER_int;
wire    regslice_both_out5_user_V_U_ack_in_dummy;
wire    regslice_both_out5_user_V_U_vld_out;
wire   [31:0] out6_TDATA_int;
reg    out6_TVALID_int;
wire    out6_TREADY_int;
wire    regslice_both_out6_data_val_U_vld_out;
wire    regslice_both_out6_user_V_U_apdone_blk;
wire   [10:0] out6_TUSER_int;
wire    regslice_both_out6_user_V_U_ack_in_dummy;
wire    regslice_both_out6_user_V_U_vld_out;
wire   [31:0] out7_TDATA_int;
reg    out7_TVALID_int;
wire    out7_TREADY_int;
wire    regslice_both_out7_data_val_U_vld_out;
wire    regslice_both_out7_user_V_U_apdone_blk;
wire   [10:0] out7_TUSER_int;
wire    regslice_both_out7_user_V_U_ack_in_dummy;
wire    regslice_both_out7_user_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 id_ndx_V = 11'd0;
end

bin_to_res_buff_mbkb #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
bin_iq_cache0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bin_iq_cache0_address0),
    .ce0(bin_iq_cache0_ce0),
    .we0(bin_iq_cache0_we0),
    .d0(tmp_5_fu_896_p33),
    .address1(bin_iq_cache0_address1),
    .ce1(bin_iq_cache0_ce1),
    .q1(bin_iq_cache0_q1)
);

bin_to_res_buff_mbkb #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
bin_iq_cache1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bin_iq_cache1_address0),
    .ce0(bin_iq_cache1_ce0),
    .we0(bin_iq_cache1_we0),
    .d0(tmp_5_fu_896_p33),
    .address1(bin_iq_cache1_address1),
    .ce1(bin_iq_cache1_ce1),
    .q1(bin_iq_cache1_q1)
);

bin_to_res_buff_mbkb #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
bin_iq_cache2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bin_iq_cache2_address0),
    .ce0(bin_iq_cache2_ce0),
    .we0(bin_iq_cache2_we0),
    .d0(tmp_5_fu_896_p33),
    .address1(bin_iq_cache2_address1),
    .ce1(bin_iq_cache2_ce1),
    .q1(bin_iq_cache2_q1)
);

bin_to_res_buff_mbkb #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
bin_iq_cache3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bin_iq_cache3_address0),
    .ce0(bin_iq_cache3_ce0),
    .we0(bin_iq_cache3_we0),
    .d0(tmp_5_fu_896_p33),
    .address1(bin_iq_cache3_address1),
    .ce1(bin_iq_cache3_ce1),
    .q1(bin_iq_cache3_q1)
);

bin_to_res_buff_mbkb #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
bin_iq_cache4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bin_iq_cache4_address0),
    .ce0(bin_iq_cache4_ce0),
    .we0(bin_iq_cache4_we0),
    .d0(tmp_5_fu_896_p33),
    .address1(bin_iq_cache4_address1),
    .ce1(bin_iq_cache4_ce1),
    .q1(bin_iq_cache4_q1)
);

bin_to_res_buff_mbkb #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
bin_iq_cache5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bin_iq_cache5_address0),
    .ce0(bin_iq_cache5_ce0),
    .we0(bin_iq_cache5_we0),
    .d0(tmp_5_fu_896_p33),
    .address1(bin_iq_cache5_address1),
    .ce1(bin_iq_cache5_ce1),
    .q1(bin_iq_cache5_q1)
);

bin_to_res_buff_mbkb #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
bin_iq_cache6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bin_iq_cache6_address0),
    .ce0(bin_iq_cache6_ce0),
    .we0(bin_iq_cache6_we0),
    .d0(tmp_5_fu_896_p33),
    .address1(bin_iq_cache6_address1),
    .ce1(bin_iq_cache6_ce1),
    .q1(bin_iq_cache6_q1)
);

bin_to_res_buff_mbkb #(
    .DataWidth( 512 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
bin_iq_cache7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bin_iq_cache7_address0),
    .ce0(bin_iq_cache7_ce0),
    .we0(bin_iq_cache7_we0),
    .d0(tmp_5_fu_896_p33),
    .address1(bin_iq_cache7_address1),
    .ce1(bin_iq_cache7_ce1),
    .q1(bin_iq_cache7_q1)
);

bin_to_res_buff_multibuffer_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
bin_to_res_buff_multibuffer_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .rid_to_bin_V_address0(rid_to_bin_V_address0),
    .rid_to_bin_V_ce0(rid_to_bin_V_ce0),
    .rid_to_bin_V_q0(rid_to_bin_V_q0)
);

bin_to_res_buff_mjbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .OP( 1 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 512 ))
bin_to_res_buff_mjbC_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(select_ln180_1_reg_2293),
    .din1(grp_fu_1611_p1),
    .ce(grp_fu_1611_ce),
    .dout(grp_fu_1611_p2)
);

bin_to_res_buff_mjbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .OP( 1 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 512 ))
bin_to_res_buff_mjbC_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(select_ln180_4_reg_2319),
    .din1(grp_fu_1645_p1),
    .ce(grp_fu_1645_ce),
    .dout(grp_fu_1645_p2)
);

bin_to_res_buff_mjbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .OP( 1 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 512 ))
bin_to_res_buff_mjbC_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(select_ln180_7_reg_2345),
    .din1(grp_fu_1679_p1),
    .ce(grp_fu_1679_ce),
    .dout(grp_fu_1679_p2)
);

bin_to_res_buff_mjbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .OP( 1 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 512 ))
bin_to_res_buff_mjbC_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(select_ln180_10_reg_2371),
    .din1(grp_fu_1713_p1),
    .ce(grp_fu_1713_ce),
    .dout(grp_fu_1713_p2)
);

bin_to_res_buff_mjbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .OP( 1 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 512 ))
bin_to_res_buff_mjbC_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(select_ln180_13_reg_2397),
    .din1(grp_fu_1747_p1),
    .ce(grp_fu_1747_ce),
    .dout(grp_fu_1747_p2)
);

bin_to_res_buff_mjbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .OP( 1 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 512 ))
bin_to_res_buff_mjbC_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(select_ln180_16_reg_2423),
    .din1(grp_fu_1781_p1),
    .ce(grp_fu_1781_ce),
    .dout(grp_fu_1781_p2)
);

bin_to_res_buff_mjbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .OP( 1 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 512 ))
bin_to_res_buff_mjbC_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(select_ln180_19_reg_2449),
    .din1(grp_fu_1815_p1),
    .ce(grp_fu_1815_ce),
    .dout(grp_fu_1815_p2)
);

bin_to_res_buff_mjbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .OP( 1 ),
    .din0_WIDTH( 512 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 512 ))
bin_to_res_buff_mjbC_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(select_ln180_22_reg_2475),
    .din1(grp_fu_1849_p1),
    .ce(grp_fu_1849_ce),
    .dout(grp_fu_1849_p2)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_i_stream_data_val_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(i_stream_TDATA),
    .vld_in(i_stream_TVALID),
    .ack_in(regslice_both_i_stream_data_val_V_U_ack_in),
    .data_out(i_stream_TDATA_int),
    .vld_out(i_stream_TVALID_int),
    .ack_out(i_stream_TREADY_int),
    .apdone_blk(regslice_both_i_stream_data_val_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_i_stream_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(i_stream_TUSER),
    .vld_in(i_stream_TVALID),
    .ack_in(regslice_both_i_stream_user_V_U_ack_in),
    .data_out(i_stream_TUSER_int),
    .vld_out(regslice_both_i_stream_user_V_U_vld_out),
    .ack_out(i_stream_TREADY_int),
    .apdone_blk(regslice_both_i_stream_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 256 ))
regslice_both_q_stream_data_val_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(q_stream_TDATA),
    .vld_in(q_stream_TVALID),
    .ack_in(regslice_both_q_stream_data_val_V_U_ack_in),
    .data_out(q_stream_TDATA_int),
    .vld_out(q_stream_TVALID_int),
    .ack_out(q_stream_TREADY_int),
    .apdone_blk(regslice_both_q_stream_data_val_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_q_stream_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(q_stream_TUSER),
    .vld_in(q_stream_TVALID),
    .ack_in(regslice_both_q_stream_user_V_U_ack_in),
    .data_out(q_stream_TUSER_int),
    .vld_out(regslice_both_q_stream_user_V_U_vld_out),
    .ack_out(q_stream_TREADY_int),
    .apdone_blk(regslice_both_q_stream_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out0_data_val_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out0_TDATA_int),
    .vld_in(out0_TVALID_int),
    .ack_in(out0_TREADY_int),
    .data_out(out0_TDATA),
    .vld_out(regslice_both_out0_data_val_U_vld_out),
    .ack_out(out0_TREADY),
    .apdone_blk(regslice_both_out0_data_val_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 11 ))
regslice_both_out0_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(id_ndx_V),
    .vld_in(out0_TVALID_int),
    .ack_in(regslice_both_out0_user_V_U_ack_in_dummy),
    .data_out(out0_TUSER),
    .vld_out(regslice_both_out0_user_V_U_vld_out),
    .ack_out(out0_TREADY),
    .apdone_blk(regslice_both_out0_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out1_data_val_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out1_TDATA_int),
    .vld_in(out1_TVALID_int),
    .ack_in(out1_TREADY_int),
    .data_out(out1_TDATA),
    .vld_out(regslice_both_out1_data_val_U_vld_out),
    .ack_out(out1_TREADY),
    .apdone_blk(regslice_both_out1_data_val_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 11 ))
regslice_both_out1_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out1_TUSER_int),
    .vld_in(out1_TVALID_int),
    .ack_in(regslice_both_out1_user_V_U_ack_in_dummy),
    .data_out(out1_TUSER),
    .vld_out(regslice_both_out1_user_V_U_vld_out),
    .ack_out(out1_TREADY),
    .apdone_blk(regslice_both_out1_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out2_data_val_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out2_TDATA_int),
    .vld_in(out2_TVALID_int),
    .ack_in(out2_TREADY_int),
    .data_out(out2_TDATA),
    .vld_out(regslice_both_out2_data_val_U_vld_out),
    .ack_out(out2_TREADY),
    .apdone_blk(regslice_both_out2_data_val_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 11 ))
regslice_both_out2_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out2_TUSER_int),
    .vld_in(out2_TVALID_int),
    .ack_in(regslice_both_out2_user_V_U_ack_in_dummy),
    .data_out(out2_TUSER),
    .vld_out(regslice_both_out2_user_V_U_vld_out),
    .ack_out(out2_TREADY),
    .apdone_blk(regslice_both_out2_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out3_data_val_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out3_TDATA_int),
    .vld_in(out3_TVALID_int),
    .ack_in(out3_TREADY_int),
    .data_out(out3_TDATA),
    .vld_out(regslice_both_out3_data_val_U_vld_out),
    .ack_out(out3_TREADY),
    .apdone_blk(regslice_both_out3_data_val_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 11 ))
regslice_both_out3_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out3_TUSER_int),
    .vld_in(out3_TVALID_int),
    .ack_in(regslice_both_out3_user_V_U_ack_in_dummy),
    .data_out(out3_TUSER),
    .vld_out(regslice_both_out3_user_V_U_vld_out),
    .ack_out(out3_TREADY),
    .apdone_blk(regslice_both_out3_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out4_data_val_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out4_TDATA_int),
    .vld_in(out4_TVALID_int),
    .ack_in(out4_TREADY_int),
    .data_out(out4_TDATA),
    .vld_out(regslice_both_out4_data_val_U_vld_out),
    .ack_out(out4_TREADY),
    .apdone_blk(regslice_both_out4_data_val_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 11 ))
regslice_both_out4_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out4_TUSER_int),
    .vld_in(out4_TVALID_int),
    .ack_in(regslice_both_out4_user_V_U_ack_in_dummy),
    .data_out(out4_TUSER),
    .vld_out(regslice_both_out4_user_V_U_vld_out),
    .ack_out(out4_TREADY),
    .apdone_blk(regslice_both_out4_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out5_data_val_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out5_TDATA_int),
    .vld_in(out5_TVALID_int),
    .ack_in(out5_TREADY_int),
    .data_out(out5_TDATA),
    .vld_out(regslice_both_out5_data_val_U_vld_out),
    .ack_out(out5_TREADY),
    .apdone_blk(regslice_both_out5_data_val_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 11 ))
regslice_both_out5_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out5_TUSER_int),
    .vld_in(out5_TVALID_int),
    .ack_in(regslice_both_out5_user_V_U_ack_in_dummy),
    .data_out(out5_TUSER),
    .vld_out(regslice_both_out5_user_V_U_vld_out),
    .ack_out(out5_TREADY),
    .apdone_blk(regslice_both_out5_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out6_data_val_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out6_TDATA_int),
    .vld_in(out6_TVALID_int),
    .ack_in(out6_TREADY_int),
    .data_out(out6_TDATA),
    .vld_out(regslice_both_out6_data_val_U_vld_out),
    .ack_out(out6_TREADY),
    .apdone_blk(regslice_both_out6_data_val_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 11 ))
regslice_both_out6_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out6_TUSER_int),
    .vld_in(out6_TVALID_int),
    .ack_in(regslice_both_out6_user_V_U_ack_in_dummy),
    .data_out(out6_TUSER),
    .vld_out(regslice_both_out6_user_V_U_vld_out),
    .ack_out(out6_TREADY),
    .apdone_blk(regslice_both_out6_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_out7_data_val_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out7_TDATA_int),
    .vld_in(out7_TVALID_int),
    .ack_in(out7_TREADY_int),
    .data_out(out7_TDATA),
    .vld_out(regslice_both_out7_data_val_U_vld_out),
    .ack_out(out7_TREADY),
    .apdone_blk(regslice_both_out7_data_val_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 11 ))
regslice_both_out7_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out7_TUSER_int),
    .vld_in(out7_TVALID_int),
    .ack_in(regslice_both_out7_user_V_U_ack_in_dummy),
    .data_out(out7_TUSER),
    .vld_out(regslice_both_out7_user_V_U_vld_out),
    .ack_out(out7_TREADY),
    .apdone_blk(regslice_both_out7_user_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache0_load_reg_2197 <= bin_iq_cache0_q1;
        bin_iq_cache1_load_reg_2207 <= bin_iq_cache1_q1;
        bin_iq_cache2_load_reg_2217 <= bin_iq_cache2_q1;
        bin_iq_cache3_load_reg_2227 <= bin_iq_cache3_q1;
        bin_iq_cache4_load_reg_2237 <= bin_iq_cache4_q1;
        bin_iq_cache5_load_reg_2247 <= bin_iq_cache5_q1;
        bin_iq_cache6_load_reg_2257 <= bin_iq_cache6_q1;
        bin_iq_cache7_load_reg_2267 <= bin_iq_cache7_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        empty_10_reg_2303[8 : 5] <= empty_10_fu_1288_p2[8 : 5];
        empty_11_reg_2329[8 : 5] <= empty_11_fu_1331_p2[8 : 5];
        empty_12_reg_2355[8 : 5] <= empty_12_fu_1374_p2[8 : 5];
        empty_13_reg_2381[8 : 5] <= empty_13_fu_1417_p2[8 : 5];
        empty_14_reg_2407[8 : 5] <= empty_14_fu_1460_p2[8 : 5];
        empty_15_reg_2433[8 : 5] <= empty_15_fu_1503_p2[8 : 5];
        empty_16_reg_2459[8 : 5] <= empty_16_fu_1546_p2[8 : 5];
        empty_8_reg_2082 <= empty_8_fu_982_p1;
        empty_8_reg_2082_pp0_iter3_reg <= empty_8_reg_2082;
        empty_8_reg_2082_pp0_iter4_reg <= empty_8_reg_2082_pp0_iter3_reg;
        empty_8_reg_2082_pp0_iter5_reg <= empty_8_reg_2082_pp0_iter4_reg;
        empty_9_reg_2277[8 : 5] <= empty_9_fu_1245_p2[8 : 5];
        icmp_ln180_1_reg_2308 <= icmp_ln180_1_fu_1294_p2;
        icmp_ln180_2_reg_2334 <= icmp_ln180_2_fu_1337_p2;
        icmp_ln180_3_reg_2360 <= icmp_ln180_3_fu_1380_p2;
        icmp_ln180_4_reg_2386 <= icmp_ln180_4_fu_1423_p2;
        icmp_ln180_5_reg_2412 <= icmp_ln180_5_fu_1466_p2;
        icmp_ln180_6_reg_2438 <= icmp_ln180_6_fu_1509_p2;
        icmp_ln180_7_reg_2464 <= icmp_ln180_7_fu_1552_p2;
        icmp_ln180_reg_2282 <= icmp_ln180_fu_1251_p2;
        lshr_ln180_10_reg_2590 <= grp_fu_1781_p2;
        lshr_ln180_12_reg_2595 <= grp_fu_1815_p2;
        lshr_ln180_14_reg_2600 <= grp_fu_1849_p2;
        lshr_ln180_2_reg_2570 <= grp_fu_1645_p2;
        lshr_ln180_4_reg_2575 <= grp_fu_1679_p2;
        lshr_ln180_6_reg_2580 <= grp_fu_1713_p2;
        lshr_ln180_8_reg_2585 <= grp_fu_1747_p2;
        lshr_ln180_reg_2565 <= grp_fu_1611_p2;
        p_Result_1_reg_2077 <= {{rid_to_bin_V_q0[11:4]}};
        p_Result_2_reg_2137 <= {{rid_to_bin_V_q0[83:76]}};
        p_Result_3_reg_2087 <= {{rid_to_bin_V_q0[23:16]}};
        p_Result_4_reg_2147 <= {{rid_to_bin_V_q0[95:88]}};
        p_Result_5_reg_2097 <= {{rid_to_bin_V_q0[35:28]}};
        p_Result_7_reg_2107 <= {{rid_to_bin_V_q0[47:40]}};
        p_Result_9_reg_2117 <= {{rid_to_bin_V_q0[59:52]}};
        p_Result_s_reg_2127 <= {{rid_to_bin_V_q0[71:64]}};
        select_ln180_10_reg_2371 <= select_ln180_10_fu_1396_p3;
        select_ln180_11_reg_2376 <= select_ln180_11_fu_1402_p3;
        select_ln180_13_reg_2397 <= select_ln180_13_fu_1439_p3;
        select_ln180_14_reg_2402 <= select_ln180_14_fu_1445_p3;
        select_ln180_16_reg_2423 <= select_ln180_16_fu_1482_p3;
        select_ln180_17_reg_2428 <= select_ln180_17_fu_1488_p3;
        select_ln180_19_reg_2449 <= select_ln180_19_fu_1525_p3;
        select_ln180_1_reg_2293 <= select_ln180_1_fu_1267_p3;
        select_ln180_20_reg_2454 <= select_ln180_20_fu_1531_p3;
        select_ln180_22_reg_2475 <= select_ln180_22_fu_1568_p3;
        select_ln180_23_reg_2480 <= select_ln180_23_fu_1574_p3;
        select_ln180_2_reg_2298 <= select_ln180_2_fu_1273_p3;
        select_ln180_4_reg_2319 <= select_ln180_4_fu_1310_p3;
        select_ln180_5_reg_2324 <= select_ln180_5_fu_1316_p3;
        select_ln180_7_reg_2345 <= select_ln180_7_fu_1353_p3;
        select_ln180_8_reg_2350 <= select_ln180_8_fu_1359_p3;
        sub_ln180_11_reg_2515[9 : 1] <= sub_ln180_11_fu_1704_p2[9 : 1];
        sub_ln180_11_reg_2515_pp0_iter10_reg[9 : 1] <= sub_ln180_11_reg_2515_pp0_iter9_reg[9 : 1];
        sub_ln180_11_reg_2515_pp0_iter8_reg[9 : 1] <= sub_ln180_11_reg_2515[9 : 1];
        sub_ln180_11_reg_2515_pp0_iter9_reg[9 : 1] <= sub_ln180_11_reg_2515_pp0_iter8_reg[9 : 1];
        sub_ln180_14_reg_2525[9 : 1] <= sub_ln180_14_fu_1738_p2[9 : 1];
        sub_ln180_14_reg_2525_pp0_iter10_reg[9 : 1] <= sub_ln180_14_reg_2525_pp0_iter9_reg[9 : 1];
        sub_ln180_14_reg_2525_pp0_iter8_reg[9 : 1] <= sub_ln180_14_reg_2525[9 : 1];
        sub_ln180_14_reg_2525_pp0_iter9_reg[9 : 1] <= sub_ln180_14_reg_2525_pp0_iter8_reg[9 : 1];
        sub_ln180_17_reg_2535[9 : 1] <= sub_ln180_17_fu_1772_p2[9 : 1];
        sub_ln180_17_reg_2535_pp0_iter10_reg[9 : 1] <= sub_ln180_17_reg_2535_pp0_iter9_reg[9 : 1];
        sub_ln180_17_reg_2535_pp0_iter8_reg[9 : 1] <= sub_ln180_17_reg_2535[9 : 1];
        sub_ln180_17_reg_2535_pp0_iter9_reg[9 : 1] <= sub_ln180_17_reg_2535_pp0_iter8_reg[9 : 1];
        sub_ln180_20_reg_2545[9 : 1] <= sub_ln180_20_fu_1806_p2[9 : 1];
        sub_ln180_20_reg_2545_pp0_iter10_reg[9 : 1] <= sub_ln180_20_reg_2545_pp0_iter9_reg[9 : 1];
        sub_ln180_20_reg_2545_pp0_iter8_reg[9 : 1] <= sub_ln180_20_reg_2545[9 : 1];
        sub_ln180_20_reg_2545_pp0_iter9_reg[9 : 1] <= sub_ln180_20_reg_2545_pp0_iter8_reg[9 : 1];
        sub_ln180_23_reg_2555[9 : 1] <= sub_ln180_23_fu_1840_p2[9 : 1];
        sub_ln180_23_reg_2555_pp0_iter10_reg[9 : 1] <= sub_ln180_23_reg_2555_pp0_iter9_reg[9 : 1];
        sub_ln180_23_reg_2555_pp0_iter8_reg[9 : 1] <= sub_ln180_23_reg_2555[9 : 1];
        sub_ln180_23_reg_2555_pp0_iter9_reg[9 : 1] <= sub_ln180_23_reg_2555_pp0_iter8_reg[9 : 1];
        sub_ln180_2_reg_2485[9 : 1] <= sub_ln180_2_fu_1602_p2[9 : 1];
        sub_ln180_2_reg_2485_pp0_iter10_reg[9 : 1] <= sub_ln180_2_reg_2485_pp0_iter9_reg[9 : 1];
        sub_ln180_2_reg_2485_pp0_iter8_reg[9 : 1] <= sub_ln180_2_reg_2485[9 : 1];
        sub_ln180_2_reg_2485_pp0_iter9_reg[9 : 1] <= sub_ln180_2_reg_2485_pp0_iter8_reg[9 : 1];
        sub_ln180_5_reg_2495[9 : 1] <= sub_ln180_5_fu_1636_p2[9 : 1];
        sub_ln180_5_reg_2495_pp0_iter10_reg[9 : 1] <= sub_ln180_5_reg_2495_pp0_iter9_reg[9 : 1];
        sub_ln180_5_reg_2495_pp0_iter8_reg[9 : 1] <= sub_ln180_5_reg_2495[9 : 1];
        sub_ln180_5_reg_2495_pp0_iter9_reg[9 : 1] <= sub_ln180_5_reg_2495_pp0_iter8_reg[9 : 1];
        sub_ln180_8_reg_2505[9 : 1] <= sub_ln180_8_fu_1670_p2[9 : 1];
        sub_ln180_8_reg_2505_pp0_iter10_reg[9 : 1] <= sub_ln180_8_reg_2505_pp0_iter9_reg[9 : 1];
        sub_ln180_8_reg_2505_pp0_iter8_reg[9 : 1] <= sub_ln180_8_reg_2505[9 : 1];
        sub_ln180_8_reg_2505_pp0_iter9_reg[9 : 1] <= sub_ln180_8_reg_2505_pp0_iter8_reg[9 : 1];
        tmp_10_reg_2232 <= tmp_10_fu_1188_p4;
        tmp_11_reg_2122 <= {{rid_to_bin_V_q0[51:48]}};
        tmp_11_reg_2122_pp0_iter3_reg <= tmp_11_reg_2122;
        tmp_11_reg_2122_pp0_iter4_reg <= tmp_11_reg_2122_pp0_iter3_reg;
        tmp_11_reg_2122_pp0_iter5_reg <= tmp_11_reg_2122_pp0_iter4_reg;
        tmp_13_reg_2242 <= tmp_13_fu_1198_p4;
        tmp_14_reg_2132 <= {{rid_to_bin_V_q0[63:60]}};
        tmp_14_reg_2132_pp0_iter3_reg <= tmp_14_reg_2132;
        tmp_14_reg_2132_pp0_iter4_reg <= tmp_14_reg_2132_pp0_iter3_reg;
        tmp_14_reg_2132_pp0_iter5_reg <= tmp_14_reg_2132_pp0_iter4_reg;
        tmp_16_reg_2252 <= tmp_16_fu_1208_p4;
        tmp_17_reg_2142 <= {{rid_to_bin_V_q0[75:72]}};
        tmp_17_reg_2142_pp0_iter3_reg <= tmp_17_reg_2142;
        tmp_17_reg_2142_pp0_iter4_reg <= tmp_17_reg_2142_pp0_iter3_reg;
        tmp_17_reg_2142_pp0_iter5_reg <= tmp_17_reg_2142_pp0_iter4_reg;
        tmp_19_reg_2262 <= tmp_19_fu_1218_p4;
        tmp_20_reg_2152 <= {{rid_to_bin_V_q0[87:84]}};
        tmp_20_reg_2152_pp0_iter3_reg <= tmp_20_reg_2152;
        tmp_20_reg_2152_pp0_iter4_reg <= tmp_20_reg_2152_pp0_iter3_reg;
        tmp_20_reg_2152_pp0_iter5_reg <= tmp_20_reg_2152_pp0_iter4_reg;
        tmp_22_reg_2272 <= tmp_22_fu_1228_p4;
        tmp_2_reg_2212 <= tmp_2_fu_1168_p4;
        tmp_3_reg_2102 <= {{rid_to_bin_V_q0[27:24]}};
        tmp_3_reg_2102_pp0_iter3_reg <= tmp_3_reg_2102;
        tmp_3_reg_2102_pp0_iter4_reg <= tmp_3_reg_2102_pp0_iter3_reg;
        tmp_3_reg_2102_pp0_iter5_reg <= tmp_3_reg_2102_pp0_iter4_reg;
        tmp_6_reg_2222 <= tmp_6_fu_1178_p4;
        tmp_8_reg_2112 <= {{rid_to_bin_V_q0[39:36]}};
        tmp_8_reg_2112_pp0_iter3_reg <= tmp_8_reg_2112;
        tmp_8_reg_2112_pp0_iter4_reg <= tmp_8_reg_2112_pp0_iter3_reg;
        tmp_8_reg_2112_pp0_iter5_reg <= tmp_8_reg_2112_pp0_iter4_reg;
        tmp_reg_2202 <= tmp_fu_1158_p4;
        tmp_s_reg_2092 <= {{rid_to_bin_V_q0[15:12]}};
        tmp_s_reg_2092_pp0_iter3_reg <= tmp_s_reg_2092;
        tmp_s_reg_2092_pp0_iter4_reg <= tmp_s_reg_2092_pp0_iter3_reg;
        tmp_s_reg_2092_pp0_iter5_reg <= tmp_s_reg_2092_pp0_iter4_reg;
        zext_ln180_12_reg_2365[8 : 5] <= zext_ln180_12_fu_1386_p1[8 : 5];
        zext_ln180_16_reg_2391[8 : 5] <= zext_ln180_16_fu_1429_p1[8 : 5];
        zext_ln180_20_reg_2417[8 : 5] <= zext_ln180_20_fu_1472_p1[8 : 5];
        zext_ln180_24_reg_2443[8 : 5] <= zext_ln180_24_fu_1515_p1[8 : 5];
        zext_ln180_28_reg_2469[8 : 5] <= zext_ln180_28_fu_1558_p1[8 : 5];
        zext_ln180_4_reg_2313[8 : 5] <= zext_ln180_4_fu_1300_p1[8 : 5];
        zext_ln180_8_reg_2339[8 : 5] <= zext_ln180_8_fu_1343_p1[8 : 5];
        zext_ln180_reg_2287[8 : 5] <= zext_ln180_fu_1257_p1[8 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        id_ndx_V <= add_ln700_fu_2060_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to11 = 1'b1;
    end else begin
        ap_idle_pp0_0to11 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to11 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache0_ce0 = 1'b1;
    end else begin
        bin_iq_cache0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        bin_iq_cache0_ce1 = 1'b1;
    end else begin
        bin_iq_cache0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache0_we0 = 1'b1;
    end else begin
        bin_iq_cache0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache1_ce0 = 1'b1;
    end else begin
        bin_iq_cache1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        bin_iq_cache1_ce1 = 1'b1;
    end else begin
        bin_iq_cache1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache1_we0 = 1'b1;
    end else begin
        bin_iq_cache1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache2_ce0 = 1'b1;
    end else begin
        bin_iq_cache2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        bin_iq_cache2_ce1 = 1'b1;
    end else begin
        bin_iq_cache2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache2_we0 = 1'b1;
    end else begin
        bin_iq_cache2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache3_ce0 = 1'b1;
    end else begin
        bin_iq_cache3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        bin_iq_cache3_ce1 = 1'b1;
    end else begin
        bin_iq_cache3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache3_we0 = 1'b1;
    end else begin
        bin_iq_cache3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache4_ce0 = 1'b1;
    end else begin
        bin_iq_cache4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        bin_iq_cache4_ce1 = 1'b1;
    end else begin
        bin_iq_cache4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache4_we0 = 1'b1;
    end else begin
        bin_iq_cache4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache5_ce0 = 1'b1;
    end else begin
        bin_iq_cache5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        bin_iq_cache5_ce1 = 1'b1;
    end else begin
        bin_iq_cache5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache5_we0 = 1'b1;
    end else begin
        bin_iq_cache5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache6_ce0 = 1'b1;
    end else begin
        bin_iq_cache6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        bin_iq_cache6_ce1 = 1'b1;
    end else begin
        bin_iq_cache6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache6_we0 = 1'b1;
    end else begin
        bin_iq_cache6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache7_ce0 = 1'b1;
    end else begin
        bin_iq_cache7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        bin_iq_cache7_ce1 = 1'b1;
    end else begin
        bin_iq_cache7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bin_iq_cache7_we0 = 1'b1;
    end else begin
        bin_iq_cache7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1611_ce = 1'b1;
    end else begin
        grp_fu_1611_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1645_ce = 1'b1;
    end else begin
        grp_fu_1645_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1679_ce = 1'b1;
    end else begin
        grp_fu_1679_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1713_ce = 1'b1;
    end else begin
        grp_fu_1713_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1747_ce = 1'b1;
    end else begin
        grp_fu_1747_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1781_ce = 1'b1;
    end else begin
        grp_fu_1781_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1815_ce = 1'b1;
    end else begin
        grp_fu_1815_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1849_ce = 1'b1;
    end else begin
        grp_fu_1849_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_stream_TDATA_blk_n = i_stream_TVALID_int;
    end else begin
        i_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((i_stream_TVALID == 1'b1) & (regslice_both_i_stream_data_val_V_U_ack_in == 1'b1))) begin
        i_stream_TREADY = 1'b1;
    end else begin
        i_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_stream_TREADY_int = 1'b1;
    end else begin
        i_stream_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
        out0_TDATA_blk_n = out0_TREADY_int;
    end else begin
        out0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out0_TVALID_int = 1'b1;
    end else begin
        out0_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
        out1_TDATA_blk_n = out1_TREADY_int;
    end else begin
        out1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out1_TVALID_int = 1'b1;
    end else begin
        out1_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
        out2_TDATA_blk_n = out2_TREADY_int;
    end else begin
        out2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out2_TVALID_int = 1'b1;
    end else begin
        out2_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
        out3_TDATA_blk_n = out3_TREADY_int;
    end else begin
        out3_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out3_TVALID_int = 1'b1;
    end else begin
        out3_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
        out4_TDATA_blk_n = out4_TREADY_int;
    end else begin
        out4_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out4_TVALID_int = 1'b1;
    end else begin
        out4_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
        out5_TDATA_blk_n = out5_TREADY_int;
    end else begin
        out5_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out5_TVALID_int = 1'b1;
    end else begin
        out5_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
        out6_TDATA_blk_n = out6_TREADY_int;
    end else begin
        out6_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out6_TVALID_int = 1'b1;
    end else begin
        out6_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
        out7_TDATA_blk_n = out7_TREADY_int;
    end else begin
        out7_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out7_TVALID_int = 1'b1;
    end else begin
        out7_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_stream_TDATA_blk_n = q_stream_TVALID_int;
    end else begin
        q_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((q_stream_TVALID == 1'b1) & (regslice_both_q_stream_data_val_V_U_ack_in == 1'b1))) begin
        q_stream_TREADY = 1'b1;
    end else begin
        q_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        q_stream_TREADY_int = 1'b1;
    end else begin
        q_stream_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        rid_to_bin_V_ce0 = 1'b1;
    end else begin
        rid_to_bin_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_fu_2060_p2 = (11'd8 + id_ndx_V);

assign and_ln180_1_fu_1887_p2 = (lshr_ln180_3_fu_1881_p2 & lshr_ln180_2_reg_2570);

assign and_ln180_2_fu_1913_p2 = (lshr_ln180_5_fu_1907_p2 & lshr_ln180_4_reg_2575);

assign and_ln180_3_fu_1939_p2 = (lshr_ln180_7_fu_1933_p2 & lshr_ln180_6_reg_2580);

assign and_ln180_4_fu_1965_p2 = (lshr_ln180_9_fu_1959_p2 & lshr_ln180_8_reg_2585);

assign and_ln180_5_fu_1991_p2 = (lshr_ln180_11_fu_1985_p2 & lshr_ln180_10_reg_2590);

assign and_ln180_6_fu_2017_p2 = (lshr_ln180_13_fu_2011_p2 & lshr_ln180_12_reg_2595);

assign and_ln180_7_fu_2043_p2 = (lshr_ln180_15_fu_2037_p2 & lshr_ln180_14_reg_2600);

assign and_ln180_fu_1863_p2 = (lshr_ln180_reg_2565 & lshr_ln180_1_fu_1857_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b1) & ((ap_start == 1'b0) | (q_stream_TVALID_int == 1'b0) | (i_stream_TVALID_int == 1'b0))) | ((ap_enable_reg_pp0_iter12 == 1'b1) & ((regslice_both_out7_data_val_U_apdone_blk == 1'b1) | (regslice_both_out6_data_val_U_apdone_blk == 1'b1) | (regslice_both_out5_data_val_U_apdone_blk == 1'b1) | (regslice_both_out4_data_val_U_apdone_blk == 1'b1) | (regslice_both_out3_data_val_U_apdone_blk == 1'b1) | (regslice_both_out2_data_val_U_apdone_blk == 1'b1) | (regslice_both_out1_data_val_U_apdone_blk == 1'b1) | (regslice_both_out0_data_val_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b1) & ((ap_start == 1'b0) | (q_stream_TVALID_int == 1'b0) | (i_stream_TVALID_int == 1'b0))) | ((ap_enable_reg_pp0_iter12 == 1'b1) & ((regslice_both_out7_data_val_U_apdone_blk == 1'b1) | (regslice_both_out6_data_val_U_apdone_blk == 1'b1) | (regslice_both_out5_data_val_U_apdone_blk == 1'b1) | (regslice_both_out4_data_val_U_apdone_blk == 1'b1) | (regslice_both_out3_data_val_U_apdone_blk == 1'b1) | (regslice_both_out2_data_val_U_apdone_blk == 1'b1) | (regslice_both_out1_data_val_U_apdone_blk == 1'b1) | (regslice_both_out0_data_val_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state13_io))) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b1) & ((ap_start == 1'b0) | (q_stream_TVALID_int == 1'b0) | (i_stream_TVALID_int == 1'b0))) | ((ap_enable_reg_pp0_iter12 == 1'b1) & ((regslice_both_out7_data_val_U_apdone_blk == 1'b1) | (regslice_both_out6_data_val_U_apdone_blk == 1'b1) | (regslice_both_out5_data_val_U_apdone_blk == 1'b1) | (regslice_both_out4_data_val_U_apdone_blk == 1'b1) | (regslice_both_out3_data_val_U_apdone_blk == 1'b1) | (regslice_both_out2_data_val_U_apdone_blk == 1'b1) | (regslice_both_out1_data_val_U_apdone_blk == 1'b1) | (regslice_both_out0_data_val_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state13_io))) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((out7_TREADY_int == 1'b0) | (out6_TREADY_int == 1'b0) | (out5_TREADY_int == 1'b0) | (out4_TREADY_int == 1'b0) | (out3_TREADY_int == 1'b0) | (out2_TREADY_int == 1'b0) | (out1_TREADY_int == 1'b0) | (out0_TREADY_int == 1'b0));
end

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((out7_TREADY_int == 1'b0) | (out6_TREADY_int == 1'b0) | (out5_TREADY_int == 1'b0) | (out4_TREADY_int == 1'b0) | (out3_TREADY_int == 1'b0) | (out2_TREADY_int == 1'b0) | (out1_TREADY_int == 1'b0) | (out0_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state13_pp0_stage0_iter12 = ((regslice_both_out7_data_val_U_apdone_blk == 1'b1) | (regslice_both_out6_data_val_U_apdone_blk == 1'b1) | (regslice_both_out5_data_val_U_apdone_blk == 1'b1) | (regslice_both_out4_data_val_U_apdone_blk == 1'b1) | (regslice_both_out3_data_val_U_apdone_blk == 1'b1) | (regslice_both_out2_data_val_U_apdone_blk == 1'b1) | (regslice_both_out1_data_val_U_apdone_blk == 1'b1) | (regslice_both_out0_data_val_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (q_stream_TVALID_int == 1'b0) | (i_stream_TVALID_int == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_operation_100 = (1'b1 == 1'b1);

assign ap_enable_operation_103 = (1'b1 == 1'b1);

assign ap_enable_operation_106 = (1'b1 == 1'b1);

assign ap_enable_operation_109 = (1'b1 == 1'b1);

assign ap_enable_operation_112 = (1'b1 == 1'b1);

assign ap_enable_operation_121 = (1'b1 == 1'b1);

assign ap_enable_operation_123 = (1'b1 == 1'b1);

assign ap_enable_operation_125 = (1'b1 == 1'b1);

assign ap_enable_operation_127 = (1'b1 == 1'b1);

assign ap_enable_operation_129 = (1'b1 == 1'b1);

assign ap_enable_operation_131 = (1'b1 == 1'b1);

assign ap_enable_operation_133 = (1'b1 == 1'b1);

assign ap_enable_operation_135 = (1'b1 == 1'b1);

assign ap_enable_operation_63 = (1'b1 == 1'b1);

assign ap_enable_operation_64 = (1'b1 == 1'b1);

assign ap_enable_operation_65 = (1'b1 == 1'b1);

assign ap_enable_operation_66 = (1'b1 == 1'b1);

assign ap_enable_operation_67 = (1'b1 == 1'b1);

assign ap_enable_operation_68 = (1'b1 == 1'b1);

assign ap_enable_operation_69 = (1'b1 == 1'b1);

assign ap_enable_operation_70 = (1'b1 == 1'b1);

assign ap_enable_operation_91 = (1'b1 == 1'b1);

assign ap_enable_operation_94 = (1'b1 == 1'b1);

assign ap_enable_operation_97 = (1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_enable_state1_pp0_iter0_stage0 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state4_pp0_iter3_stage0 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state6_pp0_iter5_stage0 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bin_iq_cache0_address0 = zext_ln544_fu_571_p1;

assign bin_iq_cache0_address1 = zext_ln681_fu_1126_p1;

assign bin_iq_cache1_address0 = zext_ln544_fu_571_p1;

assign bin_iq_cache1_address1 = zext_ln681_1_fu_1130_p1;

assign bin_iq_cache2_address0 = zext_ln544_fu_571_p1;

assign bin_iq_cache2_address1 = zext_ln681_2_fu_1134_p1;

assign bin_iq_cache3_address0 = zext_ln544_fu_571_p1;

assign bin_iq_cache3_address1 = zext_ln681_3_fu_1138_p1;

assign bin_iq_cache4_address0 = zext_ln544_fu_571_p1;

assign bin_iq_cache4_address1 = zext_ln681_4_fu_1142_p1;

assign bin_iq_cache5_address0 = zext_ln544_fu_571_p1;

assign bin_iq_cache5_address1 = zext_ln681_5_fu_1146_p1;

assign bin_iq_cache6_address0 = zext_ln544_fu_571_p1;

assign bin_iq_cache6_address1 = zext_ln681_6_fu_1150_p1;

assign bin_iq_cache7_address0 = zext_ln544_fu_571_p1;

assign bin_iq_cache7_address1 = zext_ln681_7_fu_1154_p1;

assign empty_10_fu_1288_p2 = (tmp_1_fu_1281_p3 | 9'd31);

assign empty_11_fu_1331_p2 = (tmp_4_fu_1324_p3 | 9'd31);

assign empty_12_fu_1374_p2 = (tmp_9_fu_1367_p3 | 9'd31);

assign empty_13_fu_1417_p2 = (tmp_12_fu_1410_p3 | 9'd31);

assign empty_14_fu_1460_p2 = (tmp_15_fu_1453_p3 | 9'd31);

assign empty_15_fu_1503_p2 = (tmp_18_fu_1496_p3 | 9'd31);

assign empty_16_fu_1546_p2 = (tmp_21_fu_1539_p3 | 9'd31);

assign empty_8_fu_982_p1 = rid_to_bin_V_q0[3:0];

assign empty_9_fu_1245_p2 = (tmp_7_fu_1238_p3 | 9'd31);

assign grp_fu_1611_p1 = select_ln180_2_reg_2298;

assign grp_fu_1645_p1 = select_ln180_5_reg_2324;

assign grp_fu_1679_p1 = select_ln180_8_reg_2350;

assign grp_fu_1713_p1 = select_ln180_11_reg_2376;

assign grp_fu_1747_p1 = select_ln180_14_reg_2402;

assign grp_fu_1781_p1 = select_ln180_17_reg_2428;

assign grp_fu_1815_p1 = select_ln180_20_reg_2454;

assign grp_fu_1849_p1 = select_ln180_23_reg_2480;

assign icmp_ln180_1_fu_1294_p2 = ((tmp_1_fu_1281_p3 > empty_10_fu_1288_p2) ? 1'b1 : 1'b0);

assign icmp_ln180_2_fu_1337_p2 = ((tmp_4_fu_1324_p3 > empty_11_fu_1331_p2) ? 1'b1 : 1'b0);

assign icmp_ln180_3_fu_1380_p2 = ((tmp_9_fu_1367_p3 > empty_12_fu_1374_p2) ? 1'b1 : 1'b0);

assign icmp_ln180_4_fu_1423_p2 = ((tmp_12_fu_1410_p3 > empty_13_fu_1417_p2) ? 1'b1 : 1'b0);

assign icmp_ln180_5_fu_1466_p2 = ((tmp_15_fu_1453_p3 > empty_14_fu_1460_p2) ? 1'b1 : 1'b0);

assign icmp_ln180_6_fu_1509_p2 = ((tmp_18_fu_1496_p3 > empty_15_fu_1503_p2) ? 1'b1 : 1'b0);

assign icmp_ln180_7_fu_1552_p2 = ((tmp_21_fu_1539_p3 > empty_16_fu_1546_p2) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_1251_p2 = ((tmp_7_fu_1238_p3 > empty_9_fu_1245_p2) ? 1'b1 : 1'b0);

assign lshr_ln180_11_fu_1985_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln180_23_fu_1982_p1;

assign lshr_ln180_13_fu_2011_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln180_27_fu_2008_p1;

assign lshr_ln180_15_fu_2037_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln180_31_fu_2034_p1;

assign lshr_ln180_1_fu_1857_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln180_3_fu_1854_p1;

assign lshr_ln180_3_fu_1881_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln180_7_fu_1878_p1;

assign lshr_ln180_5_fu_1907_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln180_11_fu_1904_p1;

assign lshr_ln180_7_fu_1933_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln180_15_fu_1930_p1;

assign lshr_ln180_9_fu_1959_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln180_19_fu_1956_p1;

assign op2_V_read_assign_10_fu_696_p4 = {{i_stream_TDATA_int[111:96]}};

assign op2_V_read_assign_11_fu_706_p4 = {{q_stream_TDATA_int[111:96]}};

assign op2_V_read_assign_12_fu_716_p4 = {{i_stream_TDATA_int[127:112]}};

assign op2_V_read_assign_13_fu_726_p4 = {{q_stream_TDATA_int[127:112]}};

assign op2_V_read_assign_14_fu_736_p4 = {{i_stream_TDATA_int[143:128]}};

assign op2_V_read_assign_15_fu_746_p4 = {{q_stream_TDATA_int[143:128]}};

assign op2_V_read_assign_16_fu_756_p4 = {{i_stream_TDATA_int[159:144]}};

assign op2_V_read_assign_17_fu_766_p4 = {{q_stream_TDATA_int[159:144]}};

assign op2_V_read_assign_18_fu_776_p4 = {{i_stream_TDATA_int[175:160]}};

assign op2_V_read_assign_19_fu_786_p4 = {{q_stream_TDATA_int[175:160]}};

assign op2_V_read_assign_1_fu_686_p4 = {{q_stream_TDATA_int[95:80]}};

assign op2_V_read_assign_20_fu_796_p4 = {{i_stream_TDATA_int[191:176]}};

assign op2_V_read_assign_21_fu_806_p4 = {{q_stream_TDATA_int[191:176]}};

assign op2_V_read_assign_22_fu_816_p4 = {{i_stream_TDATA_int[207:192]}};

assign op2_V_read_assign_23_fu_826_p4 = {{q_stream_TDATA_int[207:192]}};

assign op2_V_read_assign_24_fu_836_p4 = {{i_stream_TDATA_int[223:208]}};

assign op2_V_read_assign_25_fu_846_p4 = {{q_stream_TDATA_int[223:208]}};

assign op2_V_read_assign_26_fu_856_p4 = {{i_stream_TDATA_int[239:224]}};

assign op2_V_read_assign_27_fu_866_p4 = {{q_stream_TDATA_int[239:224]}};

assign op2_V_read_assign_28_fu_876_p4 = {{i_stream_TDATA_int[255:240]}};

assign op2_V_read_assign_29_fu_886_p4 = {{q_stream_TDATA_int[255:240]}};

assign op2_V_read_assign_2_fu_596_p4 = {{i_stream_TDATA_int[31:16]}};

assign op2_V_read_assign_3_fu_606_p4 = {{q_stream_TDATA_int[31:16]}};

assign op2_V_read_assign_4_fu_616_p4 = {{i_stream_TDATA_int[47:32]}};

assign op2_V_read_assign_5_fu_626_p4 = {{q_stream_TDATA_int[47:32]}};

assign op2_V_read_assign_6_fu_636_p4 = {{i_stream_TDATA_int[63:48]}};

assign op2_V_read_assign_7_fu_646_p4 = {{q_stream_TDATA_int[63:48]}};

assign op2_V_read_assign_8_fu_656_p4 = {{i_stream_TDATA_int[79:64]}};

assign op2_V_read_assign_9_fu_666_p4 = {{q_stream_TDATA_int[79:64]}};

assign op2_V_read_assign_s_fu_676_p4 = {{i_stream_TDATA_int[95:80]}};

assign out0_TDATA_int = and_ln180_fu_1863_p2[31:0];

assign out0_TVALID = regslice_both_out0_data_val_U_vld_out;

assign out1_TDATA_int = and_ln180_1_fu_1887_p2[31:0];

assign out1_TUSER_int = (11'd1 + id_ndx_V);

assign out1_TVALID = regslice_both_out1_data_val_U_vld_out;

assign out2_TDATA_int = and_ln180_2_fu_1913_p2[31:0];

assign out2_TUSER_int = (11'd2 + id_ndx_V);

assign out2_TVALID = regslice_both_out2_data_val_U_vld_out;

assign out3_TDATA_int = and_ln180_3_fu_1939_p2[31:0];

assign out3_TUSER_int = (11'd3 + id_ndx_V);

assign out3_TVALID = regslice_both_out3_data_val_U_vld_out;

assign out4_TDATA_int = and_ln180_4_fu_1965_p2[31:0];

assign out4_TUSER_int = (11'd4 + id_ndx_V);

assign out4_TVALID = regslice_both_out4_data_val_U_vld_out;

assign out5_TDATA_int = and_ln180_5_fu_1991_p2[31:0];

assign out5_TUSER_int = (11'd5 + id_ndx_V);

assign out5_TVALID = regslice_both_out5_data_val_U_vld_out;

assign out6_TDATA_int = and_ln180_6_fu_2017_p2[31:0];

assign out6_TUSER_int = (11'd6 + id_ndx_V);

assign out6_TVALID = regslice_both_out6_data_val_U_vld_out;

assign out7_TDATA_int = and_ln180_7_fu_2043_p2[31:0];

assign out7_TUSER_int = (11'd7 + id_ndx_V);

assign out7_TVALID = regslice_both_out7_data_val_U_vld_out;

assign rid_to_bin_V_address0 = zext_ln544_fu_571_p1;

assign select_ln180_10_fu_1396_p3 = ((icmp_ln180_3_fu_1380_p2[0:0] === 1'b1) ? tmp_10_reg_2232 : bin_iq_cache3_load_reg_2227);

assign select_ln180_11_fu_1402_p3 = ((icmp_ln180_3_fu_1380_p2[0:0] === 1'b1) ? xor_ln180_3_fu_1390_p2 : zext_ln180_12_fu_1386_p1);

assign select_ln180_12_fu_1731_p3 = ((icmp_ln180_4_reg_2386[0:0] === 1'b1) ? sub_ln180_12_fu_1721_p2 : sub_ln180_13_fu_1726_p2);

assign select_ln180_13_fu_1439_p3 = ((icmp_ln180_4_fu_1423_p2[0:0] === 1'b1) ? tmp_13_reg_2242 : bin_iq_cache4_load_reg_2237);

assign select_ln180_14_fu_1445_p3 = ((icmp_ln180_4_fu_1423_p2[0:0] === 1'b1) ? xor_ln180_4_fu_1433_p2 : zext_ln180_16_fu_1429_p1);

assign select_ln180_15_fu_1765_p3 = ((icmp_ln180_5_reg_2412[0:0] === 1'b1) ? sub_ln180_15_fu_1755_p2 : sub_ln180_16_fu_1760_p2);

assign select_ln180_16_fu_1482_p3 = ((icmp_ln180_5_fu_1466_p2[0:0] === 1'b1) ? tmp_16_reg_2252 : bin_iq_cache5_load_reg_2247);

assign select_ln180_17_fu_1488_p3 = ((icmp_ln180_5_fu_1466_p2[0:0] === 1'b1) ? xor_ln180_5_fu_1476_p2 : zext_ln180_20_fu_1472_p1);

assign select_ln180_18_fu_1799_p3 = ((icmp_ln180_6_reg_2438[0:0] === 1'b1) ? sub_ln180_18_fu_1789_p2 : sub_ln180_19_fu_1794_p2);

assign select_ln180_19_fu_1525_p3 = ((icmp_ln180_6_fu_1509_p2[0:0] === 1'b1) ? tmp_19_reg_2262 : bin_iq_cache6_load_reg_2257);

assign select_ln180_1_fu_1267_p3 = ((icmp_ln180_fu_1251_p2[0:0] === 1'b1) ? tmp_reg_2202 : bin_iq_cache0_load_reg_2197);

assign select_ln180_20_fu_1531_p3 = ((icmp_ln180_6_fu_1509_p2[0:0] === 1'b1) ? xor_ln180_6_fu_1519_p2 : zext_ln180_24_fu_1515_p1);

assign select_ln180_21_fu_1833_p3 = ((icmp_ln180_7_reg_2464[0:0] === 1'b1) ? sub_ln180_21_fu_1823_p2 : sub_ln180_22_fu_1828_p2);

assign select_ln180_22_fu_1568_p3 = ((icmp_ln180_7_fu_1552_p2[0:0] === 1'b1) ? tmp_22_reg_2272 : bin_iq_cache7_load_reg_2267);

assign select_ln180_23_fu_1574_p3 = ((icmp_ln180_7_fu_1552_p2[0:0] === 1'b1) ? xor_ln180_7_fu_1562_p2 : zext_ln180_28_fu_1558_p1);

assign select_ln180_2_fu_1273_p3 = ((icmp_ln180_fu_1251_p2[0:0] === 1'b1) ? xor_ln180_fu_1261_p2 : zext_ln180_fu_1257_p1);

assign select_ln180_3_fu_1629_p3 = ((icmp_ln180_1_reg_2308[0:0] === 1'b1) ? sub_ln180_3_fu_1619_p2 : sub_ln180_4_fu_1624_p2);

assign select_ln180_4_fu_1310_p3 = ((icmp_ln180_1_fu_1294_p2[0:0] === 1'b1) ? tmp_2_reg_2212 : bin_iq_cache1_load_reg_2207);

assign select_ln180_5_fu_1316_p3 = ((icmp_ln180_1_fu_1294_p2[0:0] === 1'b1) ? xor_ln180_1_fu_1304_p2 : zext_ln180_4_fu_1300_p1);

assign select_ln180_6_fu_1663_p3 = ((icmp_ln180_2_reg_2334[0:0] === 1'b1) ? sub_ln180_6_fu_1653_p2 : sub_ln180_7_fu_1658_p2);

assign select_ln180_7_fu_1353_p3 = ((icmp_ln180_2_fu_1337_p2[0:0] === 1'b1) ? tmp_6_reg_2222 : bin_iq_cache2_load_reg_2217);

assign select_ln180_8_fu_1359_p3 = ((icmp_ln180_2_fu_1337_p2[0:0] === 1'b1) ? xor_ln180_2_fu_1347_p2 : zext_ln180_8_fu_1343_p1);

assign select_ln180_9_fu_1697_p3 = ((icmp_ln180_3_reg_2360[0:0] === 1'b1) ? sub_ln180_9_fu_1687_p2 : sub_ln180_10_fu_1692_p2);

assign select_ln180_fu_1595_p3 = ((icmp_ln180_reg_2282[0:0] === 1'b1) ? sub_ln180_fu_1585_p2 : sub_ln180_1_fu_1590_p2);

assign sub_ln180_10_fu_1692_p2 = (zext_ln180_13_fu_1684_p1 - zext_ln180_12_reg_2365);

assign sub_ln180_11_fu_1704_p2 = (10'd511 - select_ln180_9_fu_1697_p3);

assign sub_ln180_12_fu_1721_p2 = (zext_ln180_16_reg_2391 - zext_ln180_17_fu_1718_p1);

assign sub_ln180_13_fu_1726_p2 = (zext_ln180_17_fu_1718_p1 - zext_ln180_16_reg_2391);

assign sub_ln180_14_fu_1738_p2 = (10'd511 - select_ln180_12_fu_1731_p3);

assign sub_ln180_15_fu_1755_p2 = (zext_ln180_20_reg_2417 - zext_ln180_21_fu_1752_p1);

assign sub_ln180_16_fu_1760_p2 = (zext_ln180_21_fu_1752_p1 - zext_ln180_20_reg_2417);

assign sub_ln180_17_fu_1772_p2 = (10'd511 - select_ln180_15_fu_1765_p3);

assign sub_ln180_18_fu_1789_p2 = (zext_ln180_24_reg_2443 - zext_ln180_25_fu_1786_p1);

assign sub_ln180_19_fu_1794_p2 = (zext_ln180_25_fu_1786_p1 - zext_ln180_24_reg_2443);

assign sub_ln180_1_fu_1590_p2 = (zext_ln180_1_fu_1582_p1 - zext_ln180_reg_2287);

assign sub_ln180_20_fu_1806_p2 = (10'd511 - select_ln180_18_fu_1799_p3);

assign sub_ln180_21_fu_1823_p2 = (zext_ln180_28_reg_2469 - zext_ln180_29_fu_1820_p1);

assign sub_ln180_22_fu_1828_p2 = (zext_ln180_29_fu_1820_p1 - zext_ln180_28_reg_2469);

assign sub_ln180_23_fu_1840_p2 = (10'd511 - select_ln180_21_fu_1833_p3);

assign sub_ln180_2_fu_1602_p2 = (10'd511 - select_ln180_fu_1595_p3);

assign sub_ln180_3_fu_1619_p2 = (zext_ln180_4_reg_2313 - zext_ln180_5_fu_1616_p1);

assign sub_ln180_4_fu_1624_p2 = (zext_ln180_5_fu_1616_p1 - zext_ln180_4_reg_2313);

assign sub_ln180_5_fu_1636_p2 = (10'd511 - select_ln180_3_fu_1629_p3);

assign sub_ln180_6_fu_1653_p2 = (zext_ln180_8_reg_2339 - zext_ln180_9_fu_1650_p1);

assign sub_ln180_7_fu_1658_p2 = (zext_ln180_9_fu_1650_p1 - zext_ln180_8_reg_2339);

assign sub_ln180_8_fu_1670_p2 = (10'd511 - select_ln180_6_fu_1663_p3);

assign sub_ln180_9_fu_1687_p2 = (zext_ln180_12_reg_2365 - zext_ln180_13_fu_1684_p1);

assign sub_ln180_fu_1585_p2 = (zext_ln180_reg_2287 - zext_ln180_1_fu_1582_p1);

integer ap_tvar_int_0;

always @ (bin_iq_cache3_q1) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_10_fu_1188_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_10_fu_1188_p4[ap_tvar_int_0] = bin_iq_cache3_q1[511 - ap_tvar_int_0];
        end
    end
end

assign tmp_12_fu_1410_p3 = {{tmp_11_reg_2122_pp0_iter5_reg}, {5'd0}};

integer ap_tvar_int_1;

always @ (bin_iq_cache4_q1) begin
    for (ap_tvar_int_1 = 512 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 511 - 0) begin
            tmp_13_fu_1198_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_13_fu_1198_p4[ap_tvar_int_1] = bin_iq_cache4_q1[511 - ap_tvar_int_1];
        end
    end
end

assign tmp_15_fu_1453_p3 = {{tmp_14_reg_2132_pp0_iter5_reg}, {5'd0}};

integer ap_tvar_int_2;

always @ (bin_iq_cache5_q1) begin
    for (ap_tvar_int_2 = 512 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 511 - 0) begin
            tmp_16_fu_1208_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_16_fu_1208_p4[ap_tvar_int_2] = bin_iq_cache5_q1[511 - ap_tvar_int_2];
        end
    end
end

assign tmp_18_fu_1496_p3 = {{tmp_17_reg_2142_pp0_iter5_reg}, {5'd0}};

integer ap_tvar_int_3;

always @ (bin_iq_cache6_q1) begin
    for (ap_tvar_int_3 = 512 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 511 - 0) begin
            tmp_19_fu_1218_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_19_fu_1218_p4[ap_tvar_int_3] = bin_iq_cache6_q1[511 - ap_tvar_int_3];
        end
    end
end

assign tmp_1_fu_1281_p3 = {{tmp_s_reg_2092_pp0_iter5_reg}, {5'd0}};

assign tmp_21_fu_1539_p3 = {{tmp_20_reg_2152_pp0_iter5_reg}, {5'd0}};

integer ap_tvar_int_4;

always @ (bin_iq_cache7_q1) begin
    for (ap_tvar_int_4 = 512 - 1; ap_tvar_int_4 >= 0; ap_tvar_int_4 = ap_tvar_int_4 - 1) begin
        if (ap_tvar_int_4 > 511 - 0) begin
            tmp_22_fu_1228_p4[ap_tvar_int_4] = 1'b0;
        end else begin
            tmp_22_fu_1228_p4[ap_tvar_int_4] = bin_iq_cache7_q1[511 - ap_tvar_int_4];
        end
    end
end

integer ap_tvar_int_5;

always @ (bin_iq_cache1_q1) begin
    for (ap_tvar_int_5 = 512 - 1; ap_tvar_int_5 >= 0; ap_tvar_int_5 = ap_tvar_int_5 - 1) begin
        if (ap_tvar_int_5 > 511 - 0) begin
            tmp_2_fu_1168_p4[ap_tvar_int_5] = 1'b0;
        end else begin
            tmp_2_fu_1168_p4[ap_tvar_int_5] = bin_iq_cache1_q1[511 - ap_tvar_int_5];
        end
    end
end

assign tmp_4_fu_1324_p3 = {{tmp_3_reg_2102_pp0_iter5_reg}, {5'd0}};

assign tmp_5_fu_896_p33 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{op2_V_read_assign_29_fu_886_p4}, {op2_V_read_assign_28_fu_876_p4}}, {op2_V_read_assign_27_fu_866_p4}}, {op2_V_read_assign_26_fu_856_p4}}, {op2_V_read_assign_25_fu_846_p4}}, {op2_V_read_assign_24_fu_836_p4}}, {op2_V_read_assign_23_fu_826_p4}}, {op2_V_read_assign_22_fu_816_p4}}, {op2_V_read_assign_21_fu_806_p4}}, {op2_V_read_assign_20_fu_796_p4}}, {op2_V_read_assign_19_fu_786_p4}}, {op2_V_read_assign_18_fu_776_p4}}, {op2_V_read_assign_17_fu_766_p4}}, {op2_V_read_assign_16_fu_756_p4}}, {op2_V_read_assign_15_fu_746_p4}}, {op2_V_read_assign_14_fu_736_p4}}, {op2_V_read_assign_13_fu_726_p4}}, {op2_V_read_assign_12_fu_716_p4}}, {op2_V_read_assign_11_fu_706_p4}}, {op2_V_read_assign_10_fu_696_p4}}, {op2_V_read_assign_1_fu_686_p4}}, {op2_V_read_assign_s_fu_676_p4}}, {op2_V_read_assign_9_fu_666_p4}}, {op2_V_read_assign_8_fu_656_p4}}, {op2_V_read_assign_7_fu_646_p4}}, {op2_V_read_assign_6_fu_636_p4}}, {op2_V_read_assign_5_fu_626_p4}}, {op2_V_read_assign_4_fu_616_p4}}, {op2_V_read_assign_3_fu_606_p4}}, {op2_V_read_assign_2_fu_596_p4}}, {trunc_ln78_1_fu_592_p1}}, {trunc_ln78_fu_588_p1}};

integer ap_tvar_int_6;

always @ (bin_iq_cache2_q1) begin
    for (ap_tvar_int_6 = 512 - 1; ap_tvar_int_6 >= 0; ap_tvar_int_6 = ap_tvar_int_6 - 1) begin
        if (ap_tvar_int_6 > 511 - 0) begin
            tmp_6_fu_1178_p4[ap_tvar_int_6] = 1'b0;
        end else begin
            tmp_6_fu_1178_p4[ap_tvar_int_6] = bin_iq_cache2_q1[511 - ap_tvar_int_6];
        end
    end
end

assign tmp_7_fu_1238_p3 = {{empty_8_reg_2082_pp0_iter5_reg}, {5'd0}};

assign tmp_9_fu_1367_p3 = {{tmp_8_reg_2112_pp0_iter5_reg}, {5'd0}};

integer ap_tvar_int_7;

always @ (bin_iq_cache0_q1) begin
    for (ap_tvar_int_7 = 512 - 1; ap_tvar_int_7 >= 0; ap_tvar_int_7 = ap_tvar_int_7 - 1) begin
        if (ap_tvar_int_7 > 511 - 0) begin
            tmp_fu_1158_p4[ap_tvar_int_7] = 1'b0;
        end else begin
            tmp_fu_1158_p4[ap_tvar_int_7] = bin_iq_cache0_q1[511 - ap_tvar_int_7];
        end
    end
end

assign trunc_ln78_1_fu_592_p1 = q_stream_TDATA_int[15:0];

assign trunc_ln78_fu_588_p1 = i_stream_TDATA_int[15:0];

assign xor_ln180_1_fu_1304_p2 = (zext_ln180_4_fu_1300_p1 ^ 10'd511);

assign xor_ln180_2_fu_1347_p2 = (zext_ln180_8_fu_1343_p1 ^ 10'd511);

assign xor_ln180_3_fu_1390_p2 = (zext_ln180_12_fu_1386_p1 ^ 10'd511);

assign xor_ln180_4_fu_1433_p2 = (zext_ln180_16_fu_1429_p1 ^ 10'd511);

assign xor_ln180_5_fu_1476_p2 = (zext_ln180_20_fu_1472_p1 ^ 10'd511);

assign xor_ln180_6_fu_1519_p2 = (zext_ln180_24_fu_1515_p1 ^ 10'd511);

assign xor_ln180_7_fu_1562_p2 = (zext_ln180_28_fu_1558_p1 ^ 10'd511);

assign xor_ln180_fu_1261_p2 = (zext_ln180_fu_1257_p1 ^ 10'd511);

assign zext_ln180_11_fu_1904_p1 = sub_ln180_8_reg_2505_pp0_iter10_reg;

assign zext_ln180_12_fu_1386_p1 = tmp_9_fu_1367_p3;

assign zext_ln180_13_fu_1684_p1 = empty_12_reg_2355;

assign zext_ln180_15_fu_1930_p1 = sub_ln180_11_reg_2515_pp0_iter10_reg;

assign zext_ln180_16_fu_1429_p1 = tmp_12_fu_1410_p3;

assign zext_ln180_17_fu_1718_p1 = empty_13_reg_2381;

assign zext_ln180_19_fu_1956_p1 = sub_ln180_14_reg_2525_pp0_iter10_reg;

assign zext_ln180_1_fu_1582_p1 = empty_9_reg_2277;

assign zext_ln180_20_fu_1472_p1 = tmp_15_fu_1453_p3;

assign zext_ln180_21_fu_1752_p1 = empty_14_reg_2407;

assign zext_ln180_23_fu_1982_p1 = sub_ln180_17_reg_2535_pp0_iter10_reg;

assign zext_ln180_24_fu_1515_p1 = tmp_18_fu_1496_p3;

assign zext_ln180_25_fu_1786_p1 = empty_15_reg_2433;

assign zext_ln180_27_fu_2008_p1 = sub_ln180_20_reg_2545_pp0_iter10_reg;

assign zext_ln180_28_fu_1558_p1 = tmp_21_fu_1539_p3;

assign zext_ln180_29_fu_1820_p1 = empty_16_reg_2459;

assign zext_ln180_31_fu_2034_p1 = sub_ln180_23_reg_2555_pp0_iter10_reg;

assign zext_ln180_3_fu_1854_p1 = sub_ln180_2_reg_2485_pp0_iter10_reg;

assign zext_ln180_4_fu_1300_p1 = tmp_1_fu_1281_p3;

assign zext_ln180_5_fu_1616_p1 = empty_10_reg_2303;

assign zext_ln180_7_fu_1878_p1 = sub_ln180_5_reg_2495_pp0_iter10_reg;

assign zext_ln180_8_fu_1343_p1 = tmp_4_fu_1324_p3;

assign zext_ln180_9_fu_1650_p1 = empty_11_reg_2329;

assign zext_ln180_fu_1257_p1 = tmp_7_fu_1238_p3;

assign zext_ln544_fu_571_p1 = i_stream_TUSER_int;

assign zext_ln681_1_fu_1130_p1 = p_Result_3_reg_2087;

assign zext_ln681_2_fu_1134_p1 = p_Result_5_reg_2097;

assign zext_ln681_3_fu_1138_p1 = p_Result_7_reg_2107;

assign zext_ln681_4_fu_1142_p1 = p_Result_9_reg_2117;

assign zext_ln681_5_fu_1146_p1 = p_Result_s_reg_2127;

assign zext_ln681_6_fu_1150_p1 = p_Result_2_reg_2137;

assign zext_ln681_7_fu_1154_p1 = p_Result_4_reg_2147;

assign zext_ln681_fu_1126_p1 = p_Result_1_reg_2077;

always @ (posedge ap_clk) begin
    empty_9_reg_2277[4:0] <= 5'b11111;
    zext_ln180_reg_2287[4:0] <= 5'b00000;
    zext_ln180_reg_2287[9] <= 1'b0;
    empty_10_reg_2303[4:0] <= 5'b11111;
    zext_ln180_4_reg_2313[4:0] <= 5'b00000;
    zext_ln180_4_reg_2313[9] <= 1'b0;
    empty_11_reg_2329[4:0] <= 5'b11111;
    zext_ln180_8_reg_2339[4:0] <= 5'b00000;
    zext_ln180_8_reg_2339[9] <= 1'b0;
    empty_12_reg_2355[4:0] <= 5'b11111;
    zext_ln180_12_reg_2365[4:0] <= 5'b00000;
    zext_ln180_12_reg_2365[9] <= 1'b0;
    empty_13_reg_2381[4:0] <= 5'b11111;
    zext_ln180_16_reg_2391[4:0] <= 5'b00000;
    zext_ln180_16_reg_2391[9] <= 1'b0;
    empty_14_reg_2407[4:0] <= 5'b11111;
    zext_ln180_20_reg_2417[4:0] <= 5'b00000;
    zext_ln180_20_reg_2417[9] <= 1'b0;
    empty_15_reg_2433[4:0] <= 5'b11111;
    zext_ln180_24_reg_2443[4:0] <= 5'b00000;
    zext_ln180_24_reg_2443[9] <= 1'b0;
    empty_16_reg_2459[4:0] <= 5'b11111;
    zext_ln180_28_reg_2469[4:0] <= 5'b00000;
    zext_ln180_28_reg_2469[9] <= 1'b0;
    sub_ln180_2_reg_2485[0] <= 1'b0;
    sub_ln180_2_reg_2485_pp0_iter8_reg[0] <= 1'b0;
    sub_ln180_2_reg_2485_pp0_iter9_reg[0] <= 1'b0;
    sub_ln180_2_reg_2485_pp0_iter10_reg[0] <= 1'b0;
    sub_ln180_5_reg_2495[0] <= 1'b0;
    sub_ln180_5_reg_2495_pp0_iter8_reg[0] <= 1'b0;
    sub_ln180_5_reg_2495_pp0_iter9_reg[0] <= 1'b0;
    sub_ln180_5_reg_2495_pp0_iter10_reg[0] <= 1'b0;
    sub_ln180_8_reg_2505[0] <= 1'b0;
    sub_ln180_8_reg_2505_pp0_iter8_reg[0] <= 1'b0;
    sub_ln180_8_reg_2505_pp0_iter9_reg[0] <= 1'b0;
    sub_ln180_8_reg_2505_pp0_iter10_reg[0] <= 1'b0;
    sub_ln180_11_reg_2515[0] <= 1'b0;
    sub_ln180_11_reg_2515_pp0_iter8_reg[0] <= 1'b0;
    sub_ln180_11_reg_2515_pp0_iter9_reg[0] <= 1'b0;
    sub_ln180_11_reg_2515_pp0_iter10_reg[0] <= 1'b0;
    sub_ln180_14_reg_2525[0] <= 1'b0;
    sub_ln180_14_reg_2525_pp0_iter8_reg[0] <= 1'b0;
    sub_ln180_14_reg_2525_pp0_iter9_reg[0] <= 1'b0;
    sub_ln180_14_reg_2525_pp0_iter10_reg[0] <= 1'b0;
    sub_ln180_17_reg_2535[0] <= 1'b0;
    sub_ln180_17_reg_2535_pp0_iter8_reg[0] <= 1'b0;
    sub_ln180_17_reg_2535_pp0_iter9_reg[0] <= 1'b0;
    sub_ln180_17_reg_2535_pp0_iter10_reg[0] <= 1'b0;
    sub_ln180_20_reg_2545[0] <= 1'b0;
    sub_ln180_20_reg_2545_pp0_iter8_reg[0] <= 1'b0;
    sub_ln180_20_reg_2545_pp0_iter9_reg[0] <= 1'b0;
    sub_ln180_20_reg_2545_pp0_iter10_reg[0] <= 1'b0;
    sub_ln180_23_reg_2555[0] <= 1'b0;
    sub_ln180_23_reg_2555_pp0_iter8_reg[0] <= 1'b0;
    sub_ln180_23_reg_2555_pp0_iter9_reg[0] <= 1'b0;
    sub_ln180_23_reg_2555_pp0_iter10_reg[0] <= 1'b0;
end

endmodule //bin_to_res_buff_multibuffer
